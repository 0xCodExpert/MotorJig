
MotorJig_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da3c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800dce0  0800dce0  0001dce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e104  0800e104  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e104  0800e104  0001e104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e10c  0800e10c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e10c  0800e10c  0001e10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e110  0800e110  0001e110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800e114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d3c  240001e4  0800e2f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00002600  24004f20  0800e2f8  00024f20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003734e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000056ff  00000000  00000000  00057560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af8  00000000  00000000  0005cc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e0  00000000  00000000  0005e758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003c649  00000000  00000000  00060038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c31a  00000000  00000000  0009c681  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f923  00000000  00000000  000b899b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002282be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d64  00000000  00000000  0022833c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dcc4 	.word	0x0800dcc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800dcc4 	.word	0x0800dcc4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_CRC_Init+0x3c>)
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <MX_CRC_Init+0x40>)
 8000698:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_CRC_Init+0x3c>)
 800069c:	2200      	movs	r2, #0
 800069e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_CRC_Init+0x3c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_CRC_Init+0x3c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_CRC_Init+0x3c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_CRC_Init+0x3c>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_CRC_Init+0x3c>)
 80006ba:	f001 fdc3 	bl	8002244 <HAL_CRC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c4:	f000 f9ee 	bl	8000aa4 <Error_Handler>
  }

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	24004c64 	.word	0x24004c64
 80006d0:	58024c00 	.word	0x58024c00

080006d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <HAL_CRC_MspInit+0x3c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d10e      	bne.n	8000704 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_CRC_MspInit+0x40>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_CRC_MspInit+0x40>)
 80006ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_CRC_MspInit+0x40>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	58024c00 	.word	0x58024c00
 8000714:	58024400 	.word	0x58024400

08000718 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <MX_FREERTOS_Init+0x18>)
 800071e:	2100      	movs	r1, #0
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_FREERTOS_Init+0x1c>)
 8000722:	f008 f81f 	bl	8008764 <osThreadNew>
 8000726:	4602      	mov	r2, r0
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <MX_FREERTOS_Init+0x20>)
 800072a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0800ddf4 	.word	0x0800ddf4
 8000734:	0800073d 	.word	0x0800073d
 8000738:	24004ccc 	.word	0x24004ccc

0800073c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f008 f8b3 	bl	80088b0 <osDelay>
 800074a:	e7fb      	b.n	8000744 <StartDefaultTask+0x8>

0800074c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xc0>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <MX_GPIO_Init+0xc0>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xc0>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_GPIO_Init+0xc0>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_GPIO_Init+0xc0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_GPIO_Init+0xc0>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_GPIO_Init+0xc0>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <MX_GPIO_Init+0xc0>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_GPIO_Init+0xc0>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_GPIO_Init+0xc0>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_GPIO_Init+0xc0>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0xc0>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <MX_GPIO_Init+0xc4>)
 80007e2:	f002 fa0d 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xc4>)
 8000800:	f002 f84e 	bl	80028a0 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58024400 	.word	0x58024400
 8000810:	58020800 	.word	0x58020800

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f001 fbcc 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f844 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff ff94 	bl	800074c <MX_GPIO_Init>
  MX_CRC_Init();
 8000824:	f7ff ff34 	bl	8000690 <MX_CRC_Init>
  MX_TIM6_Init();
 8000828:	f000 fd18 	bl	800125c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800082c:	f001 f89a 	bl	8001964 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000830:	f000 fb64 	bl	8000efc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000834:	f000 fc10 	bl	8001058 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000838:	f000 fcaa 	bl	8001190 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Main_InitModules();
 800083c:	f000 f8e4 	bl	8000a08 <Main_InitModules>
  Main_StartTasks();
 8000840:	f000 f8e8 	bl	8000a14 <Main_StartTasks>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&Rx1Data, 1); //USART1 Interrupt Setting
 8000844:	2201      	movs	r2, #1
 8000846:	4911      	ldr	r1, [pc, #68]	; (800088c <main+0x78>)
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <main+0x7c>)
 800084a:	f006 fa51 	bl	8006cf0 <HAL_UART_Receive_IT>
  USART1->TDR = 0x00;										//dummy byte sending
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <main+0x80>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  while(!(USART1->ISR&0x40));								//dummy byte sending
 8000854:	bf00      	nop
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <main+0x80>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f9      	beq.n	8000856 <main+0x42>

  HAL_TIM_Base_Start_IT(&htim6); 							//TIM6 Interrupt Setting
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <main+0x84>)
 8000864:	f004 fd68 	bl	8005338 <HAL_TIM_Base_Start_IT>
//
//  Uart_Printf("duty : %d\r\n", duty);
//  Uart_Printf("autoReload : %d\r\n", autoReload);


  Uart_Printf("System Core Clock is running at: %dMHz\n\r", SystemCoreClock / 1000000);
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <main+0x88>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <main+0x8c>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	4619      	mov	r1, r3
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <main+0x90>)
 8000878:	f000 ffbf 	bl	80017fa <Uart_Printf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800087c:	f007 ff08 	bl	8008690 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000880:	f7ff ff4a 	bl	8000718 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000884:	f007 ff38 	bl	80086f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x74>
 800088a:	bf00      	nop
 800088c:	24004c8c 	.word	0x24004c8c
 8000890:	24004e4c 	.word	0x24004e4c
 8000894:	40011000 	.word	0x40011000
 8000898:	24004d68 	.word	0x24004d68
 800089c:	24000000 	.word	0x24000000
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	0800dcec 	.word	0x0800dcec

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0cc      	sub	sp, #304	; 0x130
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00a fd2e 	bl	800b318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008c0:	2220      	movs	r2, #32
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00a fd27 	bl	800b318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	23bc      	movs	r3, #188	; 0xbc
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f00a fd1f 	bl	800b318 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008da:	2002      	movs	r0, #2
 80008dc:	f002 f9c4 	bl	8002c68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <SystemClock_Config+0x158>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	4a45      	ldr	r2, [pc, #276]	; (8000a00 <SystemClock_Config+0x158>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <SystemClock_Config+0x158>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <SystemClock_Config+0x15c>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a40      	ldr	r2, [pc, #256]	; (8000a04 <SystemClock_Config+0x15c>)
 8000904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <SystemClock_Config+0x15c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800091a:	bf00      	nop
 800091c:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <SystemClock_Config+0x15c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000928:	d1f8      	bne.n	800091c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2301      	movs	r3, #1
 800092c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000944:	2305      	movs	r3, #5
 8000946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 128;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000950:	2302      	movs	r3, #2
 8000952:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000962:	2308      	movs	r3, #8
 8000964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f9af 	bl	8002cdc <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000984:	f000 f88e 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	233f      	movs	r3, #63	; 0x3f
 800098a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2303      	movs	r3, #3
 8000990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800099a:	2308      	movs	r3, #8
 800099c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009a0:	2340      	movs	r3, #64	; 0x40
 80009a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fd9b 	bl	80034fc <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80009cc:	f000 f86a 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2200      	movs	r2, #0
 80009de:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f94f 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 80009f0:	f000 f858 	bl	8000aa4 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	58000400 	.word	0x58000400
 8000a04:	58024800 	.word	0x58024800

08000a08 <Main_InitModules>:
* \param
* \return
* \note
***************************************************************************************************/
void Main_InitModules(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	// xCountingSemaphore = xSemaphoreCreateCounting(1, 0);
	// vSemaphoreCreateBinary(xBinarySemaphore);
	// xQueue = xQueueCreate(5, sizeof(long));
	// xMutex = xSemaphoreCreateMutex();
	Uart_InitModules();
 8000a0c:	f001 f9f6 	bl	8001dfc <Uart_InitModules>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Main_StartTasks>:
* \param
* \return
* \note
***************************************************************************************************/
void Main_StartTasks(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af02      	add	r7, sp, #8
	xTaskCreate(Main_PeriodicTask,			/* Function that implements the task. */
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	2323      	movs	r3, #35	; 0x23
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	4905      	ldr	r1, [pc, #20]	; (8000a3c <Main_StartTasks+0x28>)
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <Main_StartTasks+0x2c>)
 8000a2a:	f008 fdc5 	bl	80095b8 <xTaskCreate>
			    "Periodic",					/* Text name for the task. */
				configMINIMAL_STACK_SIZE,	/* Stack size in words, not bytes. */
				NULL,						/* Parameter passed into the task. */
				osPriorityAboveNormal3,		/* Priority at which the task is created. */
				NULL);						/* Used to pass out the created task's handle. */
	Uart_InitTasks();
 8000a2e:	f001 f9f5 	bl	8001e1c <Uart_InitTasks>
	Timer_InitTasks();
 8000a32:	f000 fe61 	bl	80016f8 <Timer_InitTasks>
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800dd18 	.word	0x0800dd18
 8000a40:	08000a45 	.word	0x08000a45

08000a44 <Main_PeriodicTask>:
* \param
* \return
* \note
***************************************************************************************************/
void Main_PeriodicTask(void *pvParameters)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	//portTickType xLastWakeTime;
	//xLastWakeTime = xTaskGetTickCount();

	for (;;)
	{
		Uart_Printf("Main_PeriodicTask\r\n");
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <Main_PeriodicTask+0x24>)
 8000a4e:	f000 fed4 	bl	80017fa <Uart_Printf>
		//Debug("%d\r\n", TestResult);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <Main_PeriodicTask+0x28>)
 8000a58:	f002 f8eb 	bl	8002c32 <HAL_GPIO_TogglePin>
//		vTaskDelayUntil(&xLastWakeTime, (500 / portTICK_RATE_MS));
		vTaskDelay(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f008 feee 	bl	8009840 <vTaskDelay>
		Uart_Printf("Main_PeriodicTask\r\n");
 8000a64:	e7f2      	b.n	8000a4c <Main_PeriodicTask+0x8>
 8000a66:	bf00      	nop
 8000a68:	0800dd24 	.word	0x0800dd24
 8000a6c:	58020800 	.word	0x58020800

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f001 fad3 	bl	800202c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d101      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  Timer_1ms();
 8000a90:	f000 fe00 	bl	8001694 <Timer_1ms>
  }
  /* USER CODE END Callback 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40001400 	.word	0x40001400
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x38>)
 8000abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_MspInit+0x38>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x38>)
 8000acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	210f      	movs	r1, #15
 8000adc:	f06f 0001 	mvn.w	r0, #1
 8000ae0:	f001 fb88 	bl	80021f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58024400 	.word	0x58024400

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b090      	sub	sp, #64	; 0x40
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d827      	bhi.n	8000b4e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000afe:	2200      	movs	r2, #0
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2037      	movs	r0, #55	; 0x37
 8000b04:	f001 fb76 	bl	80021f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b08:	2037      	movs	r0, #55	; 0x37
 8000b0a:	f001 fb8d 	bl	8002228 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b0e:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <HAL_InitTick+0xc4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <HAL_InitTick+0xc8>)
 8000b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1a:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <HAL_InitTick+0xc8>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_InitTick+0xc8>)
 8000b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b32:	f107 0210 	add.w	r2, r7, #16
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f861 	bl	8003c04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <HAL_InitTick+0x6a>
 8000b4c:	e001      	b.n	8000b52 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e02b      	b.n	8000baa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f003 f82b 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8000b56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f003 f827 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <HAL_InitTick+0xcc>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_InitTick+0xd4>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b84:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b94:	f004 fb78 	bl	8005288 <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000ba0:	f004 fbca 	bl	8005338 <HAL_TIM_Base_Start_IT>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	e000      	b.n	8000baa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3740      	adds	r7, #64	; 0x40
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000008 	.word	0x24000008
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	24004cd0 	.word	0x24004cd0
 8000bc4:	40001400 	.word	0x40001400

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM1_UP_IRQHandler+0x10>)
 8000c02:	f004 fc87 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24004db4 	.word	0x24004db4

08000c10 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000c16:	f004 fc7d 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24004db4 	.word	0x24004db4

08000c24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM1_CC_IRQHandler+0x10>)
 8000c2a:	f004 fc73 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24004db4 	.word	0x24004db4

08000c38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM2_IRQHandler+0x10>)
 8000c3e:	f004 fc69 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	24004e00 	.word	0x24004e00

08000c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM3_IRQHandler+0x10>)
 8000c52:	f004 fc5f 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24004d1c 	.word	0x24004d1c

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f006 f91b 	bl	8006ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24004e4c 	.word	0x24004e4c

08000c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM6_DAC_IRQHandler+0x10>)
 8000c7a:	f004 fc4b 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24004d68 	.word	0x24004d68

08000c88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM7_IRQHandler+0x10>)
 8000c8e:	f004 fc41 	bl	8005514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24004cd0 	.word	0x24004cd0

08000c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
	}

return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fdaf 	bl	8001854 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
	}
	return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f00a fa48 	bl	800b23c <__errno>
 8000dac:	4602      	mov	r2, r0
 8000dae:	230c      	movs	r3, #12
 8000db0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24080000 	.word	0x24080000
 8000dd8:	00001400 	.word	0x00001400
 8000ddc:	24000200 	.word	0x24000200
 8000de0:	24004f20 	.word	0x24004f20

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <SystemInit+0xec>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a38      	ldr	r2, [pc, #224]	; (8000ed0 <SystemInit+0xec>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <SystemInit+0xf0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	d807      	bhi.n	8000e14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <SystemInit+0xf0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 030f 	bic.w	r3, r3, #15
 8000e0c:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <SystemInit+0xf0>)
 8000e0e:	f043 0307 	orr.w	r3, r3, #7
 8000e12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <SystemInit+0xf4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <SystemInit+0xf4>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <SystemInit+0xf4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <SystemInit+0xf4>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	492b      	ldr	r1, [pc, #172]	; (8000ed8 <SystemInit+0xf4>)
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <SystemInit+0xf8>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <SystemInit+0xf0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	d907      	bls.n	8000e4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <SystemInit+0xf0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 030f 	bic.w	r3, r3, #15
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <SystemInit+0xf0>)
 8000e48:	f043 0307 	orr.w	r3, r3, #7
 8000e4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <SystemInit+0xf4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <SystemInit+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <SystemInit+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <SystemInit+0xf4>)
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <SystemInit+0xfc>)
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <SystemInit+0xf4>)
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <SystemInit+0x100>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <SystemInit+0xf4>)
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <SystemInit+0x104>)
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <SystemInit+0xf4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <SystemInit+0xf4>)
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <SystemInit+0x104>)
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <SystemInit+0xf4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <SystemInit+0xf4>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <SystemInit+0x104>)
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <SystemInit+0xf4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <SystemInit+0xf4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <SystemInit+0xf4>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <SystemInit+0xf4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SystemInit+0x108>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <SystemInit+0x10c>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eae:	d202      	bcs.n	8000eb6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <SystemInit+0x110>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0x114>)
 8000eb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ebc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SystemInit+0xec>)
 8000ec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	52002000 	.word	0x52002000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ee0:	02020200 	.word	0x02020200
 8000ee4:	01ff0000 	.word	0x01ff0000
 8000ee8:	01010280 	.word	0x01010280
 8000eec:	5c001000 	.word	0x5c001000
 8000ef0:	ffff0000 	.word	0xffff0000
 8000ef4:	51008108 	.word	0x51008108
 8000ef8:	52004000 	.word	0x52004000

08000efc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09a      	sub	sp, #104	; 0x68
 8000f00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	222c      	movs	r2, #44	; 0x2c
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00a f9ee 	bl	800b318 <memset>

  htim1.Instance = TIM1;
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f3e:	4a45      	ldr	r2, [pc, #276]	; (8001054 <MX_TIM1_Init+0x158>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f44:	229f      	movs	r2, #159	; 0x9f
 8000f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b41      	ldr	r3, [pc, #260]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f68:	4839      	ldr	r0, [pc, #228]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f6a:	f004 f98d 	bl	8005288 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f7ff fd96 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f82:	4619      	mov	r1, r3
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f86:	f004 fd89 	bl	8005a9c <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f90:	f7ff fd88 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <MX_TIM1_Init+0x154>)
 8000f96:	f004 fa05 	bl	80053a4 <HAL_TIM_PWM_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fa0:	f7ff fd80 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_TIM1_Init+0x154>)
 8000fba:	f005 fc8f 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000fc4:	f7ff fd6e 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc8:	2360      	movs	r3, #96	; 0x60
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500-1;
 8000fcc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fea:	2208      	movs	r2, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_TIM1_Init+0x154>)
 8000ff0:	f004 fc44 	bl	800587c <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000ffa:	f7ff fd53 	bl	8000aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM1_Init+0x154>)
 8001034:	f005 fcda 	bl	80069ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800103e:	f7ff fd31 	bl	8000aa4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM1_Init+0x154>)
 8001044:	f000 fa06 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8001048:	bf00      	nop
 800104a:	3768      	adds	r7, #104	; 0x68
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	24004db4 	.word	0x24004db4
 8001054:	40010000 	.word	0x40010000

08001058 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800105e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <MX_TIM2_Init+0x134>)
 800109c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <MX_TIM2_Init+0x134>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_TIM2_Init+0x134>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <MX_TIM2_Init+0x134>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_TIM2_Init+0x134>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <MX_TIM2_Init+0x134>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c0:	4832      	ldr	r0, [pc, #200]	; (800118c <MX_TIM2_Init+0x134>)
 80010c2:	f004 f8e1 	bl	8005288 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010cc:	f7ff fcea 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010d0:	482e      	ldr	r0, [pc, #184]	; (800118c <MX_TIM2_Init+0x134>)
 80010d2:	f004 f9c8 	bl	8005466 <HAL_TIM_IC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80010dc:	f7ff fce2 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <MX_TIM2_Init+0x134>)
 80010e2:	f004 f95f 	bl	80053a4 <HAL_TIM_PWM_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010ec:	f7ff fcda 	bl	8000aa4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80010f0:	2306      	movs	r3, #6
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80010f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010fc:	4619      	mov	r1, r3
 80010fe:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_TIM2_Init+0x134>)
 8001100:	f004 fd9c 	bl	8005c3c <HAL_TIM_SlaveConfigSynchro>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800110a:	f7ff fccb 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111a:	4619      	mov	r1, r3
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_TIM2_Init+0x134>)
 800111e:	f005 fbdd 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001128:	f7ff fcbc 	bl	8000aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8001130:	2303      	movs	r3, #3
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_TIM2_Init+0x134>)
 8001146:	f004 fb04 	bl	8005752 <HAL_TIM_IC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001150:	f7ff fca8 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001154:	2360      	movs	r3, #96	; 0x60
 8001156:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001158:	f240 13f3 	movw	r3, #499	; 0x1f3
 800115c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2204      	movs	r2, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM2_Init+0x134>)
 800116e:	f004 fb85 	bl	800587c <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 8001178:	f7ff fc94 	bl	8000aa4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM2_Init+0x134>)
 800117e:	f000 f969 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	; 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24004e00 	.word	0x24004e00

08001190 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011b0:	4a29      	ldr	r2, [pc, #164]	; (8001258 <MX_TIM3_Init+0xc8>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011d4:	481f      	ldr	r0, [pc, #124]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011d6:	f004 f946 	bl	8005466 <HAL_TIM_IC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011e0:	f7ff fc60 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011f4:	f005 fb72 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011fe:	f7ff fc51 	bl	8000aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001206:	2301      	movs	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 800120e:	230a      	movs	r3, #10
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <MX_TIM3_Init+0xc4>)
 800121a:	f004 fa9a 	bl	8005752 <HAL_TIM_IC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001224:	f7ff fc3e 	bl	8000aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001228:	2302      	movs	r3, #2
 800122a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800122c:	2302      	movs	r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2204      	movs	r2, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM3_Init+0xc4>)
 800123c:	f004 fa89 	bl	8005752 <HAL_TIM_IC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001246:	f7ff fc2d 	bl	8000aa4 <Error_Handler>
  }

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24004d1c 	.word	0x24004d1c
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_TIM6_Init+0x64>)
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <MX_TIM6_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_TIM6_Init+0x64>)
 8001274:	229f      	movs	r2, #159	; 0x9f
 8001276:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_TIM6_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_TIM6_Init+0x64>)
 8001280:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001284:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_TIM6_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM6_Init+0x64>)
 800128e:	f003 fffb 	bl	8005288 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001298:	f7ff fc04 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM6_Init+0x64>)
 80012aa:	f005 fb17 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012b4:	f7ff fbf6 	bl	8000aa4 <Error_Handler>
  }

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24004d68 	.word	0x24004d68
 80012c4:	40001000 	.word	0x40001000

080012c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <HAL_TIM_Base_MspInit+0xdc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_TIM_Base_MspInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 80012dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e0:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2106      	movs	r1, #6
 80012fc:	2019      	movs	r0, #25
 80012fe:	f000 ff79 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001302:	2019      	movs	r0, #25
 8001304:	f000 ff90 	bl	8002228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 6, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2106      	movs	r1, #6
 800130c:	201a      	movs	r0, #26
 800130e:	f000 ff71 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001312:	201a      	movs	r0, #26
 8001314:	f000 ff88 	bl	8002228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 6, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2106      	movs	r1, #6
 800131c:	201b      	movs	r0, #27
 800131e:	f000 ff69 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001322:	201b      	movs	r0, #27
 8001324:	f000 ff80 	bl	8002228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001328:	e038      	b.n	800139c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001332:	d117      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800133a:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2106      	movs	r1, #6
 8001356:	201c      	movs	r0, #28
 8001358:	f000 ff4c 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800135c:	201c      	movs	r0, #28
 800135e:	f000 ff63 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 8001362:	e01b      	b.n	800139c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_TIM_Base_MspInit+0xe4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d116      	bne.n	800139c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2106      	movs	r1, #6
 8001390:	2036      	movs	r0, #54	; 0x36
 8001392:	f000 ff2f 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001396:	2036      	movs	r0, #54	; 0x36
 8001398:	f000 ff46 	bl	8002228 <HAL_NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010000 	.word	0x40010000
 80013a8:	58024400 	.word	0x58024400
 80013ac:	40001000 	.word	0x40001000

080013b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_TIM_IC_MspInit+0x98>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d135      	bne.n	800143e <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 80013d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 80013e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_TIM_IC_MspInit+0x9c>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <HAL_TIM_IC_MspInit+0xa0>)
 800142a:	f001 fa39 	bl	80028a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2106      	movs	r1, #6
 8001432:	201d      	movs	r0, #29
 8001434:	f000 fede 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001438:	201d      	movs	r0, #29
 800143a:	f000 fef5 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40000400 	.word	0x40000400
 800144c:	58024400 	.word	0x58024400
 8001450:	58020000 	.word	0x58020000

08001454 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_TIM_MspPostInit+0xb4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d120      	bne.n	80014b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4817      	ldr	r0, [pc, #92]	; (8001510 <HAL_TIM_MspPostInit+0xbc>)
 80014b2:	f001 f9f5 	bl	80028a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014b6:	e023      	b.n	8001500 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d11e      	bne.n	8001500 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_TIM_MspPostInit+0xb8>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014e0:	2302      	movs	r3, #2
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f0:	2301      	movs	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <HAL_TIM_MspPostInit+0xc0>)
 80014fc:	f001 f9d0 	bl	80028a0 <HAL_GPIO_Init>
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010000 	.word	0x40010000
 800150c:	58024400 	.word	0x58024400
 8001510:	58021000 	.word	0x58021000
 8001514:	58020000 	.word	0x58020000

08001518 <HAL_TIM_PWM_PulseFinishedCallback>:
* \param
* \return
* \note
***************************************************************************************************/
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8001526:	4293      	cmp	r3, r2
		 if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
		 {
//			 printf("PWM1\r\n");
		 }
	  }
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40010000 	.word	0x40010000

08001538 <HAL_TIM_IC_CaptureCallback>:
* \param
* \return
* \note
***************************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
		 {
//			 printf("PWM2\r\n");
		 }
	}

	if (htim->Instance == TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a48      	ldr	r2, [pc, #288]	; (8001670 <HAL_TIM_IC_CaptureCallback+0x138>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 808a 	bne.w	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7f1b      	ldrb	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d149      	bne.n	80015f0 <HAL_TIM_IC_CaptureCallback+0xb8>
		{
			//Rising Edge
			if(cap_first == 0)
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_TIM_IC_CaptureCallback+0x42>
			{
				cap_1 = htim->Instance->CCR1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001570:	801a      	strh	r2, [r3, #0]
				cap_first = 1;
 8001572:	4b40      	ldr	r3, [pc, #256]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001574:	2201      	movs	r2, #1
 8001576:	801a      	strh	r2, [r3, #0]

			cap_duty = (uint32_t)( cap_1_2 * 100 / cap_1_3);
			}
		}
	}
}
 8001578:	e076      	b.n	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
			else if(cap_first == 1)
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d171      	bne.n	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
				cap_3 = htim->Instance->CCR1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_TIM_IC_CaptureCallback+0x144>)
 800158e:	801a      	strh	r2, [r3, #0]
				if(cap_3 > cap_1)
 8001590:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	429a      	cmp	r2, r3
 800159e:	d90b      	bls.n	80015b8 <HAL_TIM_IC_CaptureCallback+0x80>
					cap_1_3 = cap_3 - cap_1;
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_TIM_IC_CaptureCallback+0x144>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x148>)
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e00d      	b.n	80015d4 <HAL_TIM_IC_CaptureCallback+0x9c>
					cap_1_3 = (0xFFFF - cap_1) + cap_3;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	4a2d      	ldr	r2, [pc, #180]	; (800167c <HAL_TIM_IC_CaptureCallback+0x144>)
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	b292      	uxth	r2, r2
 80015cc:	4413      	add	r3, r2
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x148>)
 80015d2:	601a      	str	r2, [r3, #0]
				cap_freq = (uint32_t)(HAL_RCC_GetPCLK1Freq() * 2) / cap_1_3;
 80015d4:	f002 faea 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80015d8:	4603      	mov	r3, r0
 80015da:	005a      	lsls	r2, r3, #1
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x148>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80015e6:	6013      	str	r3, [r2, #0]
				cap_first = 0;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	801a      	strh	r2, [r3, #0]
}
 80015ee:	e03b      	b.n	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7f1b      	ldrb	r3, [r3, #28]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d137      	bne.n	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
			if(cap_first == 1)
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d132      	bne.n	8001668 <HAL_TIM_IC_CaptureCallback+0x130>
				cap_2 = htim->Instance->CCR2;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x150>)
 800160c:	801a      	strh	r2, [r3, #0]
				if(cap_2 > cap_1)
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	429a      	cmp	r2, r3
 800161c:	d90b      	bls.n	8001636 <HAL_TIM_IC_CaptureCallback+0xfe>
					cap_1_2 = cap_2 - cap_1;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e00d      	b.n	8001652 <HAL_TIM_IC_CaptureCallback+0x11a>
					cap_1_2 = (0xFFFF - cap_1) + cap_2;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001646:	8812      	ldrh	r2, [r2, #0]
 8001648:	b292      	uxth	r2, r2
 800164a:	4413      	add	r3, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001650:	601a      	str	r2, [r3, #0]
			cap_duty = (uint32_t)( cap_1_2 * 100 / cap_1_3);
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x148>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000400 	.word	0x40000400
 8001674:	24000204 	.word	0x24000204
 8001678:	24000218 	.word	0x24000218
 800167c:	2400021c 	.word	0x2400021c
 8001680:	24000214 	.word	0x24000214
 8001684:	24000208 	.word	0x24000208
 8001688:	2400021a 	.word	0x2400021a
 800168c:	24000210 	.word	0x24000210
 8001690:	2400020c 	.word	0x2400020c

08001694 <Timer_1ms>:
* \param
* \return
* \note
***************************************************************************************************/
void Timer_1ms(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
//	if(ledTogTimer) ledTogTimer--;
    if( TimSetTimer ) TimSetTimer--;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <Timer_1ms+0x58>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <Timer_1ms+0x1c>
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <Timer_1ms+0x58>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <Timer_1ms+0x58>)
 80016ae:	801a      	strh	r2, [r3, #0]
	if( Rx1TermTimer ){
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <Timer_1ms+0x5c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <Timer_1ms+0x34>
		if( --Rx1TermTimer == 0 ){
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <Timer_1ms+0x5c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <Timer_1ms+0x5c>)
 80016c6:	801a      	strh	r2, [r3, #0]
			/* Send notification to Uart_RecvTask(),
			bringing it out of the Blocked state. */
//	        vTaskNotifyGiveFromISR(xHandle_UartRecv, NULL);
		}
	}
	if( TestTimer ) TestTimer--;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <Timer_1ms+0x60>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <Timer_1ms+0x4c>
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <Timer_1ms+0x60>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <Timer_1ms+0x60>)
 80016de:	801a      	strh	r2, [r3, #0]

}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	24004c94 	.word	0x24004c94
 80016f0:	24004cc4 	.word	0x24004cc4
 80016f4:	24004c54 	.word	0x24004c54

080016f8 <Timer_InitTasks>:
* \param
* \return
* \note
***************************************************************************************************/
void Timer_InitTasks(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af02      	add	r7, sp, #8
	xTimer_Uart = xTimerCreate("UartTimeOut",	/* Just a text name, not used by the RTOS kernel. */
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <Timer_InitTasks+0x24>)
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <Timer_InitTasks+0x28>)
 800170c:	f008 fe28 	bl	800a360 <xTimerCreate>
 8001710:	4602      	mov	r2, r0
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <Timer_InitTasks+0x2c>)
 8001714:	601a      	str	r2, [r3, #0]

	/* Start the timer.  No block time is specified, and
    even if one was it would be ignored because the RTOS
    scheduler has not yet been started. */
	//xTimerStart(xTimer_100ms, 0);
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	08001729 	.word	0x08001729
 8001720:	0800dd38 	.word	0x0800dd38
 8001724:	24004c58 	.word	0x24004c58

08001728 <Timer_TimeOut>:
* \param
* \return
* \note
***************************************************************************************************/
void Timer_TimeOut(TimerHandle_t xTimer)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
	if(xTimer == xTimer_Uart)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <Timer_TimeOut+0x5c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d11e      	bne.n	800177c <Timer_TimeOut+0x54>
	{
		Rx1Cnt = 0;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <Timer_TimeOut+0x60>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
		if(xQueueSendToBackFromISR(xQueue_UartRecv, (void*)Rx1Buf, &xHigherPriorityTaskWoken) != pdPASS)
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <Timer_TimeOut+0x64>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	2300      	movs	r3, #0
 800174e:	4910      	ldr	r1, [pc, #64]	; (8001790 <Timer_TimeOut+0x68>)
 8001750:	f007 fbfc 	bl	8008f4c <xQueueGenericSendFromISR>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d002      	beq.n	8001760 <Timer_TimeOut+0x38>
		{
			Debug("xQueueSendToBackFromISR was not executed successfully.\r\n");
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <Timer_TimeOut+0x6c>)
 800175c:	f000 f84d 	bl	80017fa <Uart_Printf>
		}

		/* Now the buffer is empty we can switch context if necessary. */
	    if( xHigherPriorityTaskWoken )
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <Timer_TimeOut+0x54>
	    {
	        /* Actual macro used here is port specific. */
	    	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <Timer_TimeOut+0x54>
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <Timer_TimeOut+0x70>)
 800176e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	f3bf 8f6f 	isb	sy
	    }
	}

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	24004c58 	.word	0x24004c58
 8001788:	24004c98 	.word	0x24004c98
 800178c:	24004c60 	.word	0x24004c60
 8001790:	24004cb0 	.word	0x24004cb0
 8001794:	0800dd44 	.word	0x0800dd44
 8001798:	e000ed04 	.word	0xe000ed04

0800179c <Uart_SendByte>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_SendByte(char data)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80017a6:	f009 fa59 	bl	800ac5c <vPortEnterCritical>
	while((USART1->ISR & UART_FLAG_TXE) == 0); //Wait for empty transmit buffer?
 80017aa:	bf00      	nop
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <Uart_SendByte+0x30>)
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f9      	beq.n	80017ac <Uart_SendByte+0x10>
	USART1->TDR = data;
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <Uart_SendByte+0x30>)
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	6293      	str	r3, [r2, #40]	; 0x28
	taskEXIT_CRITICAL();
 80017be:	f009 fa7b 	bl	800acb8 <vPortExitCritical>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40011000 	.word	0x40011000

080017d0 <Uart_SendString>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_SendString(char* string)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	//while(*string != '\0')
	while (*string)
 80017d8:	e007      	b.n	80017ea <Uart_SendString+0x1a>
	{
		Uart_SendByte(*string);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffdc 	bl	800179c <Uart_SendByte>
		string++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
	while (*string)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f3      	bne.n	80017da <Uart_SendString+0xa>
	};
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <Uart_Printf>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_Printf(const char *fmt, ...)
{
 80017fa:	b40f      	push	{r0, r1, r2, r3}
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
 8001800:	af00      	add	r7, sp, #0
	va_list ap;
	char string[64];

	va_start(ap, fmt);
 8001802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
	taskENTER_CRITICAL();
 8001808:	f009 fa28 	bl	800ac5c <vPortEnterCritical>
	vsprintf(string, fmt, ap);
 800180c:	463b      	mov	r3, r7
 800180e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001810:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001812:	4618      	mov	r0, r3
 8001814:	f00a fbaa 	bl	800bf6c <vsiprintf>
	taskEXIT_CRITICAL();
 8001818:	f009 fa4e 	bl	800acb8 <vPortExitCritical>
	* HAL_UART_STATE_READY must be set before transmitting new string.
	* HAL_UART_STATE_READY will be set after transmitting the string completely.
	*/
	//HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), (uint32_t)-1);

	for (int k=0; k<strlen(string); k++)
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	e009      	b.n	8001836 <Uart_Printf+0x3c>
	{
		Uart_SendByte(string[k]);
 8001822:	463a      	mov	r2, r7
 8001824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffb6 	bl	800179c <Uart_SendByte>
	for (int k=0; k<strlen(string); k++)
 8001830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001832:	3301      	adds	r3, #1
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4602      	mov	r2, r0
 8001840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001842:	429a      	cmp	r2, r3
 8001844:	d8ed      	bhi.n	8001822 <Uart_Printf+0x28>
	}

	va_end(ap);
}
 8001846:	bf00      	nop
 8001848:	3748      	adds	r7, #72	; 0x48
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001850:	b004      	add	sp, #16
 8001852:	4770      	bx	lr

08001854 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800185c:	1d39      	adds	r1, r7, #4
 800185e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001862:	2201      	movs	r2, #1
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <__io_putchar+0x20>)
 8001866:	f005 f9ad 	bl	8006bc4 <HAL_UART_Transmit>
  return ch;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24004e4c 	.word	0x24004e4c

08001878 <Uart_VarInit>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_VarInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	UartBufInIx = 0;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <Uart_VarInit+0x20>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	UartBufOutIx = 0;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <Uart_VarInit+0x24>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	UartNRead = 0;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <Uart_VarInit+0x28>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	24000320 	.word	0x24000320
 800189c:	24000321 	.word	0x24000321
 80018a0:	24000322 	.word	0x24000322

080018a4 <Uart_Hit>:
* \param
* \return
* \note
***************************************************************************************************/
bool Uart_Hit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
	bool hit;
	hit = (bool)(UartNRead > 0)? TRUE : FALSE;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <Uart_Hit+0x24>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]
	return hit;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	24000322 	.word	0x24000322

080018cc <Uart_BufIn>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_BufIn(uint8_t data)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	if(UartNRead < UART_BUF_SIZE){
		UartNRead++;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <Uart_BufIn+0x3c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <Uart_BufIn+0x3c>)
 80018e0:	701a      	strb	r2, [r3, #0]
		UartBuf[UartBufInIx] = data;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <Uart_BufIn+0x40>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <Uart_BufIn+0x44>)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	5453      	strb	r3, [r2, r1]
		UartBufInIx++;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <Uart_BufIn+0x40>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <Uart_BufIn+0x40>)
 80018f8:	701a      	strb	r2, [r3, #0]
		if(UartBufInIx >= UART_BUF_SIZE){
			UartBufInIx = 0;
		}
	}
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	24000322 	.word	0x24000322
 800190c:	24000320 	.word	0x24000320
 8001910:	24000220 	.word	0x24000220

08001914 <Uart_BufOut>:
* \param
* \return
* \note
***************************************************************************************************/
uint8_t Uart_BufOut(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
	uint8_t data;
	if(UartNRead > 0){
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <Uart_BufOut+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d013      	beq.n	800194a <Uart_BufOut+0x36>
		UartNRead--;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <Uart_BufOut+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3b01      	subs	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <Uart_BufOut+0x44>)
 800192c:	701a      	strb	r2, [r3, #0]
		data = UartBuf[UartBufOutIx];
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <Uart_BufOut+0x48>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <Uart_BufOut+0x4c>)
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	71fb      	strb	r3, [r7, #7]
		UartBufOutIx++;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <Uart_BufOut+0x48>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <Uart_BufOut+0x48>)
 8001944:	701a      	strb	r2, [r3, #0]
		if(UartBufOutIx >= UART_BUF_SIZE){
			UartBufOutIx = 0;
		}
		return data;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	e000      	b.n	800194c <Uart_BufOut+0x38>
	}
	else{
		return 0xFF;
 800194a:	23ff      	movs	r3, #255	; 0xff
	}
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	24000322 	.word	0x24000322
 800195c:	24000321 	.word	0x24000321
 8001960:	24000220 	.word	0x24000220

08001964 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <MX_USART1_UART_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019ae:	f005 f8b9 	bl	8006b24 <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019b8:	f7ff f874 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019c0:	f006 fd79 	bl	80084b6 <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f7ff f86b 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019d2:	f006 fdae 	bl	8008532 <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f7ff f862 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_USART1_UART_Init+0x90>)
 80019e2:	f006 fd2f 	bl	8008444 <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7ff f85a 	bl	8000aa4 <Error_Handler>
  }

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24004e4c 	.word	0x24004e4c
 80019f8:	40011000 	.word	0x40011000

080019fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_UART_MspInit+0x98>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d136      	bne.n	8001a8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a24:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_UART_MspInit+0x9c>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <HAL_UART_MspInit+0xa0>)
 8001a78:	f000 ff12 	bl	80028a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2106      	movs	r1, #6
 8001a80:	2025      	movs	r0, #37	; 0x25
 8001a82:	f000 fbb7 	bl	80021f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a86:	2025      	movs	r0, #37	; 0x25
 8001a88:	f000 fbce 	bl	8002228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020000 	.word	0x58020000

08001aa0 <HAL_UART_RxCpltCallback>:
* \param
* \return
* \note
***************************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_UART_RxCpltCallback+0x20>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_UART_RxCpltCallback+0x16>
	{
		Uart1_Irq();
 8001ab2:	f000 f807 	bl	8001ac4 <Uart1_Irq>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40011000 	.word	0x40011000

08001ac4 <Uart1_Irq>:
* \param
* \return
* \note		?��?��?��?�� callback ?��?�� ?���??��?��?�� task_EXIT_CRITICAL_FROM_ISR ?��?��?��?��?��
***************************************************************************************************/
void Uart1_Irq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
	uint8_t rx1Data;
	/* 방법0: ?��?�� 버퍼 비슷?���? 만들?��?�� �??��?��?���? 버퍼?�� ???�� */
	rx1Data = USART1->RDR;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <Uart1_Irq+0x40>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	70fb      	strb	r3, [r7, #3]
	Uart_BufIn(rx1Data);
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fef8 	bl	80018cc <Uart_BufIn>
//	vTaskNotifyGiveFromISR(xHandle_UartRecv, &xHigherPriorityTaskWoken);
	//	Rx1Buf[Rx1Cnt++]=USART1->RDR;
	//	if(Rx1Cnt >= RX1_MAX)	Rx1Cnt = 0;
	//	Rx1TermTimer = 10;

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <Uart1_Irq+0x2e>
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <Uart1_Irq+0x44>)
 8001ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	f3bf 8f6f 	isb	sy

	/* uart Interrupt Ready Again */
	HAL_UART_Receive_IT(&huart1,(uint8_t *)&Rx1Data,1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	4905      	ldr	r1, [pc, #20]	; (8001b0c <Uart1_Irq+0x48>)
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <Uart1_Irq+0x4c>)
 8001af8:	f005 f8fa 	bl	8006cf0 <HAL_UART_Receive_IT>

//	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);

//	/* uart Interrupt Ready Again */
//	HAL_UART_Receive_IT(&huart1,(uint8_t *)&Rx1Data,1);
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40011000 	.word	0x40011000
 8001b08:	e000ed04 	.word	0xe000ed04
 8001b0c:	24004c8c 	.word	0x24004c8c
 8001b10:	24004e4c 	.word	0x24004e4c

08001b14 <Uart_Parse>:
* \return
* \note		?��?��?�� ?��버는 기본?��?���? byte ?��?��?��?��.  byte ?��?��?�� ?��?��?�� ???��?�� �?�? ?��?��?���? ?��?��?��
*			경우 data alignment?�� 주의?��?��.
***************************************************************************************************/
UART_CMD *Uart_Parse(INT8U data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	static INT16U	data_len;
	INT8U			checksum;

	switch(UartState)
 8001b1e:	4bab      	ldr	r3, [pc, #684]	; (8001dcc <Uart_Parse+0x2b8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	f200 814f 	bhi.w	8001dc6 <Uart_Parse+0x2b2>
 8001b28:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <Uart_Parse+0x1c>)
 8001b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2e:	bf00      	nop
 8001b30:	08001b45 	.word	0x08001b45
 8001b34:	08001bfb 	.word	0x08001bfb
 8001b38:	08001cd1 	.word	0x08001cd1
 8001b3c:	08001d23 	.word	0x08001d23
 8001b40:	08001dbf 	.word	0x08001dbf
	{
		case UART_STATE_IDLE:
			switch(data)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	3b02      	subs	r3, #2
 8001b48:	2b0b      	cmp	r3, #11
 8001b4a:	d82a      	bhi.n	8001ba2 <Uart_Parse+0x8e>
 8001b4c:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <Uart_Parse+0x40>)
 8001b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b52:	bf00      	nop
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001ba3 	.word	0x08001ba3
 8001b5c:	08001ba3 	.word	0x08001ba3
 8001b60:	08001ba3 	.word	0x08001ba3
 8001b64:	08001ba3 	.word	0x08001ba3
 8001b68:	08001ba3 	.word	0x08001ba3
 8001b6c:	08001b8d 	.word	0x08001b8d
 8001b70:	08001ba3 	.word	0x08001ba3
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001ba3 	.word	0x08001ba3
 8001b7c:	08001ba3 	.word	0x08001ba3
 8001b80:	08001b95 	.word	0x08001b95
			{
				case STX:
					//Tmr_StartTimer(TMR_ID_UART, CFG_UART_TIMEOUT, (void(*)(void *))Uart_TimeOut, NULL);
					UartState = UART_STATE_BIN;
 8001b84:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <Uart_Parse+0x2b8>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
					break;
 8001b8a:	e035      	b.n	8001bf8 <Uart_Parse+0xe4>
				case '\b':
				case '\n':
					UartState = UART_STATE_IDLE;
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <Uart_Parse+0x2b8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
					break;
 8001b92:	e031      	b.n	8001bf8 <Uart_Parse+0xe4>
				case '\r':
					printf("\r\n");
 8001b94:	488e      	ldr	r0, [pc, #568]	; (8001dd0 <Uart_Parse+0x2bc>)
 8001b96:	f00a f9cb 	bl	800bf30 <puts>
					//printf(CFG_PROMPT);
					UartState = UART_STATE_IDLE;
 8001b9a:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <Uart_Parse+0x2b8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
					break;
 8001ba0:	e02a      	b.n	8001bf8 <Uart_Parse+0xe4>

					UartState = UART_STATE_BUSY;
					break;
#endif
				default:
					if(isgraph(data) || isspace(data))	/* ?��?���??�� 문자, 공백?�� 경우�? ascii 명령?���? ?��?�� */
 8001ba2:	f009 fb75 	bl	800b290 <__locale_ctype_ptr>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f003 0317 	and.w	r3, r3, #23
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <Uart_Parse+0xba>
 8001bb8:	f009 fb6a 	bl	800b290 <__locale_ctype_ptr>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d013      	beq.n	8001bf6 <Uart_Parse+0xe2>
					{
						UartRecvCount = 0;
 8001bce:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
						UartRecvBuf[UartRecvCount++] = data;
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b7e      	ldr	r3, [pc, #504]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c59      	adds	r1, r3, #1
 8001bde:	487d      	ldr	r0, [pc, #500]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001be0:	6001      	str	r1, [r0, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	701a      	strb	r2, [r3, #0]
						printf("%c", data);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00a f930 	bl	800be50 <putchar>
						UartState = UART_STATE_ASCII;
 8001bf0:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <Uart_Parse+0x2b8>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001bf6:	bf00      	nop
			}
			break;
 8001bf8:	e0f9      	b.n	8001dee <Uart_Parse+0x2da>
		case UART_STATE_ASCII:
			switch(data)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d004      	beq.n	8001c0a <Uart_Parse+0xf6>
 8001c00:	2b0d      	cmp	r3, #13
 8001c02:	d002      	beq.n	8001c0a <Uart_Parse+0xf6>
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d018      	beq.n	8001c3a <Uart_Parse+0x126>
 8001c08:	e031      	b.n	8001c6e <Uart_Parse+0x15a>
			{
				case '\r':
				case '\n':
					UartRecvBuf[UartRecvCount] = '\0';
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
					printf("\r\n");
 8001c18:	486d      	ldr	r0, [pc, #436]	; (8001dd0 <Uart_Parse+0x2bc>)
 8001c1a:	f00a f989 	bl	800bf30 <puts>
#ifdef CONFIG_LINEEDIT
					historylog((char *)UartRecvBuf);
#endif
					UartCmd.CmdReady		= TRUE;
 8001c1e:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <Uart_Parse+0x2c8>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
					UartCmd.CmdType			= CMD_TYPE_ASC;
 8001c24:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <Uart_Parse+0x2c8>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	705a      	strb	r2, [r3, #1]
					UartCmd.CmdAsc.pStr		= UartRecvBuf;
 8001c2a:	4b6b      	ldr	r3, [pc, #428]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6b      	ldr	r2, [pc, #428]	; (8001ddc <Uart_Parse+0x2c8>)
 8001c30:	6053      	str	r3, [r2, #4]

					UartState = UART_STATE_BUSY;
 8001c32:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <Uart_Parse+0x2b8>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]
					break;
 8001c38:	e049      	b.n	8001cce <Uart_Parse+0x1ba>
//				case '\n':
//					UartState = UART_STATE_IDLE;
//					break;
				case '\b' :
					UartRecvBuf[--UartRecvCount] = 0;
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	4963      	ldr	r1, [pc, #396]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
					printf("\b \b");
 8001c52:	4863      	ldr	r0, [pc, #396]	; (8001de0 <Uart_Parse+0x2cc>)
 8001c54:	f00a f8e4 	bl	800be20 <iprintf>
					UartState = UartRecvCount ? UART_STATE_ASCII : UART_STATE_IDLE;
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <Uart_Parse+0x2b8>)
 8001c6a:	701a      	strb	r2, [r3, #0]
					break;
 8001c6c:	e02f      	b.n	8001cce <Uart_Parse+0x1ba>

					UartState = UART_STATE_BUSY;
					break;
#endif
				default :
					if(isgraph(data) || isspace(data))	/* ?��?���??�� 문자, 공백?�� 경우�? ascii 명령?���? ?��?�� */
 8001c6e:	f009 fb0f 	bl	800b290 <__locale_ctype_ptr>
 8001c72:	4602      	mov	r2, r0
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f003 0317 	and.w	r3, r3, #23
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <Uart_Parse+0x186>
 8001c84:	f009 fb04 	bl	800b290 <__locale_ctype_ptr>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d015      	beq.n	8001cc6 <Uart_Parse+0x1b2>
					{
						UartRecvBuf[UartRecvCount++] = data;
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1c59      	adds	r1, r3, #1
 8001ca4:	484b      	ldr	r0, [pc, #300]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001ca6:	6001      	str	r1, [r0, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	701a      	strb	r2, [r3, #0]
						printf("%c", data);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00a f8cd 	bl	800be50 <putchar>
						if(UartRecvCount >= CFG_UART_BUF_SIZE)	/* 버퍼 ?��?��즈�?? 초과?�� 경우 리셋 */
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8001cbe:	d305      	bcc.n	8001ccc <Uart_Parse+0x1b8>
						{
							Uart_ResetState();
 8001cc0:	f000 f8f6 	bl	8001eb0 <Uart_ResetState>
						if(UartRecvCount >= CFG_UART_BUF_SIZE)	/* 버퍼 ?��?��즈�?? 초과?�� 경우 리셋 */
 8001cc4:	e002      	b.n	8001ccc <Uart_Parse+0x1b8>
						}
					}
					else
					{
						Uart_ResetState();
 8001cc6:	f000 f8f3 	bl	8001eb0 <Uart_ResetState>
					}
					break;
 8001cca:	e7ff      	b.n	8001ccc <Uart_Parse+0x1b8>
 8001ccc:	bf00      	nop
			}
			break;
 8001cce:	e08e      	b.n	8001dee <Uart_Parse+0x2da>
		case UART_STATE_BIN:
			UartRecvBuf[UartRecvCount++] = data;
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	483e      	ldr	r0, [pc, #248]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001cdc:	6001      	str	r1, [r0, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	79fa      	ldrb	r2, [r7, #7]
 8001ce2:	701a      	strb	r2, [r3, #0]
			if(UartRecvCount == 6)
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d106      	bne.n	8001cfa <Uart_Parse+0x1e6>
			{
				data_len = ntohs(*(INT16U *)(UartRecvBuf + 4));
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	881a      	ldrh	r2, [r3, #0]
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <Uart_Parse+0x2d0>)
 8001cf6:	801a      	strh	r2, [r3, #0]
			else if(UartRecvCount >= CFG_UART_BUF_SIZE)
			{
				//Tmr_StopTimer(TMR_ID_UART);
				Uart_ResetState();
			}
			break;
 8001cf8:	e078      	b.n	8001dec <Uart_Parse+0x2d8>
			else if(UartRecvCount == (INT32U)(data_len + 7))
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <Uart_Parse+0x2d0>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	3307      	adds	r3, #7
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d103      	bne.n	8001d12 <Uart_Parse+0x1fe>
				UartState = UART_STATE_BIN_ETX;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <Uart_Parse+0x2b8>)
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	701a      	strb	r2, [r3, #0]
			break;
 8001d10:	e06c      	b.n	8001dec <Uart_Parse+0x2d8>
			else if(UartRecvCount >= CFG_UART_BUF_SIZE)
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8001d1a:	d367      	bcc.n	8001dec <Uart_Parse+0x2d8>
				Uart_ResetState();
 8001d1c:	f000 f8c8 	bl	8001eb0 <Uart_ResetState>
			break;
 8001d20:	e064      	b.n	8001dec <Uart_Parse+0x2d8>
		case UART_STATE_BIN_ETX:
			//Tmr_StopTimer(TMR_ID_UART);
			checksum = UartRecvBuf[UartRecvCount - 1];
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	73fb      	strb	r3, [r7, #15]
			if((data == ETX) && (Uart_MakeCheckSum(UartRecvBuf, UartRecvCount - 1) == checksum))
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d13d      	bne.n	8001db4 <Uart_Parse+0x2a0>
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <Uart_Parse+0x2c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 f8eb 	bl	8001f20 <Uart_MakeCheckSum>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d12f      	bne.n	8001db4 <Uart_Parse+0x2a0>
			{
				UartCmd.CmdReady 			= TRUE;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
				UartCmd.CmdType	 			= CMD_TYPE_BIN;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	705a      	strb	r2, [r3, #1]
				UartCmd.CmdBin.MainCmd		= UartRecvBuf[0];
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d68:	711a      	strb	r2, [r3, #4]
				UartCmd.CmdBin.SubCmd		= UartRecvBuf[1];
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	785a      	ldrb	r2, [r3, #1]
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d72:	715a      	strb	r2, [r3, #5]
				UartCmd.CmdBin.Address		= ntohs(*(INT16U *)(UartRecvBuf + 2));
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d7e:	80da      	strh	r2, [r3, #6]
				UartCmd.CmdBin.Length		= ntohs(*(INT16U *)(UartRecvBuf + 4));
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3304      	adds	r3, #4
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d8a:	811a      	strh	r2, [r3, #8]
				/* ?��?��?�� 버퍼?�� alignment 문제�? ?��?���? ?��?�� 4byte?��?�� align */
				memmove(UartRecvBuf, UartRecvBuf + 6, UartCmd.CmdBin.Length);
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1d99      	adds	r1, r3, #6
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <Uart_Parse+0x2c8>)
 8001d98:	891b      	ldrh	r3, [r3, #8]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f009 faa3 	bl	800b2e6 <memmove>
				UartCmd.CmdBin.pData		= UartRecvBuf;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <Uart_Parse+0x2c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <Uart_Parse+0x2c8>)
 8001da6:	60d3      	str	r3, [r2, #12]

				Uart_ACK();
 8001da8:	f000 f898 	bl	8001edc <Uart_ACK>
				UartState = UART_STATE_BUSY;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <Uart_Parse+0x2b8>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	701a      	strb	r2, [r3, #0]
			else
			{
				Uart_NAK();
				Uart_ResetState();
			}
			break;
 8001db2:	e01c      	b.n	8001dee <Uart_Parse+0x2da>
				Uart_NAK();
 8001db4:	f000 f8a3 	bl	8001efe <Uart_NAK>
				Uart_ResetState();
 8001db8:	f000 f87a 	bl	8001eb0 <Uart_ResetState>
			break;
 8001dbc:	e017      	b.n	8001dee <Uart_Parse+0x2da>
		case UART_STATE_BUSY:
			printf("Error: Processing another command.\r\n");
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <Uart_Parse+0x2d4>)
 8001dc0:	f00a f8b6 	bl	800bf30 <puts>
			break;
 8001dc4:	e013      	b.n	8001dee <Uart_Parse+0x2da>
		default:
			Uart_ResetState();
 8001dc6:	f000 f873 	bl	8001eb0 <Uart_ResetState>
			break;
 8001dca:	e010      	b.n	8001dee <Uart_Parse+0x2da>
 8001dcc:	2400032c 	.word	0x2400032c
 8001dd0:	0800dd80 	.word	0x0800dd80
 8001dd4:	24000324 	.word	0x24000324
 8001dd8:	24000328 	.word	0x24000328
 8001ddc:	24000330 	.word	0x24000330
 8001de0:	0800dd84 	.word	0x0800dd84
 8001de4:	24000340 	.word	0x24000340
 8001de8:	0800dd88 	.word	0x0800dd88
			break;
 8001dec:	bf00      	nop
	}

	return &UartCmd;
 8001dee:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <Uart_Parse+0x2e4>)
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24000330 	.word	0x24000330

08001dfc <Uart_InitModules>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_InitModules(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	xQueue_UartRecv = xQueueCreate(64, sizeof(Rx1Data));
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	2040      	movs	r0, #64	; 0x40
 8001e06:	f006 ff44 	bl	8008c92 <xQueueGenericCreate>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <Uart_InitModules+0x1c>)
 8001e0e:	601a      	str	r2, [r3, #0]
	Uart_VarInit();
 8001e10:	f7ff fd32 	bl	8001878 <Uart_VarInit>
//	xCountingSemaphore_UartRecv = xSemaphoreCreateCounting(1, 0);
//	vSemaphoreCreateBinary(xBinarySemaphore_UartRecv);
//	xMutex = xSemaphoreCreateMutex();
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	24004c60 	.word	0x24004c60

08001e1c <Uart_InitTasks>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_InitTasks(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af02      	add	r7, sp, #8
	xTaskCreate(Uart_RecvTask,				/* Function that implements the task. */
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <Uart_InitTasks+0x20>)
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	2324      	movs	r3, #36	; 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	4904      	ldr	r1, [pc, #16]	; (8001e40 <Uart_InitTasks+0x24>)
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <Uart_InitTasks+0x28>)
 8001e32:	f007 fbc1 	bl	80095b8 <xTaskCreate>
			    "Receive",					/* Text name for the task. */
				configMINIMAL_STACK_SIZE,	/* Stack size in words, not bytes. */
				NULL,						/* Parameter passed into the task. */
				osPriorityAboveNormal4,		/* Priority at which the task is created. */
				&xHandle_UartRecv);			/* Used to pass out the created task's handle. */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24004cc0 	.word	0x24004cc0
 8001e40:	0800ddac 	.word	0x0800ddac
 8001e44:	08001e49 	.word	0x08001e49

08001e48 <Uart_RecvTask>:
* \param
* \return
* \note
***************************************************************************************************/
void Uart_RecvTask(void *pvParameters)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	UART_CMD		*pcmd;

	for (;;)
	{
//		ulTaskNotifyTake(pdFALSE, portMAX_DELAY);	//Flag ???�� ?��?��(OS Control available)
		while( !Uart_Hit() ){
 8001e50:	e002      	b.n	8001e58 <Uart_RecvTask+0x10>
			vTaskDelay(10);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f007 fcf4 	bl	8009840 <vTaskDelay>
		while( !Uart_Hit() ){
 8001e58:	f7ff fd24 	bl	80018a4 <Uart_Hit>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f4      	bne.n	8001e52 <Uart_RecvTask+0xa>
		}
		taskENTER_CRITICAL();
 8001e68:	f008 fef8 	bl	800ac5c <vPortEnterCritical>
//		if( Uart_Hit() ){
			rx1Data = Uart_BufOut();
 8001e6c:	f7ff fd52 	bl	8001914 <Uart_BufOut>
 8001e70:	4603      	mov	r3, r0
 8001e72:	73fb      	strb	r3, [r7, #15]
//		}
		taskEXIT_CRITICAL();
 8001e74:	f008 ff20 	bl	800acb8 <vPortExitCritical>
//            Debug("Could not send to the queue.\r\n");
//        }
//
//		vTaskDelayUntil(&xLastWakeTime, (10 / portTICK_RATE_MS));

		pcmd = Uart_Parse(rx1Data);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fe4a 	bl	8001b14 <Uart_Parse>
 8001e80:	60b8      	str	r0, [r7, #8]
		if(pcmd->CmdReady)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0e6      	beq.n	8001e58 <Uart_RecvTask+0x10>
		{
			switch(pcmd->CmdType)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d005      	beq.n	8001e9e <Uart_RecvTask+0x56>
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d005      	beq.n	8001ea2 <Uart_RecvTask+0x5a>
				case CMD_TYPE_ASC:
					//AscCmd_Parse(&(pcmd->CmdAsc));
					//printf(CFG_PROMPT);
					break;
				default:
					Debug("Unknown command type\r\n");
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <Uart_RecvTask+0x64>)
 8001e98:	f7ff fcaf 	bl	80017fa <Uart_Printf>
					break;
 8001e9c:	e002      	b.n	8001ea4 <Uart_RecvTask+0x5c>
					break;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <Uart_RecvTask+0x5c>
					break;
 8001ea2:	bf00      	nop
			}
			Uart_ResetState();
 8001ea4:	f000 f804 	bl	8001eb0 <Uart_ResetState>
		while( !Uart_Hit() ){
 8001ea8:	e7d6      	b.n	8001e58 <Uart_RecvTask+0x10>
 8001eaa:	bf00      	nop
 8001eac:	0800ddb4 	.word	0x0800ddb4

08001eb0 <Uart_ResetState>:
* \brief	명령?�� ?��?��기의 ?��?���? 초기�? ?��?��리는 ?��?��
* \return
* \note		명령?�� 처리�? ?��?�� ?��마다 ?�� ?��?���? ?��출해?�� ?��?��.
***************************************************************************************************/
void Uart_ResetState(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	UartRecvCount 	= 0;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <Uart_ResetState+0x20>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
	UartState		= UART_STATE_IDLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <Uart_ResetState+0x24>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
	memset(&UartCmd, 0, sizeof(UartCmd));
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <Uart_ResetState+0x28>)
 8001ec6:	f009 fa27 	bl	800b318 <memset>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000324 	.word	0x24000324
 8001ed4:	2400032c 	.word	0x2400032c
 8001ed8:	24000330 	.word	0x24000330

08001edc <Uart_ACK>:
* \brief	BIN 명령?�� ???�� ACK�? ?��?��?��?�� ?��?��
* \return
* \note
***************************************************************************************************/
void Uart_ACK(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
	INT8U data[3];

	data[0] = STX;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	713b      	strb	r3, [r7, #4]
	data[1] = ACK;
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	717b      	strb	r3, [r7, #5]
	data[2] = ETX;
 8001eea:	2303      	movs	r3, #3
 8001eec:	71bb      	strb	r3, [r7, #6]

	Uart_SendString( (char*)data);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fc6d 	bl	80017d0 <Uart_SendString>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <Uart_NAK>:
* \brief	BIN 명령?�� ???�� NACK�? ?��?��?��?�� ?��?��
* \return
* \note
***************************************************************************************************/
void Uart_NAK(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
	INT8U data[3];

	data[0] = STX;
 8001f04:	2302      	movs	r3, #2
 8001f06:	713b      	strb	r3, [r7, #4]
	data[1] = NAK;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	717b      	strb	r3, [r7, #5]
	data[2] = ETX;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	71bb      	strb	r3, [r7, #6]

	Uart_SendString( (char*)data);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc5c 	bl	80017d0 <Uart_SendString>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <Uart_MakeCheckSum>:
* \param	length	?��?��?�� 길이
* \return
* \note
***************************************************************************************************/
INT8U Uart_MakeCheckSum(INT8U *pdata, INT32U length)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	INT8U 	checksum;
	INT32U 	i;

	checksum = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < length; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	e009      	b.n	8001f48 <Uart_MakeCheckSum+0x28>
	{
		checksum += pdata[i];
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	4413      	add	r3, r2
 8001f40:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < length; i++)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3f1      	bcc.n	8001f34 <Uart_MakeCheckSum+0x14>
	}

	return checksum;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f64:	f7fe ff3e 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f6a:	e003      	b.n	8001f74 <LoopCopyDataInit>

08001f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f72:	3104      	adds	r1, #4

08001f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f74:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f7c:	d3f6      	bcc.n	8001f6c <CopyDataInit>
  ldr  r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001f80:	e002      	b.n	8001f88 <LoopFillZerobss>

08001f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f84:	f842 3b04 	str.w	r3, [r2], #4

08001f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f8c:	d3f9      	bcc.n	8001f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f009 f95b 	bl	800b248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f92:	f7fe fc3f 	bl	8000814 <main>
  bx  lr    
 8001f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f9c:	0800e114 	.word	0x0800e114
  ldr  r0, =_sdata
 8001fa0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001fa4:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8001fa8:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8001fac:	24004f20 	.word	0x24004f20

08001fb0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC3_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f000 f90f 	bl	80021de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc0:	f001 fc52 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_Init+0x68>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <HAL_Init+0x6c>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa21 f303 	lsr.w	r3, r1, r3
 8001fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_Init+0x68>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_Init+0x6c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_Init+0x70>)
 8001ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_Init+0x74>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7fe fd76 	bl	8000af0 <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e002      	b.n	8002014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800200e:	f7fe fd51 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	58024400 	.word	0x58024400
 8002020:	0800de18 	.word	0x0800de18
 8002024:	24000004 	.word	0x24000004
 8002028:	24000000 	.word	0x24000000

0800202c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2400000c 	.word	0x2400000c
 8002050:	24004ed8 	.word	0x24004ed8

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	24004ed8 	.word	0x24004ed8

0800206c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_GetREVID+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0c1b      	lsrs	r3, r3, #16
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	5c001000 	.word	0x5c001000

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00
 80020c8:	05fa0000 	.word	0x05fa0000

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <__NVIC_EnableIRQ+0x38>)
 8002102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	; (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff4c 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002202:	f7ff ff63 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002206:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6978      	ldr	r0, [r7, #20]
 800220e:	f7ff ffb3 	bl	8002178 <NVIC_EncodePriority>
 8002212:	4602      	mov	r2, r0
 8002214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff82 	bl	8002124 <__NVIC_SetPriority>
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff56 	bl	80020e8 <__NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e054      	b.n	8002300 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f5b      	ldrb	r3, [r3, #29]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fa34 	bl	80006d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a22      	ldr	r2, [pc, #136]	; (8002308 <HAL_CRC_Init+0xc4>)
 8002280:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0218 	bic.w	r2, r2, #24
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	e00c      	b.n	80022ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	461a      	mov	r2, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f834 	bl	800230c <HAL_CRCEx_Polynomial_Set>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e028      	b.n	8002300 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	795b      	ldrb	r3, [r3, #5]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f04f 32ff 	mov.w	r2, #4294967295
 80022be:	611a      	str	r2, [r3, #16]
 80022c0:	e004      	b.n	80022cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6912      	ldr	r2, [r2, #16]
 80022ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	04c11db7 	.word	0x04c11db7

0800230c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800231c:	231f      	movs	r3, #31
 800231e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002320:	bf00      	nop
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1e5a      	subs	r2, r3, #1
 8002326:	613a      	str	r2, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_CRCEx_Polynomial_Set+0x34>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b18      	cmp	r3, #24
 8002344:	d846      	bhi.n	80023d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	080023db 	.word	0x080023db
 8002350:	080023d5 	.word	0x080023d5
 8002354:	080023d5 	.word	0x080023d5
 8002358:	080023d5 	.word	0x080023d5
 800235c:	080023d5 	.word	0x080023d5
 8002360:	080023d5 	.word	0x080023d5
 8002364:	080023d5 	.word	0x080023d5
 8002368:	080023d5 	.word	0x080023d5
 800236c:	080023c9 	.word	0x080023c9
 8002370:	080023d5 	.word	0x080023d5
 8002374:	080023d5 	.word	0x080023d5
 8002378:	080023d5 	.word	0x080023d5
 800237c:	080023d5 	.word	0x080023d5
 8002380:	080023d5 	.word	0x080023d5
 8002384:	080023d5 	.word	0x080023d5
 8002388:	080023d5 	.word	0x080023d5
 800238c:	080023bd 	.word	0x080023bd
 8002390:	080023d5 	.word	0x080023d5
 8002394:	080023d5 	.word	0x080023d5
 8002398:	080023d5 	.word	0x080023d5
 800239c:	080023d5 	.word	0x080023d5
 80023a0:	080023d5 	.word	0x080023d5
 80023a4:	080023d5 	.word	0x080023d5
 80023a8:	080023d5 	.word	0x080023d5
 80023ac:	080023b1 	.word	0x080023b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d913      	bls.n	80023de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023ba:	e010      	b.n	80023de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d90f      	bls.n	80023e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	d90b      	bls.n	80023e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023d2:	e008      	b.n	80023e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	75fb      	strb	r3, [r7, #23]
      break;
 80023d8:	e006      	b.n	80023e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023da:	bf00      	nop
 80023dc:	e004      	b.n	80023e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023de:	bf00      	nop
 80023e0:	e002      	b.n	80023e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 0118 	bic.w	r1, r3, #24
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800240a:	7dfb      	ldrb	r3, [r7, #23]
}
 800240c:	4618      	mov	r0, r3
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e205      	b.n	8002836 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d004      	beq.n	8002440 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e1fa      	b.n	8002836 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a8c      	ldr	r2, [pc, #560]	; (8002678 <HAL_DMA_Abort_IT+0x260>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a8b      	ldr	r2, [pc, #556]	; (800267c <HAL_DMA_Abort_IT+0x264>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a89      	ldr	r2, [pc, #548]	; (8002680 <HAL_DMA_Abort_IT+0x268>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a88      	ldr	r2, [pc, #544]	; (8002684 <HAL_DMA_Abort_IT+0x26c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a86      	ldr	r2, [pc, #536]	; (8002688 <HAL_DMA_Abort_IT+0x270>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a85      	ldr	r2, [pc, #532]	; (800268c <HAL_DMA_Abort_IT+0x274>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a83      	ldr	r2, [pc, #524]	; (8002690 <HAL_DMA_Abort_IT+0x278>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a82      	ldr	r2, [pc, #520]	; (8002694 <HAL_DMA_Abort_IT+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a80      	ldr	r2, [pc, #512]	; (8002698 <HAL_DMA_Abort_IT+0x280>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7f      	ldr	r2, [pc, #508]	; (800269c <HAL_DMA_Abort_IT+0x284>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7d      	ldr	r2, [pc, #500]	; (80026a0 <HAL_DMA_Abort_IT+0x288>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <HAL_DMA_Abort_IT+0x28c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_DMA_Abort_IT+0x290>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a79      	ldr	r2, [pc, #484]	; (80026ac <HAL_DMA_Abort_IT+0x294>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a77      	ldr	r2, [pc, #476]	; (80026b0 <HAL_DMA_Abort_IT+0x298>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <HAL_DMA_Abort_IT+0x29c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Abort_IT+0xcc>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_Abort_IT+0xce>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d065      	beq.n	80025b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_DMA_Abort_IT+0x260>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04a      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a5e      	ldr	r2, [pc, #376]	; (800267c <HAL_DMA_Abort_IT+0x264>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d045      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_DMA_Abort_IT+0x268>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d040      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5b      	ldr	r2, [pc, #364]	; (8002684 <HAL_DMA_Abort_IT+0x26c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d03b      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5a      	ldr	r2, [pc, #360]	; (8002688 <HAL_DMA_Abort_IT+0x270>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d036      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_DMA_Abort_IT+0x274>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_DMA_Abort_IT+0x278>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d02c      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a55      	ldr	r2, [pc, #340]	; (8002694 <HAL_DMA_Abort_IT+0x27c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_DMA_Abort_IT+0x280>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_DMA_Abort_IT+0x284>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_DMA_Abort_IT+0x288>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d018      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <HAL_DMA_Abort_IT+0x28c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_DMA_Abort_IT+0x290>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a4c      	ldr	r2, [pc, #304]	; (80026ac <HAL_DMA_Abort_IT+0x294>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_DMA_Abort_IT+0x298>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort_IT+0x17a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <HAL_DMA_Abort_IT+0x29c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <HAL_DMA_Abort_IT+0x18c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e147      	b.n	8002834 <HAL_DMA_Abort_IT+0x41c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e13e      	b.n	8002834 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 020e 	bic.w	r2, r2, #14
 80025c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <HAL_DMA_Abort_IT+0x260>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <HAL_DMA_Abort_IT+0x264>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_DMA_Abort_IT+0x268>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_DMA_Abort_IT+0x26c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <HAL_DMA_Abort_IT+0x270>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_DMA_Abort_IT+0x274>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_DMA_Abort_IT+0x278>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_DMA_Abort_IT+0x27c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_DMA_Abort_IT+0x280>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_DMA_Abort_IT+0x284>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_DMA_Abort_IT+0x288>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <HAL_DMA_Abort_IT+0x28c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_DMA_Abort_IT+0x290>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_DMA_Abort_IT+0x294>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_DMA_Abort_IT+0x298>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x24e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <HAL_DMA_Abort_IT+0x29c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d128      	bne.n	80026b8 <HAL_DMA_Abort_IT+0x2a0>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e027      	b.n	80026c8 <HAL_DMA_Abort_IT+0x2b0>
 8002678:	40020010 	.word	0x40020010
 800267c:	40020028 	.word	0x40020028
 8002680:	40020040 	.word	0x40020040
 8002684:	40020058 	.word	0x40020058
 8002688:	40020070 	.word	0x40020070
 800268c:	40020088 	.word	0x40020088
 8002690:	400200a0 	.word	0x400200a0
 8002694:	400200b8 	.word	0x400200b8
 8002698:	40020410 	.word	0x40020410
 800269c:	40020428 	.word	0x40020428
 80026a0:	40020440 	.word	0x40020440
 80026a4:	40020458 	.word	0x40020458
 80026a8:	40020470 	.word	0x40020470
 80026ac:	40020488 	.word	0x40020488
 80026b0:	400204a0 	.word	0x400204a0
 80026b4:	400204b8 	.word	0x400204b8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5c      	ldr	r2, [pc, #368]	; (8002840 <HAL_DMA_Abort_IT+0x428>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d072      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_DMA_Abort_IT+0x42c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d06d      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a59      	ldr	r2, [pc, #356]	; (8002848 <HAL_DMA_Abort_IT+0x430>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d068      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_DMA_Abort_IT+0x434>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d063      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_DMA_Abort_IT+0x438>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d05e      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_DMA_Abort_IT+0x43c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d059      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_DMA_Abort_IT+0x440>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d054      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_DMA_Abort_IT+0x444>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04f      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_DMA_Abort_IT+0x448>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04a      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4f      	ldr	r2, [pc, #316]	; (8002864 <HAL_DMA_Abort_IT+0x44c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d045      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_DMA_Abort_IT+0x450>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d040      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4c      	ldr	r2, [pc, #304]	; (800286c <HAL_DMA_Abort_IT+0x454>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d03b      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_DMA_Abort_IT+0x458>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d036      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_DMA_Abort_IT+0x45c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d031      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_DMA_Abort_IT+0x460>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02c      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_DMA_Abort_IT+0x464>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d027      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a44      	ldr	r2, [pc, #272]	; (8002880 <HAL_DMA_Abort_IT+0x468>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d022      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a43      	ldr	r2, [pc, #268]	; (8002884 <HAL_DMA_Abort_IT+0x46c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d01d      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a41      	ldr	r2, [pc, #260]	; (8002888 <HAL_DMA_Abort_IT+0x470>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d018      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a40      	ldr	r2, [pc, #256]	; (800288c <HAL_DMA_Abort_IT+0x474>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3e      	ldr	r2, [pc, #248]	; (8002890 <HAL_DMA_Abort_IT+0x478>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00e      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <HAL_DMA_Abort_IT+0x47c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d009      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_DMA_Abort_IT+0x480>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x3a0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3a      	ldr	r2, [pc, #232]	; (800289c <HAL_DMA_Abort_IT+0x484>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_DMA_Abort_IT+0x3a4>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_DMA_Abort_IT+0x3a6>
 80027bc:	2300      	movs	r3, #0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d028      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2201      	movs	r2, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002808:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002812:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
 8002880:	58025408 	.word	0x58025408
 8002884:	5802541c 	.word	0x5802541c
 8002888:	58025430 	.word	0x58025430
 800288c:	58025444 	.word	0x58025444
 8002890:	58025458 	.word	0x58025458
 8002894:	5802546c 	.word	0x5802546c
 8002898:	58025480 	.word	0x58025480
 800289c:	58025494 	.word	0x58025494

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028ae:	4b89      	ldr	r3, [pc, #548]	; (8002ad4 <HAL_GPIO_Init+0x234>)
 80028b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028b2:	e194      	b.n	8002bde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8186 	beq.w	8002bd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d00b      	beq.n	80028ec <HAL_GPIO_Init+0x4c>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e0:	2b11      	cmp	r3, #17
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b12      	cmp	r3, #18
 80028ea:	d130      	bne.n	800294e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002922:	2201      	movs	r2, #1
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 0201 	and.w	r2, r3, #1
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0xee>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b12      	cmp	r3, #18
 800298c:	d123      	bne.n	80029d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	69b9      	ldr	r1, [r7, #24]
 80029d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0203 	and.w	r2, r3, #3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80e0 	beq.w	8002bd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_GPIO_Init+0x238>)
 8002a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <HAL_GPIO_Init+0x238>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_GPIO_Init+0x238>)
 8002a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_GPIO_Init+0x23c>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_GPIO_Init+0x240>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d052      	beq.n	8002b08 <HAL_GPIO_Init+0x268>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_GPIO_Init+0x244>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d031      	beq.n	8002ace <HAL_GPIO_Init+0x22e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_GPIO_Init+0x248>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02b      	beq.n	8002aca <HAL_GPIO_Init+0x22a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x24c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d025      	beq.n	8002ac6 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_GPIO_Init+0x250>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_GPIO_Init+0x254>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x258>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_GPIO_Init+0x25c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x260>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <HAL_GPIO_Init+0x264>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x20e>
 8002aaa:	2309      	movs	r3, #9
 8002aac:	e02d      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002aae:	230a      	movs	r3, #10
 8002ab0:	e02b      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	e029      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	e027      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e025      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e023      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e021      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e01f      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e01d      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01b      	b.n	8002b0a <HAL_GPIO_Init+0x26a>
 8002ad2:	bf00      	nop
 8002ad4:	58000080 	.word	0x58000080
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58000400 	.word	0x58000400
 8002ae0:	58020000 	.word	0x58020000
 8002ae4:	58020400 	.word	0x58020400
 8002ae8:	58020800 	.word	0x58020800
 8002aec:	58020c00 	.word	0x58020c00
 8002af0:	58021000 	.word	0x58021000
 8002af4:	58021400 	.word	0x58021400
 8002af8:	58021800 	.word	0x58021800
 8002afc:	58021c00 	.word	0x58021c00
 8002b00:	58022000 	.word	0x58022000
 8002b04:	58022400 	.word	0x58022400
 8002b08:	2300      	movs	r3, #0
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f002 0203 	and.w	r2, r2, #3
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	4093      	lsls	r3, r2
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b1a:	4938      	ldr	r1, [pc, #224]	; (8002bfc <HAL_GPIO_Init+0x35c>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f ae63 	bne.w	80028b4 <HAL_GPIO_Init+0x14>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	58000400 	.word	0x58000400

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	401a      	ands	r2, r3
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d104      	bne.n	8002c56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	041a      	lsls	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00a      	beq.n	8002c92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01f      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e01d      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ca2:	f7ff f9d7 	bl	8002054 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ca8:	e009      	b.n	8002cbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002caa:	f7ff f9d3 	bl	8002054 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb8:	d901      	bls.n	8002cbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	d1ee      	bne.n	8002caa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58024800 	.word	0x58024800

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e3ff      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8087 	beq.w	8002e0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfc:	4b99      	ldr	r3, [pc, #612]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d06:	4b97      	ldr	r3, [pc, #604]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d007      	beq.n	8002d22 <HAL_RCC_OscConfig+0x46>
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	2b18      	cmp	r3, #24
 8002d16:	d110      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x12c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d168      	bne.n	8002e08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3d9      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x76>
 8002d44:	4b87      	ldr	r3, [pc, #540]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e02e      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b82      	ldr	r3, [pc, #520]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a81      	ldr	r2, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0xbc>
 8002d7e:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a78      	ldr	r2, [pc, #480]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d98:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a71      	ldr	r2, [pc, #452]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff f94c 	bl	8002054 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff f948 	bl	8002054 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e38d      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd2:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe4>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f938 	bl	8002054 <HAL_GetTick>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff f934 	bl	8002054 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e379      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x10c>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80ae 	beq.w	8002f74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_RCC_OscConfig+0x162>
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b18      	cmp	r3, #24
 8002e32:	d13a      	bne.n	8002eaa <HAL_RCC_OscConfig+0x1ce>
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d135      	bne.n	8002eaa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3e:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x17a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e34b      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	f7ff f909 	bl	800206c <HAL_GetREVID>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d817      	bhi.n	8002e94 <HAL_RCC_OscConfig+0x1b8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d108      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1a2>
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e74:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7c:	e07a      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	031b      	lsls	r3, r3, #12
 8002e8c:	4935      	ldr	r1, [pc, #212]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e92:	e06f      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4930      	ldr	r1, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea8:	e064      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d045      	beq.n	8002f3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0219 	bic.w	r2, r3, #25
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4929      	ldr	r1, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f8c6 	bl	8002054 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7ff f8c2 	bl	8002054 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e307      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	f7ff f8bf 	bl	800206c <HAL_GetREVID>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d817      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d108      	bne.n	8002f12 <HAL_RCC_OscConfig+0x236>
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0e:	6053      	str	r3, [r2, #4]
 8002f10:	e030      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	031b      	lsls	r3, r3, #12
 8002f20:	4910      	ldr	r1, [pc, #64]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
 8002f26:	e025      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	490b      	ldr	r1, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	e01a      	b.n	8002f74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7ff f883 	bl	8002054 <HAL_GetTick>
 8002f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7ff f87f 	bl	8002054 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d903      	bls.n	8002f68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e2c4      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
 8002f64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f68:	4ba4      	ldr	r3, [pc, #656]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a9 	beq.w	80030d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f82:	4b9e      	ldr	r3, [pc, #632]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f8c:	4b9b      	ldr	r3, [pc, #620]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d007      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2cc>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b18      	cmp	r3, #24
 8002f9c:	d13a      	bne.n	8003014 <HAL_RCC_OscConfig+0x338>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d135      	bne.n	8003014 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fa8:	4b94      	ldr	r3, [pc, #592]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2e4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e296      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc0:	f7ff f854 	bl	800206c <HAL_GetREVID>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d817      	bhi.n	8002ffe <HAL_RCC_OscConfig+0x322>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x30c>
 8002fd6:	4b89      	ldr	r3, [pc, #548]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fde:	4a87      	ldr	r2, [pc, #540]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fe4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe6:	e075      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fe8:	4b84      	ldr	r3, [pc, #528]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	069b      	lsls	r3, r3, #26
 8002ff6:	4981      	ldr	r1, [pc, #516]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ffc:	e06a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffe:	4b7f      	ldr	r3, [pc, #508]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	497b      	ldr	r1, [pc, #492]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003012:	e05f      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d042      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800301c:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a76      	ldr	r2, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7ff f814 	bl	8002054 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003030:	f7ff f810 	bl	8002054 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e255      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003042:	4b6e      	ldr	r3, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800304e:	f7ff f80d 	bl	800206c <HAL_GetREVID>
 8003052:	4602      	mov	r2, r0
 8003054:	f241 0303 	movw	r3, #4099	; 0x1003
 8003058:	429a      	cmp	r2, r3
 800305a:	d817      	bhi.n	800308c <HAL_RCC_OscConfig+0x3b0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	2b20      	cmp	r3, #32
 8003062:	d108      	bne.n	8003076 <HAL_RCC_OscConfig+0x39a>
 8003064:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800306c:	4a63      	ldr	r2, [pc, #396]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800306e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003072:	6053      	str	r3, [r2, #4]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	495d      	ldr	r1, [pc, #372]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
 800308a:	e023      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
 800308c:	4b5b      	ldr	r3, [pc, #364]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	4958      	ldr	r1, [pc, #352]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800309c:	4313      	orrs	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
 80030a0:	e018      	b.n	80030d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030a2:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a55      	ldr	r2, [pc, #340]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80030a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe ffd1 	bl	8002054 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030b6:	f7fe ffcd 	bl	8002054 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e212      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d036      	beq.n	800314e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d019      	beq.n	800311c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e8:	4b44      	ldr	r3, [pc, #272]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	4a43      	ldr	r2, [pc, #268]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe ffae 	bl	8002054 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe ffaa 	bl	8002054 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1ef      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x420>
 800311a:	e018      	b.n	800314e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	4a36      	ldr	r2, [pc, #216]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe ff94 	bl	8002054 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe ff90 	bl	8002054 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1d5      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800316c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800316e:	f7fe ff71 	bl	8002054 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003176:	f7fe ff6d 	bl	8002054 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1b2      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x49a>
 8003194:	e018      	b.n	80031c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 800319c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031a2:	f7fe ff57 	bl	8002054 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031aa:	f7fe ff53 	bl	8002054 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e198      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCC_OscConfig+0x520>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8085 	beq.w	80032e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_OscConfig+0x524>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x524>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e2:	f7fe ff37 	bl	8002054 <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031e8:	e00c      	b.n	8003204 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fe ff33 	bl	8002054 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d905      	bls.n	8003204 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e178      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
 80031fc:	58024400 	.word	0x58024400
 8003200:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003204:	4b96      	ldr	r3, [pc, #600]	; (8003460 <HAL_RCC_OscConfig+0x784>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ec      	beq.n	80031ea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x54a>
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a91      	ldr	r2, [pc, #580]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e02d      	b.n	8003282 <HAL_RCC_OscConfig+0x5a6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x56c>
 800322e:	4b8d      	ldr	r3, [pc, #564]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a8c      	ldr	r2, [pc, #560]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b8a      	ldr	r3, [pc, #552]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a89      	ldr	r2, [pc, #548]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x5a6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x58e>
 8003250:	4b84      	ldr	r3, [pc, #528]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a83      	ldr	r2, [pc, #524]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a80      	ldr	r2, [pc, #512]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x5a6>
 800326a:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a7d      	ldr	r2, [pc, #500]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a7a      	ldr	r2, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fe fee3 	bl	8002054 <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe fedf 	bl	8002054 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e122      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a8:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x5b6>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fecd 	bl	8002054 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe fec9 	bl	8002054 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032d4:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8101 	beq.w	80034ec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032ea:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f2:	2b18      	cmp	r3, #24
 80032f4:	f000 80bc 	beq.w	8003470 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f040 8095 	bne.w	800342c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fea1 	bl	8002054 <HAL_GetTick>
 8003312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fe fe9d 	bl	8002054 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0e2      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003328:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCC_OscConfig+0x78c>)
 800333a:	4013      	ands	r3, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	430a      	orrs	r2, r1
 8003348:	4946      	ldr	r1, [pc, #280]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800334a:	4313      	orrs	r3, r2
 800334c:	628b      	str	r3, [r1, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	3b01      	subs	r3, #1
 8003354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	3b01      	subs	r3, #1
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	b29b      	uxth	r3, r3
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	3b01      	subs	r3, #1
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	3b01      	subs	r3, #1
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800337e:	4939      	ldr	r1, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a36      	ldr	r2, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x790>)
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800339c:	00d2      	lsls	r2, r2, #3
 800339e:	4931      	ldr	r1, [pc, #196]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033a4:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f023 020c 	bic.w	r2, r3, #12
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	492c      	ldr	r1, [pc, #176]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f023 0202 	bic.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fe26 	bl	8002054 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fe22 	bl	8002054 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e067      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x730>
 800342a:	e05f      	b.n	80034ec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0c      	ldr	r2, [pc, #48]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fe0c 	bl	8002054 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fe08 	bl	8002054 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04d      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCC_OscConfig+0x788>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x764>
 800345e:	e045      	b.n	80034ec <HAL_RCC_OscConfig+0x810>
 8003460:	58024800 	.word	0x58024800
 8003464:	58024400 	.word	0x58024400
 8003468:	fffffc0c 	.word	0xfffffc0c
 800346c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCC_OscConfig+0x81c>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x81c>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d031      	beq.n	80034e8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d12a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d122      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d108      	bne.n	80034e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0e1b      	lsrs	r3, r3, #24
 80034da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3730      	adds	r7, #48	; 0x30
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	58024400 	.word	0x58024400

080034fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e19c      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b8a      	ldr	r3, [pc, #552]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b87      	ldr	r3, [pc, #540]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 020f 	bic.w	r2, r3, #15
 8003526:	4985      	ldr	r1, [pc, #532]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b83      	ldr	r3, [pc, #524]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e184      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003558:	429a      	cmp	r2, r3
 800355a:	d908      	bls.n	800356e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800355c:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	4975      	ldr	r1, [pc, #468]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800356a:	4313      	orrs	r3, r2
 800356c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	4b70      	ldr	r3, [pc, #448]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003586:	429a      	cmp	r2, r3
 8003588:	d908      	bls.n	800359c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	496a      	ldr	r1, [pc, #424]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	4b64      	ldr	r3, [pc, #400]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d908      	bls.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	495e      	ldr	r1, [pc, #376]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d908      	bls.n	80035f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035e6:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4953      	ldr	r1, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	429a      	cmp	r2, r3
 8003612:	d908      	bls.n	8003626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f023 020f 	bic.w	r2, r3, #15
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4947      	ldr	r1, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003622:	4313      	orrs	r3, r2
 8003624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d055      	beq.n	80036de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4940      	ldr	r1, [pc, #256]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003640:	4313      	orrs	r3, r2
 8003642:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d107      	bne.n	800365c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d121      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0f6      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d107      	bne.n	8003674 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d115      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0ea      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0de      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800368c:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d6      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4925      	ldr	r1, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fe fcd1 	bl	8002054 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b6:	f7fe fccd 	bl	8002054 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0be      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036cc:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	429a      	cmp	r2, r3
 80036dc:	d1eb      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d208      	bcs.n	800370c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f023 020f 	bic.w	r2, r3, #15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x244>)
 8003708:	4313      	orrs	r3, r2
 800370a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d214      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 020f 	bic.w	r2, r3, #15
 8003722:	4906      	ldr	r1, [pc, #24]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_RCC_ClockConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e086      	b.n	800384a <HAL_RCC_ClockConfig+0x34e>
 800373c:	52002000 	.word	0x52002000
 8003740:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375c:	429a      	cmp	r2, r3
 800375e:	d208      	bcs.n	8003772 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003760:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4939      	ldr	r1, [pc, #228]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 800376e:	4313      	orrs	r3, r2
 8003770:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800378a:	429a      	cmp	r2, r3
 800378c:	d208      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	492e      	ldr	r1, [pc, #184]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d208      	bcs.n	80037ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4922      	ldr	r1, [pc, #136]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d010      	beq.n	80037fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d208      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4917      	ldr	r1, [pc, #92]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037fc:	f000 f834 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003800:	4601      	mov	r1, r0
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x35c>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa21 f303 	lsr.w	r3, r1, r3
 8003818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x358>)
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_RCC_ClockConfig+0x35c>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x360>)
 8003832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x364>)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x368>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f956 	bl	8000af0 <HAL_InitTick>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	58024400 	.word	0x58024400
 8003858:	0800de18 	.word	0x0800de18
 800385c:	24000004 	.word	0x24000004
 8003860:	24000000 	.word	0x24000000
 8003864:	24000008 	.word	0x24000008

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386e:	4baf      	ldr	r3, [pc, #700]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003876:	2b18      	cmp	r3, #24
 8003878:	f200 814e 	bhi.w	8003b18 <HAL_RCC_GetSysClockFreq+0x2b0>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038e9 	.word	0x080038e9
 8003888:	08003b19 	.word	0x08003b19
 800388c:	08003b19 	.word	0x08003b19
 8003890:	08003b19 	.word	0x08003b19
 8003894:	08003b19 	.word	0x08003b19
 8003898:	08003b19 	.word	0x08003b19
 800389c:	08003b19 	.word	0x08003b19
 80038a0:	08003b19 	.word	0x08003b19
 80038a4:	0800390f 	.word	0x0800390f
 80038a8:	08003b19 	.word	0x08003b19
 80038ac:	08003b19 	.word	0x08003b19
 80038b0:	08003b19 	.word	0x08003b19
 80038b4:	08003b19 	.word	0x08003b19
 80038b8:	08003b19 	.word	0x08003b19
 80038bc:	08003b19 	.word	0x08003b19
 80038c0:	08003b19 	.word	0x08003b19
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003b19 	.word	0x08003b19
 80038cc:	08003b19 	.word	0x08003b19
 80038d0:	08003b19 	.word	0x08003b19
 80038d4:	08003b19 	.word	0x08003b19
 80038d8:	08003b19 	.word	0x08003b19
 80038dc:	08003b19 	.word	0x08003b19
 80038e0:	08003b19 	.word	0x08003b19
 80038e4:	0800391b 	.word	0x0800391b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e8:	4b90      	ldr	r3, [pc, #576]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038f4:	4b8d      	ldr	r3, [pc, #564]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	4a8c      	ldr	r2, [pc, #560]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003906:	e10a      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003908:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800390a:	61bb      	str	r3, [r7, #24]
    break;
 800390c:	e107      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800390e:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003910:	61bb      	str	r3, [r7, #24]
    break;
 8003912:	e104      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003914:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003916:	61bb      	str	r3, [r7, #24]
    break;
 8003918:	e101      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800391a:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003924:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003930:	4b7e      	ldr	r3, [pc, #504]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800393a:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	08db      	lsrs	r3, r3, #3
 8003940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80da 	beq.w	8003b12 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d05a      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1b2>
 8003964:	2b01      	cmp	r3, #1
 8003966:	d302      	bcc.n	800396e <HAL_RCC_GetSysClockFreq+0x106>
 8003968:	2b02      	cmp	r3, #2
 800396a:	d078      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x1f6>
 800396c:	e099      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800396e:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02d      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800397a:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	08db      	lsrs	r3, r3, #3
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80039b8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 80039bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039d4:	e087      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003b40 <HAL_RCC_GetSysClockFreq+0x2d8>
 80039e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a18:	e065      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a24:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a40:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5c:	e043      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a68:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a80:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a84:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa0:	e021      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	0a5b      	lsrs	r3, r3, #9
 8003aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af0:	3301      	adds	r3, #1
 8003af2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b0a:	ee17 3a90 	vmov	r3, s15
 8003b0e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b10:	e005      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
    break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b1a:	61bb      	str	r3, [r7, #24]
    break;
 8003b1c:	bf00      	nop
  }

  return sysclockfreq;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3724      	adds	r7, #36	; 0x24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	03d09000 	.word	0x03d09000
 8003b34:	003d0900 	.word	0x003d0900
 8003b38:	017d7840 	.word	0x017d7840
 8003b3c:	46000000 	.word	0x46000000
 8003b40:	4c742400 	.word	0x4c742400
 8003b44:	4a742400 	.word	0x4a742400
 8003b48:	4bbebc20 	.word	0x4bbebc20

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b52:	f7ff fe89 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003b56:	4601      	mov	r1, r0
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	0800de18 	.word	0x0800de18
 8003ba4:	24000004 	.word	0x24000004
 8003ba8:	24000000 	.word	0x24000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bb0:	f7ff ffcc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003bb4:	4601      	mov	r1, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	0800de18 	.word	0x0800de18

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bdc:	f7ff ffb6 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003be0:	4601      	mov	r1, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	0800de18 	.word	0x0800de18

08003c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223f      	movs	r2, #63	; 0x3f
 8003c12:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c14:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0207 	and.w	r2, r3, #7
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_GetClockConfig+0x7c>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_GetClockConfig+0x80>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	58024400 	.word	0x58024400
 8003c84:	52002000 	.word	0x52002000

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03d      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cac:	d013      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	d802      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003cb8:	e01f      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cbe:	d013      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003cc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cc4:	d01c      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003cc6:	e018      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc8:	4baf      	ldr	r3, [pc, #700]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	4aae      	ldr	r2, [pc, #696]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cd4:	e015      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f001 f96f 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ce6:	e00c      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 fa18 	bl	8005124 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d08:	4b9f      	ldr	r3, [pc, #636]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	499c      	ldr	r1, [pc, #624]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	650b      	str	r3, [r1, #80]	; 0x50
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d03d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d826      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d5f 	.word	0x08003d5f
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d50:	4b8d      	ldr	r3, [pc, #564]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4a8c      	ldr	r2, [pc, #560]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d5c:	e015      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f92b 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f9d4 	bl	8005124 <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d90:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	f023 0207 	bic.w	r2, r3, #7
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	497a      	ldr	r1, [pc, #488]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	650b      	str	r3, [r1, #80]	; 0x50
 8003da2:	e001      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03e      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d01c      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d804      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003dc8:	e01e      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003dca:	2bc0      	cmp	r3, #192	; 0xc0
 8003dcc:	d01f      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd2:	d01e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dd4:	e018      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a6b      	ldr	r2, [pc, #428]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003de2:	e017      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 f8e8 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003df4:	e00e      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f991 	bl	8005124 <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e000      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4958      	ldr	r1, [pc, #352]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	650b      	str	r3, [r1, #80]	; 0x50
 8003e2c:	e001      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d044      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e48:	d01f      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4e:	d805      	bhi.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e58:	d00e      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e5a:	e01f      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e60:	d01f      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e66:	d01e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e68:	e018      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e76:	e017      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 f89e 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e88:	e00e      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f947 	bl	8005124 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003eae:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ebc:	4932      	ldr	r1, [pc, #200]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ec2:	e001      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d044      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ede:	d01f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee4:	d805      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eee:	d00e      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ef0:	e01f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ef6:	d01f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003efc:	d01e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003efe:	e018      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f0c:	e017      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 f853 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f1e:	e00e      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3324      	adds	r3, #36	; 0x24
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f8fc 	bl	8005124 <RCCEx_PLL3_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f52:	490d      	ldr	r1, [pc, #52]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	658b      	str	r3, [r1, #88]	; 0x58
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d035      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d802      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01b      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003f7a:	e017      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d00c      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003f80:	2b30      	cmp	r3, #48	; 0x30
 8003f82:	d018      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003f84:	e012      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8c:	4baf      	ldr	r3, [pc, #700]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4aae      	ldr	r2, [pc, #696]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f98:	e00e      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 f80d 	bl	8004fc0 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003faa:	e005      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fbe:	4ba3      	ldr	r3, [pc, #652]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fca:	49a0      	ldr	r1, [pc, #640]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d042      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	d01f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff0:	d805      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffa:	d00e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ffc:	e01f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004002:	d01f      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004008:	d01e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800400a:	e018      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4b8f      	ldr	r3, [pc, #572]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a8e      	ldr	r2, [pc, #568]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004018:	e017      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ffcd 	bl	8004fc0 <RCCEx_PLL2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800402a:	e00e      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f876 	bl	8005124 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800403c:	e005      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
      break;
 8004042:	e002      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004044:	bf00      	nop
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004050:	4b7e      	ldr	r3, [pc, #504]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	497b      	ldr	r1, [pc, #492]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	650b      	str	r3, [r1, #80]	; 0x50
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d042      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800407c:	d01b      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004082:	d805      	bhi.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d022      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800408e:	e01b      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004090:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004094:	d01d      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409a:	d01c      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800409c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a0:	d01b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
 80040a2:	e011      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 ff88 	bl	8004fc0 <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040b4:	e012      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3324      	adds	r3, #36	; 0x24
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f831 	bl	8005124 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040c6:	e009      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
      break;
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040ce:	bf00      	nop
 80040d0:	e004      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040e2:	4b5a      	ldr	r3, [pc, #360]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ee:	4957      	ldr	r1, [pc, #348]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	650b      	str	r3, [r1, #80]	; 0x50
 80040f4:	e001      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d044      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800410c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004110:	d01b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004116:	d805      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800411c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004122:	e01b      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d01d      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800412a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412e:	d01c      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004130:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004134:	d01b      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004136:	e011      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff3e 	bl	8004fc0 <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004148:	e012      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 ffe7 	bl	8005124 <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
      break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800416e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004184:	4931      	ldr	r1, [pc, #196]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	658b      	str	r3, [r1, #88]	; 0x58
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02d      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a4:	d005      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041aa:	d009      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80041b0:	e00f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041be:	e00c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fefa 	bl	8004fc0 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
      break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80041d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ec:	4917      	ldr	r1, [pc, #92]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	650b      	str	r3, [r1, #80]	; 0x50
 80041f2:	e001      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d035      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	2b03      	cmp	r3, #3
 800420a:	d81b      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004251 	.word	0x08004251
 8004218:	08004225 	.word	0x08004225
 800421c:	08004233 	.word	0x08004233
 8004220:	08004251 	.word	0x08004251
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fec1 	bl	8004fc0 <RCCEx_PLL2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
      break;
 8004250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004258:	4bba      	ldr	r3, [pc, #744]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	49b7      	ldr	r1, [pc, #732]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	64cb      	str	r3, [r1, #76]	; 0x4c
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8086 	beq.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427e:	4bb2      	ldr	r3, [pc, #712]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4ab1      	ldr	r2, [pc, #708]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800428a:	f7fd fee3 	bl	8002054 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004290:	e009      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fd fedf 	bl	8002054 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d902      	bls.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	75fb      	strb	r3, [r7, #23]
        break;
 80042a4:	e005      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a6:	4ba8      	ldr	r3, [pc, #672]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ef      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d166      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042b8:	4ba2      	ldr	r3, [pc, #648]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c2:	4053      	eors	r3, r2
 80042c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042cc:	4b9d      	ldr	r3, [pc, #628]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a9a      	ldr	r2, [pc, #616]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e2:	4b98      	ldr	r3, [pc, #608]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a97      	ldr	r2, [pc, #604]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042ee:	4a95      	ldr	r2, [pc, #596]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d115      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fea8 	bl	8002054 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004306:	e00b      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fd fea4 	bl	8002054 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d902      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	75fb      	strb	r3, [r7, #23]
            break;
 800431e:	e005      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ed      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d126      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004340:	d10d      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004342:	4b80      	ldr	r3, [pc, #512]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004350:	0919      	lsrs	r1, r3, #4
 8004352:	4b7e      	ldr	r3, [pc, #504]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004354:	400b      	ands	r3, r1
 8004356:	497b      	ldr	r1, [pc, #492]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]
 800435c:	e005      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004368:	6113      	str	r3, [r2, #16]
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800436c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	4972      	ldr	r1, [pc, #456]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	670b      	str	r3, [r1, #112]	; 0x70
 800437e:	e004      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	75bb      	strb	r3, [r7, #22]
 8004384:	e001      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d07d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439a:	2b28      	cmp	r3, #40	; 0x28
 800439c:	d866      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	08004473 	.word	0x08004473
 80043a8:	0800446d 	.word	0x0800446d
 80043ac:	0800446d 	.word	0x0800446d
 80043b0:	0800446d 	.word	0x0800446d
 80043b4:	0800446d 	.word	0x0800446d
 80043b8:	0800446d 	.word	0x0800446d
 80043bc:	0800446d 	.word	0x0800446d
 80043c0:	0800446d 	.word	0x0800446d
 80043c4:	08004449 	.word	0x08004449
 80043c8:	0800446d 	.word	0x0800446d
 80043cc:	0800446d 	.word	0x0800446d
 80043d0:	0800446d 	.word	0x0800446d
 80043d4:	0800446d 	.word	0x0800446d
 80043d8:	0800446d 	.word	0x0800446d
 80043dc:	0800446d 	.word	0x0800446d
 80043e0:	0800446d 	.word	0x0800446d
 80043e4:	0800445b 	.word	0x0800445b
 80043e8:	0800446d 	.word	0x0800446d
 80043ec:	0800446d 	.word	0x0800446d
 80043f0:	0800446d 	.word	0x0800446d
 80043f4:	0800446d 	.word	0x0800446d
 80043f8:	0800446d 	.word	0x0800446d
 80043fc:	0800446d 	.word	0x0800446d
 8004400:	0800446d 	.word	0x0800446d
 8004404:	08004473 	.word	0x08004473
 8004408:	0800446d 	.word	0x0800446d
 800440c:	0800446d 	.word	0x0800446d
 8004410:	0800446d 	.word	0x0800446d
 8004414:	0800446d 	.word	0x0800446d
 8004418:	0800446d 	.word	0x0800446d
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800446d 	.word	0x0800446d
 8004424:	08004473 	.word	0x08004473
 8004428:	0800446d 	.word	0x0800446d
 800442c:	0800446d 	.word	0x0800446d
 8004430:	0800446d 	.word	0x0800446d
 8004434:	0800446d 	.word	0x0800446d
 8004438:	0800446d 	.word	0x0800446d
 800443c:	0800446d 	.word	0x0800446d
 8004440:	0800446d 	.word	0x0800446d
 8004444:	08004473 	.word	0x08004473
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fdb6 	bl	8004fc0 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004458:	e00c      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3324      	adds	r3, #36	; 0x24
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fe5f 	bl	8005124 <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800446a:	e003      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
      break;
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004486:	492f      	ldr	r1, [pc, #188]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	654b      	str	r3, [r1, #84]	; 0x54
 800448c:	e001      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d037      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d820      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044ef 	.word	0x080044ef
 80044b0:	080044c5 	.word	0x080044c5
 80044b4:	080044d7 	.word	0x080044d7
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	080044ef 	.word	0x080044ef
 80044c0:	080044ef 	.word	0x080044ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fd78 	bl	8004fc0 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044d4:	e00c      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3324      	adds	r3, #36	; 0x24
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fe21 	bl	8005124 <RCCEx_PLL3_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044e6:	e003      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
      break;
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80044ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f023 0207 	bic.w	r2, r3, #7
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	4910      	ldr	r1, [pc, #64]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	654b      	str	r3, [r1, #84]	; 0x54
 8004508:	e001      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d040      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	2b05      	cmp	r3, #5
 8004522:	d827      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	0800457b 	.word	0x0800457b
 8004530:	08004551 	.word	0x08004551
 8004534:	08004563 	.word	0x08004563
 8004538:	0800457b 	.word	0x0800457b
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800457b 	.word	0x0800457b
 8004544:	58024400 	.word	0x58024400
 8004548:	58024800 	.word	0x58024800
 800454c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fd32 	bl	8004fc0 <RCCEx_PLL2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004560:	e00c      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3324      	adds	r3, #36	; 0x24
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fddb 	bl	8005124 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004572:	e003      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
      break;
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800457a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004582:	4bb2      	ldr	r3, [pc, #712]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	49ae      	ldr	r1, [pc, #696]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	658b      	str	r3, [r1, #88]	; 0x58
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d044      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b2:	d01b      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x964>
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b8:	d805      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d022      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80045be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x952>
 80045c4:	e01b      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x976>
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d01d      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80045cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045d0:	d01c      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80045d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045d6:	d01b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80045d8:	e011      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fced 	bl	8004fc0 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045ea:	e012      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fd96 	bl	8005124 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045fc:	e009      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
      break;
 8004602:	e006      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004604:	bf00      	nop
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004618:	4b8c      	ldr	r3, [pc, #560]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004626:	4989      	ldr	r1, [pc, #548]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	654b      	str	r3, [r1, #84]	; 0x54
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d044      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004648:	d01b      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d805      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d022      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800465a:	e01b      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d01d      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004662:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004666:	d01c      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466c:	d01b      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800466e:	e011      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fca2 	bl	8004fc0 <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004680:	e012      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3324      	adds	r3, #36	; 0x24
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd4b 	bl	8005124 <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004692:	e009      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	75fb      	strb	r3, [r7, #23]
      break;
 8004698:	e006      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800469a:	bf00      	nop
 800469c:	e004      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046bc:	4963      	ldr	r1, [pc, #396]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	658b      	str	r3, [r1, #88]	; 0x58
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d044      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046de:	d01b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80046e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e4:	d805      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d022      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80046f0:	e01b      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f6:	d01d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046fc:	d01c      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80046fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004702:	d01b      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004704:	e011      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fc57 	bl	8004fc0 <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004716:	e012      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3324      	adds	r3, #36	; 0x24
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fd00 	bl	8005124 <RCCEx_PLL3_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004728:	e009      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
      break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004730:	bf00      	nop
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800473c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004744:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004752:	493e      	ldr	r1, [pc, #248]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	658b      	str	r3, [r1, #88]	; 0x58
 8004758:	e001      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d10a      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	2102      	movs	r1, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fcd1 	bl	8005124 <RCCEx_PLL3_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800478c:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479a:	492c      	ldr	r1, [pc, #176]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800479c:	4313      	orrs	r3, r2
 800479e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d10a      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3324      	adds	r3, #36	; 0x24
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fcb0 	bl	8005124 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	491b      	ldr	r1, [pc, #108]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d032      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d00d      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80047fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047fe:	d016      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d111      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fbd8 	bl	8004fc0 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004814:	e00c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3324      	adds	r3, #36	; 0x24
 800481a:	2102      	movs	r1, #2
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fc81 	bl	8005124 <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800482e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004844:	4901      	ldr	r1, [pc, #4]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	658b      	str	r3, [r1, #88]	; 0x58
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800484c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d02f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486a:	d00c      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800486c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004870:	d015      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004876:	d10f      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4b79      	ldr	r3, [pc, #484]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a78      	ldr	r2, [pc, #480]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004884:	e00c      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	; 0x24
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fc49 	bl	8005124 <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004896:	e003      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800489e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a6:	4b6e      	ldr	r3, [pc, #440]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	496a      	ldr	r1, [pc, #424]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	654b      	str	r3, [r1, #84]	; 0x54
 80048ba:	e001      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d029      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d8:	d007      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80048da:	e00f      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048dc:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a5f      	ldr	r2, [pc, #380]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048e8:	e00b      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fb65 	bl	8004fc0 <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	4952      	ldr	r1, [pc, #328]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	64cb      	str	r3, [r1, #76]	; 0x4c
 800491a:	e001      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3324      	adds	r3, #36	; 0x24
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fbf6 	bl	8005124 <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d02f      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004956:	d00c      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d802      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004962:	e00d      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d00f      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800496a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496e:	d00e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004970:	e006      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	4a3a      	ldr	r2, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800497e:	e007      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004996:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a2:	492f      	ldr	r1, [pc, #188]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	654b      	str	r3, [r1, #84]	; 0x54
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4926      	ldr	r1, [pc, #152]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049e6:	491e      	ldr	r1, [pc, #120]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049f8:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a04:	4916      	ldr	r1, [pc, #88]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a2c:	490c      	ldr	r1, [pc, #48]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da08      	bge.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	4906      	ldr	r1, [pc, #24]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004a4c:	7dbb      	ldrb	r3, [r7, #22]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024400 	.word	0x58024400

08004a64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a68:	f7ff f870 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	0800de18 	.word	0x0800de18

08004a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a98:	4b9d      	ldr	r3, [pc, #628]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004aa2:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	0b1b      	lsrs	r3, r3, #12
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004aae:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004aba:	4b95      	ldr	r3, [pc, #596]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 810a 	beq.w	8004cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d05a      	beq.n	8004b9a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d302      	bcc.n	8004aee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d078      	beq.n	8004bde <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004aec:	e099      	b.n	8004c22 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aee:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02d      	beq.n	8004b56 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	08db      	lsrs	r3, r3, #3
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b24:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b34:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b54:	e087      	b.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b68:	4b69      	ldr	r3, [pc, #420]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b78:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b98:	e065      	b.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bac:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bdc:	e043      	b.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf0:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c20:	e021      	b.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c64:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c66:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8c:	ee17 2a90 	vmov	r2, s15
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	0e1b      	lsrs	r3, r3, #24
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce8:	ee17 2a90 	vmov	r2, s15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	3724      	adds	r7, #36	; 0x24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	58024400 	.word	0x58024400
 8004d14:	03d09000 	.word	0x03d09000
 8004d18:	46000000 	.word	0x46000000
 8004d1c:	4c742400 	.word	0x4c742400
 8004d20:	4a742400 	.word	0x4a742400
 8004d24:	4bbebc20 	.word	0x4bbebc20

08004d28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d30:	4b9d      	ldr	r3, [pc, #628]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d3a:	4b9b      	ldr	r3, [pc, #620]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	0d1b      	lsrs	r3, r3, #20
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d46:	4b98      	ldr	r3, [pc, #608]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d52:	4b95      	ldr	r3, [pc, #596]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 810a 	beq.w	8004f8a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d05a      	beq.n	8004e32 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d302      	bcc.n	8004d86 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d078      	beq.n	8004e76 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004d84:	e099      	b.n	8004eba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d86:	4b88      	ldr	r3, [pc, #544]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02d      	beq.n	8004dee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d92:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	08db      	lsrs	r3, r3, #3
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	4a83      	ldr	r2, [pc, #524]	; (8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dbc:	4b7a      	ldr	r3, [pc, #488]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dec:	e087      	b.n	8004efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e00:	4b69      	ldr	r3, [pc, #420]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e30:	e065      	b.n	8004efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e44:	4b58      	ldr	r3, [pc, #352]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e54:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e74:	e043      	b.n	8004efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eb8:	e021      	b.n	8004efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004efc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004efe:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	0a5b      	lsrs	r3, r3, #9
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f24:	ee17 2a90 	vmov	r2, s15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 2a90 	vmov	r2, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	3724      	adds	r7, #36	; 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	03d09000 	.word	0x03d09000
 8004fb0:	46000000 	.word	0x46000000
 8004fb4:	4c742400 	.word	0x4c742400
 8004fb8:	4a742400 	.word	0x4a742400
 8004fbc:	4bbebc20 	.word	0x4bbebc20

08004fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fce:	4b53      	ldr	r3, [pc, #332]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d101      	bne.n	8004fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e099      	b.n	8005112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fde:	4b4f      	ldr	r3, [pc, #316]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a4e      	ldr	r2, [pc, #312]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fd f833 	bl	8002054 <HAL_GetTick>
 8004fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ff2:	f7fd f82f 	bl	8002054 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e086      	b.n	8005112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005004:	4b45      	ldr	r3, [pc, #276]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005010:	4b42      	ldr	r3, [pc, #264]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	031b      	lsls	r3, r3, #12
 800501e:	493f      	ldr	r1, [pc, #252]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	628b      	str	r3, [r1, #40]	; 0x28
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	3b01      	subs	r3, #1
 800502a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	3b01      	subs	r3, #1
 8005034:	025b      	lsls	r3, r3, #9
 8005036:	b29b      	uxth	r3, r3
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	041b      	lsls	r3, r3, #16
 8005042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	3b01      	subs	r3, #1
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005054:	4931      	ldr	r1, [pc, #196]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800505a:	4b30      	ldr	r3, [pc, #192]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	492d      	ldr	r1, [pc, #180]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800506c:	4b2b      	ldr	r3, [pc, #172]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	f023 0220 	bic.w	r2, r3, #32
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	4928      	ldr	r1, [pc, #160]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 800507a:	4313      	orrs	r3, r2
 800507c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	4a26      	ldr	r2, [pc, #152]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 800508c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <RCCEx_PLL2_Config+0x160>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	69d2      	ldr	r2, [r2, #28]
 8005096:	00d2      	lsls	r2, r2, #3
 8005098:	4920      	ldr	r1, [pc, #128]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800509e:	4b1f      	ldr	r3, [pc, #124]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f043 0310 	orr.w	r3, r3, #16
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050b0:	4b1a      	ldr	r3, [pc, #104]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050bc:	e00f      	b.n	80050de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050c4:	4b15      	ldr	r3, [pc, #84]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050d0:	e005      	b.n	80050de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a11      	ldr	r2, [pc, #68]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 80050e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ea:	f7fc ffb3 	bl	8002054 <HAL_GetTick>
 80050ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050f0:	e008      	b.n	8005104 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050f2:	f7fc ffaf 	bl	8002054 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e006      	b.n	8005112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <RCCEx_PLL2_Config+0x15c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400
 8005120:	ffff0007 	.word	0xffff0007

08005124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005132:	4b53      	ldr	r3, [pc, #332]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b03      	cmp	r3, #3
 800513c:	d101      	bne.n	8005142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e099      	b.n	8005276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc ff81 	bl	8002054 <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005156:	f7fc ff7d 	bl	8002054 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e086      	b.n	8005276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005168:	4b45      	ldr	r3, [pc, #276]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	051b      	lsls	r3, r3, #20
 8005182:	493f      	ldr	r1, [pc, #252]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	628b      	str	r3, [r1, #40]	; 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	3b01      	subs	r3, #1
 800518e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	3b01      	subs	r3, #1
 8005198:	025b      	lsls	r3, r3, #9
 800519a:	b29b      	uxth	r3, r3
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051b8:	4931      	ldr	r1, [pc, #196]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051be:	4b30      	ldr	r3, [pc, #192]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	492d      	ldr	r1, [pc, #180]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051d0:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	4928      	ldr	r1, [pc, #160]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	4a26      	ldr	r2, [pc, #152]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <RCCEx_PLL3_Config+0x160>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	69d2      	ldr	r2, [r2, #28]
 80051fa:	00d2      	lsls	r2, r2, #3
 80051fc:	4920      	ldr	r1, [pc, #128]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005202:	4b1f      	ldr	r3, [pc, #124]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800521a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005220:	e00f      	b.n	8005242 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d106      	bne.n	8005236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800522e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005234:	e005      	b.n	8005242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800523c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0e      	ldr	r2, [pc, #56]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524e:	f7fc ff01 	bl	8002054 <HAL_GetTick>
 8005252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005254:	e008      	b.n	8005268 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005256:	f7fc fefd 	bl	8002054 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e006      	b.n	8005276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <RCCEx_PLL3_Config+0x15c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
 8005284:	ffff0007 	.word	0xffff0007

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e049      	b.n	800532e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc f80a 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fd0e 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e021      	b.n	8005394 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_TIM_Base_Start_IT+0x68>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d00b      	beq.n	8005392 <HAL_TIM_Base_Start_IT+0x5a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d007      	beq.n	8005392 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	00010007 	.word	0x00010007

080053a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e049      	b.n	800544a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f841 	bl	8005452 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 fc80 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e049      	b.n	800550c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fb ff8f 	bl	80013b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f000 fc1f 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b02      	cmp	r3, #2
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0202 	mvn.w	r2, #2
 8005540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb ffee 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fbae 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb ffd7 	bl	8001518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b04      	cmp	r3, #4
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b04      	cmp	r3, #4
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0204 	mvn.w	r2, #4
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb ffc4 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb84 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fb ffad 	bl	8001518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0208 	mvn.w	r2, #8
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2204      	movs	r2, #4
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb ff9a 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb5a 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fb ff83 	bl	8001518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b10      	cmp	r3, #16
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b10      	cmp	r3, #16
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0210 	mvn.w	r2, #16
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2208      	movs	r2, #8
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb ff70 	bl	8001538 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fb30 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fb ff59 	bl	8001518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10e      	bne.n	8005698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d107      	bne.n	8005698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0201 	mvn.w	r2, #1
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fb f9ec 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d10e      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d107      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fa1c 	bl	8006afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fa0f 	bl	8006b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fadb 	bl	8005cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0220 	mvn.w	r2, #32
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f9cf 	bl	8006ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005768:	2302      	movs	r3, #2
 800576a:	e082      	b.n	8005872 <HAL_TIM_IC_ConfigChannel+0x120>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f000 fedf 	bl	800654c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 020c 	bic.w	r2, r2, #12
 800579c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	619a      	str	r2, [r3, #24]
 80057b0:	e05a      	b.n	8005868 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d11c      	bne.n	80057f2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f000 ff63 	bl	8006692 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057da:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e03a      	b.n	8005868 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d11b      	bne.n	8005830 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 ffb0 	bl	800676c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 020c 	bic.w	r2, r2, #12
 800581a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69d9      	ldr	r1, [r3, #28]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	61da      	str	r2, [r3, #28]
 800582e:	e01b      	b.n	8005868 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6819      	ldr	r1, [r3, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f000 ffd0 	bl	80067e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005852:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69d9      	ldr	r1, [r3, #28]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005892:	2302      	movs	r3, #2
 8005894:	e0fd      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b14      	cmp	r3, #20
 80058a2:	f200 80f0 	bhi.w	8005a86 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005a87 	.word	0x08005a87
 80058b4:	08005a87 	.word	0x08005a87
 80058b8:	08005a87 	.word	0x08005a87
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005a87 	.word	0x08005a87
 80058c4:	08005a87 	.word	0x08005a87
 80058c8:	08005a87 	.word	0x08005a87
 80058cc:	08005983 	.word	0x08005983
 80058d0:	08005a87 	.word	0x08005a87
 80058d4:	08005a87 	.word	0x08005a87
 80058d8:	08005a87 	.word	0x08005a87
 80058dc:	080059c3 	.word	0x080059c3
 80058e0:	08005a87 	.word	0x08005a87
 80058e4:	08005a87 	.word	0x08005a87
 80058e8:	08005a87 	.word	0x08005a87
 80058ec:	08005a05 	.word	0x08005a05
 80058f0:	08005a87 	.word	0x08005a87
 80058f4:	08005a87 	.word	0x08005a87
 80058f8:	08005a87 	.word	0x08005a87
 80058fc:	08005a45 	.word	0x08005a45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa88 	bl	8005e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	619a      	str	r2, [r3, #24]
      break;
 800593e:	e0a3      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 faf8 	bl	8005f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]
      break;
 8005980:	e082      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fb61 	bl	8006050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0204 	bic.w	r2, r2, #4
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	61da      	str	r2, [r3, #28]
      break;
 80059c0:	e062      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fbc7 	bl	800615c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	021a      	lsls	r2, r3, #8
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	61da      	str	r2, [r3, #28]
      break;
 8005a02:	e041      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fc0e 	bl	800622c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0208 	orr.w	r2, r2, #8
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0204 	bic.w	r2, r2, #4
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a42:	e021      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc50 	bl	80062f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	021a      	lsls	r2, r3, #8
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a84:	e000      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop

08005a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIM_ConfigClockSource+0x18>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e0b7      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x188>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <HAL_TIM_ConfigClockSource+0x190>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d02e      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xae>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d812      	bhi.n	8005b16 <HAL_TIM_ConfigClockSource+0x7a>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	f000 8084 	beq.w	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	d806      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x6c>
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d07f      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d07d      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d07b      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b06:	e084      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005b08:	2b50      	cmp	r3, #80	; 0x50
 8005b0a:	d048      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x102>
 8005b0c:	2b60      	cmp	r3, #96	; 0x60
 8005b0e:	d056      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x122>
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d064      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005b14:	e07d      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005b16:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b1a:	d070      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005b1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b20:	d809      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x9a>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d027      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xdc>
 8005b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2c:	d067      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b32:	d06d      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b34:	e06d      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005b36:	4a3e      	ldr	r2, [pc, #248]	; (8005c30 <HAL_TIM_ConfigClockSource+0x194>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d060      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005b3c:	4a3d      	ldr	r2, [pc, #244]	; (8005c34 <HAL_TIM_ConfigClockSource+0x198>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d05d      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
 8005b42:	4a3d      	ldr	r2, [pc, #244]	; (8005c38 <HAL_TIM_ConfigClockSource+0x19c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d05a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005b48:	e063      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6899      	ldr	r1, [r3, #8]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f000 fe9f 	bl	800689c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e04c      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f000 fe88 	bl	800689c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e039      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 fd42 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2150      	movs	r1, #80	; 0x50
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fe52 	bl	8006860 <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e029      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fd9e 	bl	800670c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2160      	movs	r1, #96	; 0x60
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fe42 	bl	8006860 <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e019      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fd22 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fe32 	bl	8006860 <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e009      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fe29 	bl	8006860 <TIM_ITRx_SetConfig>
      break;
 8005c0e:	e000      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	ffceff88 	.word	0xffceff88
 8005c30:	00100030 	.word	0x00100030
 8005c34:	00100040 	.word	0x00100040
 8005c38:	00100020 	.word	0x00100020

08005c3c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e031      	b.n	8005cb8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fba6 	bl	80063b8 <TIM_SlaveTimer_SetConfig>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e018      	b.n	8005cb8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c94:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ca4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a40      	ldr	r2, [pc, #256]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <TIM_Base_SetConfig+0x118>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <TIM_Base_SetConfig+0x11c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <TIM_Base_SetConfig+0x120>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3a      	ldr	r2, [pc, #232]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01b      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <TIM_Base_SetConfig+0x118>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d017      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2b      	ldr	r2, [pc, #172]	; (8005e04 <TIM_Base_SetConfig+0x11c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <TIM_Base_SetConfig+0x120>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a29      	ldr	r2, [pc, #164]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <TIM_Base_SetConfig+0x128>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <TIM_Base_SetConfig+0x130>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <TIM_Base_SetConfig+0x114>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00f      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a12      	ldr	r2, [pc, #72]	; (8005e0c <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a11      	ldr	r2, [pc, #68]	; (8005e10 <TIM_Base_SetConfig+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a10      	ldr	r2, [pc, #64]	; (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a0f      	ldr	r2, [pc, #60]	; (8005e18 <TIM_Base_SetConfig+0x130>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d103      	bne.n	8005de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	615a      	str	r2, [r3, #20]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <TIM_OC1_SetConfig+0x108>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0302 	bic.w	r3, r3, #2
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2d      	ldr	r2, [pc, #180]	; (8005f28 <TIM_OC1_SetConfig+0x10c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00f      	beq.n	8005e98 <TIM_OC1_SetConfig+0x7c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <TIM_OC1_SetConfig+0x110>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <TIM_OC1_SetConfig+0x7c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a2b      	ldr	r2, [pc, #172]	; (8005f30 <TIM_OC1_SetConfig+0x114>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <TIM_OC1_SetConfig+0x7c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <TIM_OC1_SetConfig+0x118>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC1_SetConfig+0x7c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10c      	bne.n	8005eb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0308 	bic.w	r3, r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 0304 	bic.w	r3, r3, #4
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <TIM_OC1_SetConfig+0x10c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00f      	beq.n	8005eda <TIM_OC1_SetConfig+0xbe>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <TIM_OC1_SetConfig+0x110>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <TIM_OC1_SetConfig+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <TIM_OC1_SetConfig+0x114>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_OC1_SetConfig+0xbe>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <TIM_OC1_SetConfig+0x118>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC1_SetConfig+0xbe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <TIM_OC1_SetConfig+0x11c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d111      	bne.n	8005efe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	fffeff8f 	.word	0xfffeff8f
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800

08005f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0210 	bic.w	r2, r3, #16
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4b34      	ldr	r3, [pc, #208]	; (8006038 <TIM_OC2_SetConfig+0xfc>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f023 0320 	bic.w	r3, r3, #32
 8005f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a29      	ldr	r2, [pc, #164]	; (800603c <TIM_OC2_SetConfig+0x100>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC2_SetConfig+0x68>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a28      	ldr	r2, [pc, #160]	; (8006040 <TIM_OC2_SetConfig+0x104>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10d      	bne.n	8005fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <TIM_OC2_SetConfig+0x100>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xac>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <TIM_OC2_SetConfig+0x104>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xac>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <TIM_OC2_SetConfig+0x108>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xac>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <TIM_OC2_SetConfig+0x10c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <TIM_OC2_SetConfig+0x110>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d113      	bne.n	8006010 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	feff8fff 	.word	0xfeff8fff
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a27      	ldr	r2, [pc, #156]	; (8006148 <TIM_OC3_SetConfig+0xf8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_OC3_SetConfig+0x66>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a26      	ldr	r2, [pc, #152]	; (800614c <TIM_OC3_SetConfig+0xfc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10d      	bne.n	80060d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <TIM_OC3_SetConfig+0xf8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00f      	beq.n	80060fa <TIM_OC3_SetConfig+0xaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <TIM_OC3_SetConfig+0xfc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_OC3_SetConfig+0xaa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <TIM_OC3_SetConfig+0x100>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_OC3_SetConfig+0xaa>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <TIM_OC3_SetConfig+0x104>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC3_SetConfig+0xaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <TIM_OC3_SetConfig+0x108>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a18      	ldr	r2, [pc, #96]	; (8006218 <TIM_OC4_SetConfig+0xbc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00f      	beq.n	80061dc <TIM_OC4_SetConfig+0x80>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a17      	ldr	r2, [pc, #92]	; (800621c <TIM_OC4_SetConfig+0xc0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00b      	beq.n	80061dc <TIM_OC4_SetConfig+0x80>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a16      	ldr	r2, [pc, #88]	; (8006220 <TIM_OC4_SetConfig+0xc4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_OC4_SetConfig+0x80>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a15      	ldr	r2, [pc, #84]	; (8006224 <TIM_OC4_SetConfig+0xc8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC4_SetConfig+0x80>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a14      	ldr	r2, [pc, #80]	; (8006228 <TIM_OC4_SetConfig+0xcc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d109      	bne.n	80061f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	019b      	lsls	r3, r3, #6
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40010400 	.word	0x40010400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <TIM_OC5_SetConfig+0xb0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <TIM_OC5_SetConfig+0xb4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <TIM_OC5_SetConfig+0xb8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <TIM_OC5_SetConfig+0xbc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <TIM_OC5_SetConfig+0xc0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	051b      	lsls	r3, r3, #20
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <TIM_OC6_SetConfig+0xb4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00f      	beq.n	8006368 <TIM_OC6_SetConfig+0x78>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <TIM_OC6_SetConfig+0xb8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_OC6_SetConfig+0x78>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a16      	ldr	r2, [pc, #88]	; (80063ac <TIM_OC6_SetConfig+0xbc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_OC6_SetConfig+0x78>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <TIM_OC6_SetConfig+0xc0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC6_SetConfig+0x78>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a14      	ldr	r2, [pc, #80]	; (80063b4 <TIM_OC6_SetConfig+0xc4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d109      	bne.n	800637c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800636e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800

080063b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4b56      	ldr	r3, [pc, #344]	; (8006528 <TIM_SlaveTimer_SetConfig+0x170>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4b53      	ldr	r3, [pc, #332]	; (800652c <TIM_SlaveTimer_SetConfig+0x174>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fe:	f000 808c 	beq.w	800651a <TIM_SlaveTimer_SetConfig+0x162>
 8006402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006406:	d818      	bhi.n	800643a <TIM_SlaveTimer_SetConfig+0x82>
 8006408:	2b30      	cmp	r3, #48	; 0x30
 800640a:	f000 8086 	beq.w	800651a <TIM_SlaveTimer_SetConfig+0x162>
 800640e:	2b30      	cmp	r3, #48	; 0x30
 8006410:	d807      	bhi.n	8006422 <TIM_SlaveTimer_SetConfig+0x6a>
 8006412:	2b10      	cmp	r3, #16
 8006414:	f000 8081 	beq.w	800651a <TIM_SlaveTimer_SetConfig+0x162>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d07e      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d07c      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006420:	e07c      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8006422:	2b50      	cmp	r3, #80	; 0x50
 8006424:	d065      	beq.n	80064f2 <TIM_SlaveTimer_SetConfig+0x13a>
 8006426:	2b50      	cmp	r3, #80	; 0x50
 8006428:	d802      	bhi.n	8006430 <TIM_SlaveTimer_SetConfig+0x78>
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d038      	beq.n	80064a0 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 800642e:	e075      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d068      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x14e>
 8006434:	2b70      	cmp	r3, #112	; 0x70
 8006436:	d028      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8006438:	e070      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800643a:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <TIM_SlaveTimer_SetConfig+0x178>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d06c      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 8006440:	4a3b      	ldr	r2, [pc, #236]	; (8006530 <TIM_SlaveTimer_SetConfig+0x178>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d810      	bhi.n	8006468 <TIM_SlaveTimer_SetConfig+0xb0>
 8006446:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <TIM_SlaveTimer_SetConfig+0x17c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d066      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 800644c:	4a39      	ldr	r2, [pc, #228]	; (8006534 <TIM_SlaveTimer_SetConfig+0x17c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d803      	bhi.n	800645a <TIM_SlaveTimer_SetConfig+0xa2>
 8006452:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006456:	d060      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8006458:	e060      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <TIM_SlaveTimer_SetConfig+0x180>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d05c      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 8006460:	4a36      	ldr	r2, [pc, #216]	; (800653c <TIM_SlaveTimer_SetConfig+0x184>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d059      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8006466:	e059      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8006468:	4a35      	ldr	r2, [pc, #212]	; (8006540 <TIM_SlaveTimer_SetConfig+0x188>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d055      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 800646e:	4a34      	ldr	r2, [pc, #208]	; (8006540 <TIM_SlaveTimer_SetConfig+0x188>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d803      	bhi.n	800647c <TIM_SlaveTimer_SetConfig+0xc4>
 8006474:	4a33      	ldr	r2, [pc, #204]	; (8006544 <TIM_SlaveTimer_SetConfig+0x18c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d04f      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800647a:	e04f      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800647c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006480:	d04b      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
 8006482:	4a31      	ldr	r2, [pc, #196]	; (8006548 <TIM_SlaveTimer_SetConfig+0x190>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d048      	beq.n	800651a <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8006488:	e048      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f000 f9ff 	bl	800689c <TIM_ETR_SetConfig>
      break;
 800649e:	e03d      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d101      	bne.n	80064ac <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e038      	b.n	800651e <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6a1a      	ldr	r2, [r3, #32]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	621a      	str	r2, [r3, #32]
      break;
 80064f0:	e014      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 f898 	bl	8006634 <TIM_TI1_ConfigInputStage>
      break;
 8006504:	e00a      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	461a      	mov	r2, r3
 8006514:	f000 f8fa 	bl	800670c <TIM_TI2_ConfigInputStage>
      break;
 8006518:	e000      	b.n	800651c <TIM_SlaveTimer_SetConfig+0x164>
      break;
 800651a:	bf00      	nop
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	ffcfff8f 	.word	0xffcfff8f
 800652c:	fffefff8 	.word	0xfffefff8
 8006530:	00100050 	.word	0x00100050
 8006534:	00100020 	.word	0x00100020
 8006538:	00100030 	.word	0x00100030
 800653c:	00100040 	.word	0x00100040
 8006540:	00100070 	.word	0x00100070
 8006544:	00100060 	.word	0x00100060
 8006548:	00200010 	.word	0x00200010

0800654c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a28      	ldr	r2, [pc, #160]	; (8006618 <TIM_TI1_SetConfig+0xcc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01b      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006580:	d017      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a25      	ldr	r2, [pc, #148]	; (800661c <TIM_TI1_SetConfig+0xd0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a24      	ldr	r2, [pc, #144]	; (8006620 <TIM_TI1_SetConfig+0xd4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00f      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a23      	ldr	r2, [pc, #140]	; (8006624 <TIM_TI1_SetConfig+0xd8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00b      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_TI1_SetConfig+0xdc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d007      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_TI1_SetConfig+0xe0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d003      	beq.n	80065b2 <TIM_TI1_SetConfig+0x66>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a20      	ldr	r2, [pc, #128]	; (8006630 <TIM_TI1_SetConfig+0xe4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d101      	bne.n	80065b6 <TIM_TI1_SetConfig+0x6a>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <TIM_TI1_SetConfig+0x6c>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e003      	b.n	80065d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f023 030a 	bic.w	r3, r3, #10
 80065f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 030a 	and.w	r3, r3, #10
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40010400 	.word	0x40010400
 800662c:	40001800 	.word	0x40001800
 8006630:	40014000 	.word	0x40014000

08006634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 030a 	bic.w	r3, r3, #10
 8006670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f023 0210 	bic.w	r2, r3, #16
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f023 0210 	bic.w	r2, r3, #16
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006810:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006822:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	031b      	lsls	r3, r3, #12
 8006828:	b29b      	uxth	r3, r3
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006836:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4b09      	ldr	r3, [pc, #36]	; (8006898 <TIM_ITRx_SetConfig+0x38>)
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	f043 0307 	orr.w	r3, r3, #7
 8006882:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	609a      	str	r2, [r3, #8]
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	ffcfff8f 	.word	0xffcfff8f

0800689c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	431a      	orrs	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e068      	b.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2e      	ldr	r2, [pc, #184]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800692e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01d      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d018      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40001800 	.word	0x40001800

080069ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e065      	b.n	8006ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d115      	bne.n	8006ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	051b      	lsls	r3, r3, #20
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e042      	b.n	8006bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fa ff57 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2224      	movs	r2, #36	; 0x24
 8006b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb2e 	bl	80071c8 <UART_SetConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e022      	b.n	8006bbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f8d2 	bl	8007d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f959 	bl	8007e6c <UART_CheckIdleState>
 8006bba:	4603      	mov	r3, r0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	f040 8083 	bne.w	8006ce6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UART_Transmit+0x28>
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e07b      	b.n	8006ce8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Transmit+0x3a>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e074      	b.n	8006ce8 <HAL_UART_Transmit+0x124>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2221      	movs	r2, #33	; 0x21
 8006c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c16:	f7fb fa1d 	bl	8002054 <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d108      	bne.n	8006c48 <HAL_UART_Transmit+0x84>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	e003      	b.n	8006c50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8006c58:	e02c      	b.n	8006cb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2180      	movs	r1, #128	; 0x80
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f001 f949 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e039      	b.n	8006ce8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e007      	b.n	8006ca2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1cc      	bne.n	8006c5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2140      	movs	r1, #64	; 0x40
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f001 f916 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e006      	b.n	8006ce8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e000      	b.n	8006ce8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
  }
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	f040 80bc 	bne.w	8006e82 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_UART_Receive_IT+0x26>
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0b4      	b.n	8006e84 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Receive_IT+0x38>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0ad      	b.n	8006e84 <HAL_UART_Receive_IT+0x194>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d54:	d10e      	bne.n	8006d74 <HAL_UART_Receive_IT+0x84>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <HAL_UART_Receive_IT+0x7a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d68:	e02d      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	22ff      	movs	r2, #255	; 0xff
 8006d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d72:	e028      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <HAL_UART_Receive_IT+0xa8>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <HAL_UART_Receive_IT+0x9e>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d8c:	e01b      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	227f      	movs	r2, #127	; 0x7f
 8006d92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d96:	e016      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da0:	d10d      	bne.n	8006dbe <HAL_UART_Receive_IT+0xce>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_UART_Receive_IT+0xc4>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	227f      	movs	r2, #127	; 0x7f
 8006dae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006db2:	e008      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	223f      	movs	r2, #63	; 0x3f
 8006db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dbc:	e003      	b.n	8006dc6 <HAL_UART_Receive_IT+0xd6>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2222      	movs	r2, #34	; 0x22
 8006dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0201 	orr.w	r2, r2, #1
 8006de4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dee:	d12a      	bne.n	8006e46 <HAL_UART_Receive_IT+0x156>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d324      	bcc.n	8006e46 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d107      	bne.n	8006e16 <HAL_UART_Receive_IT+0x126>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <HAL_UART_Receive_IT+0x1a0>)
 8006e12:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e14:	e002      	b.n	8006e1c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <HAL_UART_Receive_IT+0x1a4>)
 8006e1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e32:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e42:	609a      	str	r2, [r3, #8]
 8006e44:	e01b      	b.n	8006e7e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d107      	bne.n	8006e60 <HAL_UART_Receive_IT+0x170>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <HAL_UART_Receive_IT+0x1a8>)
 8006e5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e5e:	e002      	b.n	8006e66 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <HAL_UART_Receive_IT+0x1ac>)
 8006e64:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006e7c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e000      	b.n	8006e84 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	08008301 	.word	0x08008301
 8006e94:	080081f9 	.word	0x080081f9
 8006e98:	0800814f 	.word	0x0800814f
 8006e9c:	080080a5 	.word	0x080080a5

08006ea0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d118      	bne.n	8006f02 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8145 	beq.w	8007182 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
      }
      return;
 8006f00:	e13f      	b.n	8007182 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80e8 	beq.w	80070da <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4ba1      	ldr	r3, [pc, #644]	; (8007194 <HAL_UART_IRQHandler+0x2f4>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	4ba0      	ldr	r3, [pc, #640]	; (8007198 <HAL_UART_IRQHandler+0x2f8>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80dd 	beq.w	80070da <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <HAL_UART_IRQHandler+0xac>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f043 0201 	orr.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d010      	beq.n	8006f78 <HAL_UART_IRQHandler+0xd8>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2202      	movs	r2, #2
 8006f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	f043 0204 	orr.w	r2, r3, #4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d010      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x104>
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2204      	movs	r2, #4
 8006f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	f043 0202 	orr.w	r2, r3, #2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d015      	beq.n	8006fda <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4b76      	ldr	r3, [pc, #472]	; (8007194 <HAL_UART_IRQHandler+0x2f4>)
 8006fbc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f043 0208 	orr.w	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d011      	beq.n	8007008 <HAL_UART_IRQHandler+0x168>
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f043 0220 	orr.w	r2, r3, #32
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80b9 	beq.w	8007186 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d011      	beq.n	8007042 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d004      	beq.n	8007062 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800705e:	2b00      	cmp	r3, #0
 8007060:	d031      	beq.n	80070c6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 ffca 	bl	8007ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d123      	bne.n	80070be <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007084:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007092:	4a42      	ldr	r2, [pc, #264]	; (800719c <HAL_UART_IRQHandler+0x2fc>)
 8007094:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709a:	4618      	mov	r0, r3
 800709c:	f7fb f9bc 	bl	8002418 <HAL_DMA_Abort_IT>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d017      	beq.n	80070d6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00f      	b.n	80070d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f87c 	bl	80071b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e00b      	b.n	80070d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f878 	bl	80071b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e007      	b.n	80070d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f874 	bl	80071b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80070d4:	e057      	b.n	8007186 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d6:	bf00      	nop
    return;
 80070d8:	e055      	b.n	8007186 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <HAL_UART_IRQHandler+0x260>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f985 	bl	8008408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070fe:	e045      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	2b00      	cmp	r3, #0
 8007124:	d031      	beq.n	800718a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
    }
    return;
 800712e:	e02c      	b.n	800718a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <HAL_UART_IRQHandler+0x2ac>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 ff93 	bl	8008070 <UART_EndTransmit_IT>
    return;
 800714a:	e01f      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <HAL_UART_IRQHandler+0x2c8>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f965 	bl	8008430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007166:	e011      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00c      	beq.n	800718c <HAL_UART_IRQHandler+0x2ec>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da09      	bge.n	800718c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f94f 	bl	800841c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
      return;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
    return;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_UART_IRQHandler+0x2ec>
    return;
 800718a:	bf00      	nop
  }
}
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	10000001 	.word	0x10000001
 8007198:	04000120 	.word	0x04000120
 800719c:	08008045 	.word	0x08008045

080071a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80071cc:	b08e      	sub	sp, #56	; 0x38
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f6:	4313      	orrs	r3, r2
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	4bc1      	ldr	r3, [pc, #772]	; (8007508 <UART_SetConfig+0x340>)
 8007202:	4013      	ands	r3, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800720a:	430b      	orrs	r3, r1
 800720c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4ab7      	ldr	r2, [pc, #732]	; (800750c <UART_SetConfig+0x344>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723a:	4313      	orrs	r3, r2
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	4bb2      	ldr	r3, [pc, #712]	; (8007510 <UART_SetConfig+0x348>)
 8007246:	4013      	ands	r3, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800724e:	430b      	orrs	r3, r1
 8007250:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	f023 010f 	bic.w	r1, r3, #15
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4aa9      	ldr	r2, [pc, #676]	; (8007514 <UART_SetConfig+0x34c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d177      	bne.n	8007362 <UART_SetConfig+0x19a>
 8007272:	4ba9      	ldr	r3, [pc, #676]	; (8007518 <UART_SetConfig+0x350>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727a:	2b28      	cmp	r3, #40	; 0x28
 800727c:	d86c      	bhi.n	8007358 <UART_SetConfig+0x190>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0xbc>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007329 	.word	0x08007329
 8007288:	08007359 	.word	0x08007359
 800728c:	08007359 	.word	0x08007359
 8007290:	08007359 	.word	0x08007359
 8007294:	08007359 	.word	0x08007359
 8007298:	08007359 	.word	0x08007359
 800729c:	08007359 	.word	0x08007359
 80072a0:	08007359 	.word	0x08007359
 80072a4:	08007331 	.word	0x08007331
 80072a8:	08007359 	.word	0x08007359
 80072ac:	08007359 	.word	0x08007359
 80072b0:	08007359 	.word	0x08007359
 80072b4:	08007359 	.word	0x08007359
 80072b8:	08007359 	.word	0x08007359
 80072bc:	08007359 	.word	0x08007359
 80072c0:	08007359 	.word	0x08007359
 80072c4:	08007339 	.word	0x08007339
 80072c8:	08007359 	.word	0x08007359
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007359 	.word	0x08007359
 80072d4:	08007359 	.word	0x08007359
 80072d8:	08007359 	.word	0x08007359
 80072dc:	08007359 	.word	0x08007359
 80072e0:	08007359 	.word	0x08007359
 80072e4:	08007341 	.word	0x08007341
 80072e8:	08007359 	.word	0x08007359
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007359 	.word	0x08007359
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007359 	.word	0x08007359
 8007300:	08007359 	.word	0x08007359
 8007304:	08007349 	.word	0x08007349
 8007308:	08007359 	.word	0x08007359
 800730c:	08007359 	.word	0x08007359
 8007310:	08007359 	.word	0x08007359
 8007314:	08007359 	.word	0x08007359
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
 8007324:	08007351 	.word	0x08007351
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800732e:	e233      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007336:	e22f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733e:	e22b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007346:	e227      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007348:	2320      	movs	r3, #32
 800734a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734e:	e223      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007356:	e21f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735e:	bf00      	nop
 8007360:	e21a      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a6d      	ldr	r2, [pc, #436]	; (800751c <UART_SetConfig+0x354>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d132      	bne.n	80073d2 <UART_SetConfig+0x20a>
 800736c:	4b6a      	ldr	r3, [pc, #424]	; (8007518 <UART_SetConfig+0x350>)
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	2b05      	cmp	r3, #5
 8007376:	d827      	bhi.n	80073c8 <UART_SetConfig+0x200>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x1b8>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007399 	.word	0x08007399
 8007384:	080073a1 	.word	0x080073a1
 8007388:	080073a9 	.word	0x080073a9
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800739e:	e1fb      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073a6:	e1f7      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ae:	e1f3      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073b6:	e1ef      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073b8:	2320      	movs	r3, #32
 80073ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073be:	e1eb      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073c6:	e1e7      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ce:	bf00      	nop
 80073d0:	e1e2      	b.n	8007798 <UART_SetConfig+0x5d0>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a52      	ldr	r2, [pc, #328]	; (8007520 <UART_SetConfig+0x358>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d132      	bne.n	8007442 <UART_SetConfig+0x27a>
 80073dc:	4b4e      	ldr	r3, [pc, #312]	; (8007518 <UART_SetConfig+0x350>)
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d827      	bhi.n	8007438 <UART_SetConfig+0x270>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0x228>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007409 	.word	0x08007409
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007419 	.word	0x08007419
 80073fc:	08007421 	.word	0x08007421
 8007400:	08007429 	.word	0x08007429
 8007404:	08007431 	.word	0x08007431
 8007408:	2300      	movs	r3, #0
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740e:	e1c3      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007416:	e1bf      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741e:	e1bb      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007426:	e1b7      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007428:	2320      	movs	r3, #32
 800742a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742e:	e1b3      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007436:	e1af      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007438:	2380      	movs	r3, #128	; 0x80
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	bf00      	nop
 8007440:	e1aa      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a37      	ldr	r2, [pc, #220]	; (8007524 <UART_SetConfig+0x35c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d132      	bne.n	80074b2 <UART_SetConfig+0x2ea>
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <UART_SetConfig+0x350>)
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	2b05      	cmp	r3, #5
 8007456:	d827      	bhi.n	80074a8 <UART_SetConfig+0x2e0>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x298>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007479 	.word	0x08007479
 8007464:	08007481 	.word	0x08007481
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747e:	e18b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007480:	2304      	movs	r3, #4
 8007482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007486:	e187      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007488:	2308      	movs	r3, #8
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e183      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007490:	2310      	movs	r3, #16
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e17f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007498:	2320      	movs	r3, #32
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	e17b      	b.n	8007798 <UART_SetConfig+0x5d0>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e177      	b.n	8007798 <UART_SetConfig+0x5d0>
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ae:	bf00      	nop
 80074b0:	e172      	b.n	8007798 <UART_SetConfig+0x5d0>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <UART_SetConfig+0x360>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d144      	bne.n	8007546 <UART_SetConfig+0x37e>
 80074bc:	4b16      	ldr	r3, [pc, #88]	; (8007518 <UART_SetConfig+0x350>)
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d839      	bhi.n	800753c <UART_SetConfig+0x374>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0x308>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e9 	.word	0x080074e9
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074f9 	.word	0x080074f9
 80074dc:	08007501 	.word	0x08007501
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	08007535 	.word	0x08007535
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ee:	e153      	b.n	8007798 <UART_SetConfig+0x5d0>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e14f      	b.n	8007798 <UART_SetConfig+0x5d0>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fe:	e14b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007506:	e147      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007508:	cfff69f3 	.word	0xcfff69f3
 800750c:	58000c00 	.word	0x58000c00
 8007510:	11fff4ff 	.word	0x11fff4ff
 8007514:	40011000 	.word	0x40011000
 8007518:	58024400 	.word	0x58024400
 800751c:	40004400 	.word	0x40004400
 8007520:	40004800 	.word	0x40004800
 8007524:	40004c00 	.word	0x40004c00
 8007528:	40005000 	.word	0x40005000
 800752c:	2320      	movs	r3, #32
 800752e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007532:	e131      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753a:	e12d      	b.n	8007798 <UART_SetConfig+0x5d0>
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007542:	bf00      	nop
 8007544:	e128      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4ab6      	ldr	r2, [pc, #728]	; (8007824 <UART_SetConfig+0x65c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d178      	bne.n	8007642 <UART_SetConfig+0x47a>
 8007550:	4bb5      	ldr	r3, [pc, #724]	; (8007828 <UART_SetConfig+0x660>)
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007558:	2b28      	cmp	r3, #40	; 0x28
 800755a:	d86d      	bhi.n	8007638 <UART_SetConfig+0x470>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x39c>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007609 	.word	0x08007609
 8007568:	08007639 	.word	0x08007639
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	08007639 	.word	0x08007639
 8007580:	08007639 	.word	0x08007639
 8007584:	08007611 	.word	0x08007611
 8007588:	08007639 	.word	0x08007639
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	08007639 	.word	0x08007639
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007619 	.word	0x08007619
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007631 	.word	0x08007631
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760e:	e0c3      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007610:	2304      	movs	r3, #4
 8007612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007616:	e0bf      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007618:	2308      	movs	r3, #8
 800761a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761e:	e0bb      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007626:	e0b7      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007628:	2320      	movs	r3, #32
 800762a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762e:	e0b3      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007636:	e0af      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763e:	bf00      	nop
 8007640:	e0aa      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a79      	ldr	r2, [pc, #484]	; (800782c <UART_SetConfig+0x664>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d132      	bne.n	80076b2 <UART_SetConfig+0x4ea>
 800764c:	4b76      	ldr	r3, [pc, #472]	; (8007828 <UART_SetConfig+0x660>)
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	2b05      	cmp	r3, #5
 8007656:	d827      	bhi.n	80076a8 <UART_SetConfig+0x4e0>
 8007658:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x498>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	08007679 	.word	0x08007679
 8007664:	08007681 	.word	0x08007681
 8007668:	08007689 	.word	0x08007689
 800766c:	08007691 	.word	0x08007691
 8007670:	08007699 	.word	0x08007699
 8007674:	080076a1 	.word	0x080076a1
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767e:	e08b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007686:	e087      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768e:	e083      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007696:	e07f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007698:	2320      	movs	r3, #32
 800769a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769e:	e07b      	b.n	8007798 <UART_SetConfig+0x5d0>
 80076a0:	2340      	movs	r3, #64	; 0x40
 80076a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a6:	e077      	b.n	8007798 <UART_SetConfig+0x5d0>
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ae:	bf00      	nop
 80076b0:	e072      	b.n	8007798 <UART_SetConfig+0x5d0>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a5e      	ldr	r2, [pc, #376]	; (8007830 <UART_SetConfig+0x668>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d132      	bne.n	8007722 <UART_SetConfig+0x55a>
 80076bc:	4b5a      	ldr	r3, [pc, #360]	; (8007828 <UART_SetConfig+0x660>)
 80076be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	2b05      	cmp	r3, #5
 80076c6:	d827      	bhi.n	8007718 <UART_SetConfig+0x550>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x508>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e9 	.word	0x080076e9
 80076d4:	080076f1 	.word	0x080076f1
 80076d8:	080076f9 	.word	0x080076f9
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	2300      	movs	r3, #0
 80076ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ee:	e053      	b.n	8007798 <UART_SetConfig+0x5d0>
 80076f0:	2304      	movs	r3, #4
 80076f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076f6:	e04f      	b.n	8007798 <UART_SetConfig+0x5d0>
 80076f8:	2308      	movs	r3, #8
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fe:	e04b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007700:	2310      	movs	r3, #16
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007706:	e047      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007708:	2320      	movs	r3, #32
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770e:	e043      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007710:	2340      	movs	r3, #64	; 0x40
 8007712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007716:	e03f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	bf00      	nop
 8007720:	e03a      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a43      	ldr	r2, [pc, #268]	; (8007834 <UART_SetConfig+0x66c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d132      	bne.n	8007792 <UART_SetConfig+0x5ca>
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <UART_SetConfig+0x660>)
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	2b05      	cmp	r3, #5
 8007736:	d827      	bhi.n	8007788 <UART_SetConfig+0x5c0>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0x578>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007759 	.word	0x08007759
 8007744:	08007761 	.word	0x08007761
 8007748:	08007769 	.word	0x08007769
 800774c:	08007771 	.word	0x08007771
 8007750:	08007779 	.word	0x08007779
 8007754:	08007781 	.word	0x08007781
 8007758:	2302      	movs	r3, #2
 800775a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775e:	e01b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e017      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e013      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e00f      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007778:	2320      	movs	r3, #32
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e00b      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e007      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007788:	2380      	movs	r3, #128	; 0x80
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	bf00      	nop
 8007790:	e002      	b.n	8007798 <UART_SetConfig+0x5d0>
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a25      	ldr	r2, [pc, #148]	; (8007834 <UART_SetConfig+0x66c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	f040 80b8 	bne.w	8007914 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d019      	beq.n	80077e0 <UART_SetConfig+0x618>
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	dc04      	bgt.n	80077ba <UART_SetConfig+0x5f2>
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d009      	beq.n	80077c8 <UART_SetConfig+0x600>
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d00b      	beq.n	80077d0 <UART_SetConfig+0x608>
 80077b8:	e042      	b.n	8007840 <UART_SetConfig+0x678>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d02b      	beq.n	8007816 <UART_SetConfig+0x64e>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d02c      	beq.n	800781c <UART_SetConfig+0x654>
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d014      	beq.n	80077f0 <UART_SetConfig+0x628>
 80077c6:	e03b      	b.n	8007840 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077c8:	f7fd f94c 	bl	8004a64 <HAL_RCCEx_GetD3PCLK1Freq>
 80077cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80077ce:	e03d      	b.n	800784c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fd f95b 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077de:	e035      	b.n	800784c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e0:	f107 0308 	add.w	r3, r7, #8
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fa9f 	bl	8004d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ee:	e02d      	b.n	800784c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <UART_SetConfig+0x660>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <UART_SetConfig+0x660>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	08db      	lsrs	r3, r3, #3
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <UART_SetConfig+0x670>)
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800780e:	e01d      	b.n	800784c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8007810:	4b09      	ldr	r3, [pc, #36]	; (8007838 <UART_SetConfig+0x670>)
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007814:	e01a      	b.n	800784c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <UART_SetConfig+0x674>)
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800781a:	e017      	b.n	800784c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007822:	e013      	b.n	800784c <UART_SetConfig+0x684>
 8007824:	40011400 	.word	0x40011400
 8007828:	58024400 	.word	0x58024400
 800782c:	40007800 	.word	0x40007800
 8007830:	40007c00 	.word	0x40007c00
 8007834:	58000c00 	.word	0x58000c00
 8007838:	03d09000 	.word	0x03d09000
 800783c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800784a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 824d 	beq.w	8007cee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	4aad      	ldr	r2, [pc, #692]	; (8007b10 <UART_SetConfig+0x948>)
 800785a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800785e:	461a      	mov	r2, r3
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	fbb3 f3f2 	udiv	r3, r3, r2
 8007866:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	4413      	add	r3, r2
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	429a      	cmp	r2, r3
 8007876:	d305      	bcc.n	8007884 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	429a      	cmp	r2, r3
 8007882:	d903      	bls.n	800788c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800788a:	e230      	b.n	8007cee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	4618      	mov	r0, r3
 8007890:	f04f 0100 	mov.w	r1, #0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	4a9d      	ldr	r2, [pc, #628]	; (8007b10 <UART_SetConfig+0x948>)
 800789a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	461a      	mov	r2, r3
 80078a6:	4623      	mov	r3, r4
 80078a8:	f7f8 fd72 	bl	8000390 <__aeabi_uldivmod>
 80078ac:	4603      	mov	r3, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4619      	mov	r1, r3
 80078b2:	4622      	mov	r2, r4
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f04f 0400 	mov.w	r4, #0
 80078bc:	0214      	lsls	r4, r2, #8
 80078be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078c2:	020b      	lsls	r3, r1, #8
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6852      	ldr	r2, [r2, #4]
 80078c8:	0852      	lsrs	r2, r2, #1
 80078ca:	4611      	mov	r1, r2
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	eb13 0b01 	adds.w	fp, r3, r1
 80078d4:	eb44 0c02 	adc.w	ip, r4, r2
 80078d8:	4658      	mov	r0, fp
 80078da:	4661      	mov	r1, ip
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	461a      	mov	r2, r3
 80078e6:	4623      	mov	r3, r4
 80078e8:	f7f8 fd52 	bl	8000390 <__aeabi_uldivmod>
 80078ec:	4603      	mov	r3, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f8:	d308      	bcc.n	800790c <UART_SetConfig+0x744>
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007900:	d204      	bcs.n	800790c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	e1f0      	b.n	8007cee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007912:	e1ec      	b.n	8007cee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791c:	f040 8100 	bne.w	8007b20 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8007920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	f200 80b7 	bhi.w	8007a98 <UART_SetConfig+0x8d0>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0x768>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007a35 	.word	0x08007a35
 8007934:	08007a3d 	.word	0x08007a3d
 8007938:	08007a99 	.word	0x08007a99
 800793c:	08007a99 	.word	0x08007a99
 8007940:	08007a45 	.word	0x08007a45
 8007944:	08007a99 	.word	0x08007a99
 8007948:	08007a99 	.word	0x08007a99
 800794c:	08007a99 	.word	0x08007a99
 8007950:	08007a55 	.word	0x08007a55
 8007954:	08007a99 	.word	0x08007a99
 8007958:	08007a99 	.word	0x08007a99
 800795c:	08007a99 	.word	0x08007a99
 8007960:	08007a99 	.word	0x08007a99
 8007964:	08007a99 	.word	0x08007a99
 8007968:	08007a99 	.word	0x08007a99
 800796c:	08007a99 	.word	0x08007a99
 8007970:	08007a65 	.word	0x08007a65
 8007974:	08007a99 	.word	0x08007a99
 8007978:	08007a99 	.word	0x08007a99
 800797c:	08007a99 	.word	0x08007a99
 8007980:	08007a99 	.word	0x08007a99
 8007984:	08007a99 	.word	0x08007a99
 8007988:	08007a99 	.word	0x08007a99
 800798c:	08007a99 	.word	0x08007a99
 8007990:	08007a99 	.word	0x08007a99
 8007994:	08007a99 	.word	0x08007a99
 8007998:	08007a99 	.word	0x08007a99
 800799c:	08007a99 	.word	0x08007a99
 80079a0:	08007a99 	.word	0x08007a99
 80079a4:	08007a99 	.word	0x08007a99
 80079a8:	08007a99 	.word	0x08007a99
 80079ac:	08007a99 	.word	0x08007a99
 80079b0:	08007a8b 	.word	0x08007a8b
 80079b4:	08007a99 	.word	0x08007a99
 80079b8:	08007a99 	.word	0x08007a99
 80079bc:	08007a99 	.word	0x08007a99
 80079c0:	08007a99 	.word	0x08007a99
 80079c4:	08007a99 	.word	0x08007a99
 80079c8:	08007a99 	.word	0x08007a99
 80079cc:	08007a99 	.word	0x08007a99
 80079d0:	08007a99 	.word	0x08007a99
 80079d4:	08007a99 	.word	0x08007a99
 80079d8:	08007a99 	.word	0x08007a99
 80079dc:	08007a99 	.word	0x08007a99
 80079e0:	08007a99 	.word	0x08007a99
 80079e4:	08007a99 	.word	0x08007a99
 80079e8:	08007a99 	.word	0x08007a99
 80079ec:	08007a99 	.word	0x08007a99
 80079f0:	08007a99 	.word	0x08007a99
 80079f4:	08007a99 	.word	0x08007a99
 80079f8:	08007a99 	.word	0x08007a99
 80079fc:	08007a99 	.word	0x08007a99
 8007a00:	08007a99 	.word	0x08007a99
 8007a04:	08007a99 	.word	0x08007a99
 8007a08:	08007a99 	.word	0x08007a99
 8007a0c:	08007a99 	.word	0x08007a99
 8007a10:	08007a99 	.word	0x08007a99
 8007a14:	08007a99 	.word	0x08007a99
 8007a18:	08007a99 	.word	0x08007a99
 8007a1c:	08007a99 	.word	0x08007a99
 8007a20:	08007a99 	.word	0x08007a99
 8007a24:	08007a99 	.word	0x08007a99
 8007a28:	08007a99 	.word	0x08007a99
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007a91 	.word	0x08007a91
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7fc f8ba 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8007a38:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a3a:	e033      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fc f8cc 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8007a40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a42:	e02f      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fd f821 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a52:	e027      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fd f965 	bl	8004d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a62:	e01f      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a64:	4b2b      	ldr	r3, [pc, #172]	; (8007b14 <UART_SetConfig+0x94c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a70:	4b28      	ldr	r3, [pc, #160]	; (8007b14 <UART_SetConfig+0x94c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	08db      	lsrs	r3, r3, #3
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <UART_SetConfig+0x950>)
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a82:	e00f      	b.n	8007aa4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007a84:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <UART_SetConfig+0x950>)
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a88:	e00c      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a8a:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <UART_SetConfig+0x954>)
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a8e:	e009      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a96:	e005      	b.n	8007aa4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8121 	beq.w	8007cee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <UART_SetConfig+0x948>)
 8007ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007abe:	005a      	lsls	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	441a      	add	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d916      	bls.n	8007b08 <UART_SetConfig+0x940>
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae0:	d212      	bcs.n	8007b08 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f023 030f 	bic.w	r3, r3, #15
 8007aea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007afa:	4313      	orrs	r3, r2
 8007afc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b04:	60da      	str	r2, [r3, #12]
 8007b06:	e0f2      	b.n	8007cee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b0e:	e0ee      	b.n	8007cee <UART_SetConfig+0xb26>
 8007b10:	0800de28 	.word	0x0800de28
 8007b14:	58024400 	.word	0x58024400
 8007b18:	03d09000 	.word	0x03d09000
 8007b1c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	f200 80b7 	bhi.w	8007c98 <UART_SetConfig+0xad0>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0x968>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007c35 	.word	0x08007c35
 8007b34:	08007c3d 	.word	0x08007c3d
 8007b38:	08007c99 	.word	0x08007c99
 8007b3c:	08007c99 	.word	0x08007c99
 8007b40:	08007c45 	.word	0x08007c45
 8007b44:	08007c99 	.word	0x08007c99
 8007b48:	08007c99 	.word	0x08007c99
 8007b4c:	08007c99 	.word	0x08007c99
 8007b50:	08007c55 	.word	0x08007c55
 8007b54:	08007c99 	.word	0x08007c99
 8007b58:	08007c99 	.word	0x08007c99
 8007b5c:	08007c99 	.word	0x08007c99
 8007b60:	08007c99 	.word	0x08007c99
 8007b64:	08007c99 	.word	0x08007c99
 8007b68:	08007c99 	.word	0x08007c99
 8007b6c:	08007c99 	.word	0x08007c99
 8007b70:	08007c65 	.word	0x08007c65
 8007b74:	08007c99 	.word	0x08007c99
 8007b78:	08007c99 	.word	0x08007c99
 8007b7c:	08007c99 	.word	0x08007c99
 8007b80:	08007c99 	.word	0x08007c99
 8007b84:	08007c99 	.word	0x08007c99
 8007b88:	08007c99 	.word	0x08007c99
 8007b8c:	08007c99 	.word	0x08007c99
 8007b90:	08007c99 	.word	0x08007c99
 8007b94:	08007c99 	.word	0x08007c99
 8007b98:	08007c99 	.word	0x08007c99
 8007b9c:	08007c99 	.word	0x08007c99
 8007ba0:	08007c99 	.word	0x08007c99
 8007ba4:	08007c99 	.word	0x08007c99
 8007ba8:	08007c99 	.word	0x08007c99
 8007bac:	08007c99 	.word	0x08007c99
 8007bb0:	08007c8b 	.word	0x08007c8b
 8007bb4:	08007c99 	.word	0x08007c99
 8007bb8:	08007c99 	.word	0x08007c99
 8007bbc:	08007c99 	.word	0x08007c99
 8007bc0:	08007c99 	.word	0x08007c99
 8007bc4:	08007c99 	.word	0x08007c99
 8007bc8:	08007c99 	.word	0x08007c99
 8007bcc:	08007c99 	.word	0x08007c99
 8007bd0:	08007c99 	.word	0x08007c99
 8007bd4:	08007c99 	.word	0x08007c99
 8007bd8:	08007c99 	.word	0x08007c99
 8007bdc:	08007c99 	.word	0x08007c99
 8007be0:	08007c99 	.word	0x08007c99
 8007be4:	08007c99 	.word	0x08007c99
 8007be8:	08007c99 	.word	0x08007c99
 8007bec:	08007c99 	.word	0x08007c99
 8007bf0:	08007c99 	.word	0x08007c99
 8007bf4:	08007c99 	.word	0x08007c99
 8007bf8:	08007c99 	.word	0x08007c99
 8007bfc:	08007c99 	.word	0x08007c99
 8007c00:	08007c99 	.word	0x08007c99
 8007c04:	08007c99 	.word	0x08007c99
 8007c08:	08007c99 	.word	0x08007c99
 8007c0c:	08007c99 	.word	0x08007c99
 8007c10:	08007c99 	.word	0x08007c99
 8007c14:	08007c99 	.word	0x08007c99
 8007c18:	08007c99 	.word	0x08007c99
 8007c1c:	08007c99 	.word	0x08007c99
 8007c20:	08007c99 	.word	0x08007c99
 8007c24:	08007c99 	.word	0x08007c99
 8007c28:	08007c99 	.word	0x08007c99
 8007c2c:	08007c99 	.word	0x08007c99
 8007c30:	08007c91 	.word	0x08007c91
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fb ffba 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8007c38:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c3a:	e033      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c3c:	f7fb ffcc 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8007c40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c42:	e02f      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c44:	f107 0314 	add.w	r3, r7, #20
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fc ff21 	bl	8004a90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c52:	e027      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c54:	f107 0308 	add.w	r3, r7, #8
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd f865 	bl	8004d28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c62:	e01f      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c64:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <UART_SetConfig+0xb50>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c70:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <UART_SetConfig+0xb50>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	08db      	lsrs	r3, r3, #3
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	4a28      	ldr	r2, [pc, #160]	; (8007d1c <UART_SetConfig+0xb54>)
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c82:	e00f      	b.n	8007ca4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007c84:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <UART_SetConfig+0xb54>)
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c88:	e00c      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <UART_SetConfig+0xb58>)
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c8e:	e009      	b.n	8007ca4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c96:	e005      	b.n	8007ca4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d021      	beq.n	8007cee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <UART_SetConfig+0xb5c>)
 8007cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	441a      	add	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d908      	bls.n	8007ce8 <UART_SetConfig+0xb20>
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cdc:	d204      	bcs.n	8007ce8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	e002      	b.n	8007cee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007d0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3738      	adds	r7, #56	; 0x38
 8007d12:	46bd      	mov	sp, r7
 8007d14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	003d0900 	.word	0x003d0900
 8007d24:	0800de28 	.word	0x0800de28

08007d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e26:	d10a      	bne.n	8007e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e7c:	f7fa f8ea 	bl	8002054 <HAL_GetTick>
 8007e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d10e      	bne.n	8007eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f82c 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e022      	b.n	8007ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d10e      	bne.n	8007eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f816 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e00c      	b.n	8007ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0c:	e062      	b.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d05e      	beq.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f16:	f7fa f89d 	bl	8002054 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d11d      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0201 	bic.w	r2, r2, #1
 8007f4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e045      	b.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d02e      	beq.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f84:	d126      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e00f      	b.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d08d      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008012:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6899      	ldr	r1, [r3, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b08      	ldr	r3, [pc, #32]	; (8008040 <UART_EndRxTransfer+0x44>)
 8008020:	400b      	ands	r3, r1
 8008022:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	effffffe 	.word	0xeffffffe

08008044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7ff f8a6 	bl	80071b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008086:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff f882 	bl	80071a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080b2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	d13b      	bne.n	8008136 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080c6:	89bb      	ldrh	r3, [r7, #12]
 80080c8:	b2d9      	uxtb	r1, r3
 80080ca:	89fb      	ldrh	r3, [r7, #14]
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	400a      	ands	r2, r1
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d122      	bne.n	8008146 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800810e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0201 	bic.w	r2, r2, #1
 800811e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7f9 fcb6 	bl	8001aa0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008134:	e007      	b.n	8008146 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0208 	orr.w	r2, r2, #8
 8008144:	619a      	str	r2, [r3, #24]
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800815c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008164:	2b22      	cmp	r3, #34	; 0x22
 8008166:	d13b      	bne.n	80081e0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008174:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008176:	89ba      	ldrh	r2, [r7, #12]
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	4013      	ands	r3, r2
 800817c:	b29a      	uxth	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d122      	bne.n	80081f0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0201 	bic.w	r2, r2, #1
 80081c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f9 fc61 	bl	8001aa0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081de:	e007      	b.n	80081f0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0208 	orr.w	r2, r2, #8
 80081ee:	619a      	str	r2, [r3, #24]
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008206:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800820e:	2b22      	cmp	r3, #34	; 0x22
 8008210:	d166      	bne.n	80082e0 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008218:	81fb      	strh	r3, [r7, #14]
 800821a:	e03d      	b.n	8008298 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008224:	893b      	ldrh	r3, [r7, #8]
 8008226:	b2d9      	uxtb	r1, r3
 8008228:	89bb      	ldrh	r3, [r7, #12]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	400a      	ands	r2, r1
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d119      	bne.n	8008292 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800826c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800827a:	400b      	ands	r3, r1
 800827c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7f9 fc07 	bl	8001aa0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008292:	89fb      	ldrh	r3, [r7, #14]
 8008294:	3b01      	subs	r3, #1
 8008296:	81fb      	strh	r3, [r7, #14]
 8008298:	89fb      	ldrh	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1be      	bne.n	800821c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082a4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082a6:	897b      	ldrh	r3, [r7, #10]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d021      	beq.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082b2:	897a      	ldrh	r2, [r7, #10]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d21b      	bcs.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80082c6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a0c      	ldr	r2, [pc, #48]	; (80082fc <UART_RxISR_8BIT_FIFOEN+0x104>)
 80082cc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0220 	orr.w	r2, r2, #32
 80082dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082de:	e007      	b.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0208 	orr.w	r2, r2, #8
 80082ee:	619a      	str	r2, [r3, #24]
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	effffffe 	.word	0xeffffffe
 80082fc:	080080a5 	.word	0x080080a5

08008300 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800830e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008316:	2b22      	cmp	r3, #34	; 0x22
 8008318:	d166      	bne.n	80083e8 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008320:	82fb      	strh	r3, [r7, #22]
 8008322:	e03d      	b.n	80083a0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008330:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008332:	8a3a      	ldrh	r2, [r7, #16]
 8008334:	8abb      	ldrh	r3, [r7, #20]
 8008336:	4013      	ands	r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d119      	bne.n	800839a <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008374:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6899      	ldr	r1, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8008382:	400b      	ands	r3, r1
 8008384:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7f9 fb83 	bl	8001aa0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800839a:	8afb      	ldrh	r3, [r7, #22]
 800839c:	3b01      	subs	r3, #1
 800839e:	82fb      	strh	r3, [r7, #22]
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1be      	bne.n	8008324 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ac:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083ae:	8a7b      	ldrh	r3, [r7, #18]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d021      	beq.n	80083f8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083ba:	8a7a      	ldrh	r2, [r7, #18]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d21b      	bcs.n	80083f8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80083ce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80083d4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0220 	orr.w	r2, r2, #32
 80083e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083e6:	e007      	b.n	80083f8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	619a      	str	r2, [r3, #24]
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	effffffe 	.word	0xeffffffe
 8008404:	0800814f 	.word	0x0800814f

08008408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d101      	bne.n	800845a <HAL_UARTEx_DisableFifoMode+0x16>
 8008456:	2302      	movs	r3, #2
 8008458:	e027      	b.n	80084aa <HAL_UARTEx_DisableFifoMode+0x66>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2224      	movs	r2, #36	; 0x24
 8008466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008488:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ca:	2302      	movs	r3, #2
 80084cc:	e02d      	b.n	800852a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2224      	movs	r2, #36	; 0x24
 80084da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0201 	bic.w	r2, r2, #1
 80084f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f850 	bl	80085b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008546:	2302      	movs	r3, #2
 8008548:	e02d      	b.n	80085a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2224      	movs	r2, #36	; 0x24
 8008556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f812 	bl	80085b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80085b8:	4a2f      	ldr	r2, [pc, #188]	; (8008678 <UARTEx_SetNbDataToProcess+0xc8>)
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80085c6:	4a2d      	ldr	r2, [pc, #180]	; (800867c <UARTEx_SetNbDataToProcess+0xcc>)
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ec:	e03d      	b.n	800866a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ee:	2310      	movs	r3, #16
 80085f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f2:	2310      	movs	r3, #16
 80085f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	0e5b      	lsrs	r3, r3, #25
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	0f5b      	lsrs	r3, r3, #29
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008616:	7fbb      	ldrb	r3, [r7, #30]
 8008618:	7f3a      	ldrb	r2, [r7, #28]
 800861a:	f107 0120 	add.w	r1, r7, #32
 800861e:	440a      	add	r2, r1
 8008620:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	7f3a      	ldrb	r2, [r7, #28]
 800862a:	f107 0120 	add.w	r1, r7, #32
 800862e:	440a      	add	r2, r1
 8008630:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008634:	fb93 f3f2 	sdiv	r3, r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008640:	7ffb      	ldrb	r3, [r7, #31]
 8008642:	7f7a      	ldrb	r2, [r7, #29]
 8008644:	f107 0120 	add.w	r1, r7, #32
 8008648:	440a      	add	r2, r1
 800864a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800864e:	fb02 f303 	mul.w	r3, r2, r3
 8008652:	7f7a      	ldrb	r2, [r7, #29]
 8008654:	f107 0120 	add.w	r1, r7, #32
 8008658:	440a      	add	r2, r1
 800865a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800865e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008662:	b29a      	uxth	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800866a:	bf00      	nop
 800866c:	3724      	adds	r7, #36	; 0x24
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	0800ddcc 	.word	0x0800ddcc
 800867c:	0800ddd4 	.word	0x0800ddd4

08008680 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008696:	f3ef 8305 	mrs	r3, IPSR
 800869a:	60bb      	str	r3, [r7, #8]
  return(result);
 800869c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10f      	bne.n	80086c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a2:	f3ef 8310 	mrs	r3, PRIMASK
 80086a6:	607b      	str	r3, [r7, #4]
  return(result);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086ae:	f3ef 8311 	mrs	r3, BASEPRI
 80086b2:	603b      	str	r3, [r7, #0]
  return(result);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d007      	beq.n	80086ca <osKernelInitialize+0x3a>
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <osKernelInitialize+0x64>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d103      	bne.n	80086ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80086c2:	f06f 0305 	mvn.w	r3, #5
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e00c      	b.n	80086e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <osKernelInitialize+0x64>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d105      	bne.n	80086de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <osKernelInitialize+0x64>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e002      	b.n	80086e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	24000344 	.word	0x24000344

080086f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086fe:	f3ef 8305 	mrs	r3, IPSR
 8008702:	60bb      	str	r3, [r7, #8]
  return(result);
 8008704:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10f      	bne.n	800872a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870a:	f3ef 8310 	mrs	r3, PRIMASK
 800870e:	607b      	str	r3, [r7, #4]
  return(result);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008716:	f3ef 8311 	mrs	r3, BASEPRI
 800871a:	603b      	str	r3, [r7, #0]
  return(result);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <osKernelStart+0x3a>
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <osKernelStart+0x68>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <osKernelStart+0x3a>
    stat = osErrorISR;
 800872a:	f06f 0305 	mvn.w	r3, #5
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e010      	b.n	8008754 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008732:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <osKernelStart+0x68>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d109      	bne.n	800874e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800873a:	f7ff ffa1 	bl	8008680 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <osKernelStart+0x68>)
 8008740:	2202      	movs	r2, #2
 8008742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008744:	f001 f8b0 	bl	80098a8 <vTaskStartScheduler>
      stat = osOK;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e002      	b.n	8008754 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295
 8008752:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008754:	68fb      	ldr	r3, [r7, #12]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	24000344 	.word	0x24000344

08008764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b090      	sub	sp, #64	; 0x40
 8008768:	af04      	add	r7, sp, #16
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008774:	f3ef 8305 	mrs	r3, IPSR
 8008778:	61fb      	str	r3, [r7, #28]
  return(result);
 800877a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 808f 	bne.w	80088a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008782:	f3ef 8310 	mrs	r3, PRIMASK
 8008786:	61bb      	str	r3, [r7, #24]
  return(result);
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800878e:	f3ef 8311 	mrs	r3, BASEPRI
 8008792:	617b      	str	r3, [r7, #20]
  return(result);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <osThreadNew+0x3e>
 800879a:	4b44      	ldr	r3, [pc, #272]	; (80088ac <osThreadNew+0x148>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d07e      	beq.n	80088a0 <osThreadNew+0x13c>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d07b      	beq.n	80088a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80087a8:	2380      	movs	r3, #128	; 0x80
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80087ac:	2318      	movs	r3, #24
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d045      	beq.n	800884c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <osThreadNew+0x6a>
        name = attr->name;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <osThreadNew+0x90>
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	2b38      	cmp	r3, #56	; 0x38
 80087e6:	d805      	bhi.n	80087f4 <osThreadNew+0x90>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <osThreadNew+0x94>
        return (NULL);
 80087f4:	2300      	movs	r3, #0
 80087f6:	e054      	b.n	80088a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	089b      	lsrs	r3, r3, #2
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00e      	beq.n	800882e <osThreadNew+0xca>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b5b      	cmp	r3, #91	; 0x5b
 8008816:	d90a      	bls.n	800882e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800881c:	2b00      	cmp	r3, #0
 800881e:	d006      	beq.n	800882e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <osThreadNew+0xca>
        mem = 1;
 8008828:	2301      	movs	r3, #1
 800882a:	623b      	str	r3, [r7, #32]
 800882c:	e010      	b.n	8008850 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <osThreadNew+0xec>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d108      	bne.n	8008850 <osThreadNew+0xec>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d104      	bne.n	8008850 <osThreadNew+0xec>
          mem = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	623b      	str	r3, [r7, #32]
 800884a:	e001      	b.n	8008850 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d110      	bne.n	8008878 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800885e:	9202      	str	r2, [sp, #8]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800886a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fe49 	bl	8009504 <xTaskCreateStatic>
 8008872:	4603      	mov	r3, r0
 8008874:	613b      	str	r3, [r7, #16]
 8008876:	e013      	b.n	80088a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d110      	bne.n	80088a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	b29a      	uxth	r2, r3
 8008882:	f107 0310 	add.w	r3, r7, #16
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fe91 	bl	80095b8 <xTaskCreate>
 8008896:	4603      	mov	r3, r0
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <osThreadNew+0x13c>
          hTask = NULL;
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088a0:	693b      	ldr	r3, [r7, #16]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3730      	adds	r7, #48	; 0x30
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	24000344 	.word	0x24000344

080088b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b8:	f3ef 8305 	mrs	r3, IPSR
 80088bc:	613b      	str	r3, [r7, #16]
  return(result);
 80088be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10f      	bne.n	80088e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088c4:	f3ef 8310 	mrs	r3, PRIMASK
 80088c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d105      	bne.n	80088dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088d0:	f3ef 8311 	mrs	r3, BASEPRI
 80088d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <osDelay+0x3c>
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <osDelay+0x58>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d103      	bne.n	80088ec <osDelay+0x3c>
    stat = osErrorISR;
 80088e4:	f06f 0305 	mvn.w	r3, #5
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e007      	b.n	80088fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 ffa2 	bl	8009840 <vTaskDelay>
    }
  }

  return (stat);
 80088fc:	697b      	ldr	r3, [r7, #20]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	24000344 	.word	0x24000344

0800890c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a07      	ldr	r2, [pc, #28]	; (8008938 <vApplicationGetIdleTaskMemory+0x2c>)
 800891c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <vApplicationGetIdleTaskMemory+0x30>)
 8008922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2280      	movs	r2, #128	; 0x80
 8008928:	601a      	str	r2, [r3, #0]
}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	24000348 	.word	0x24000348
 800893c:	240003a4 	.word	0x240003a4

08008940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a07      	ldr	r2, [pc, #28]	; (800896c <vApplicationGetTimerTaskMemory+0x2c>)
 8008950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	4a06      	ldr	r2, [pc, #24]	; (8008970 <vApplicationGetTimerTaskMemory+0x30>)
 8008956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	240005a4 	.word	0x240005a4
 8008970:	24000600 	.word	0x24000600

08008974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0208 	add.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f103 0208 	add.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f103 0208 	add.w	r2, r3, #8
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d103      	bne.n	8008a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e00c      	b.n	8008a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e002      	b.n	8008a44 <vListInsert+0x2e>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d2f6      	bcs.n	8008a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6852      	ldr	r2, [r2, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d103      	bne.n	8008abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1e5a      	subs	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	60bb      	str	r3, [r7, #8]
 8008b02:	e7fe      	b.n	8008b02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b04:	f002 f8aa 	bl	800ac5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	68f9      	ldr	r1, [r7, #12]
 8008b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b34:	3b01      	subs	r3, #1
 8008b36:	68f9      	ldr	r1, [r7, #12]
 8008b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	22ff      	movs	r2, #255	; 0xff
 8008b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	22ff      	movs	r2, #255	; 0xff
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d114      	bne.n	8008b84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d01a      	beq.n	8008b98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3310      	adds	r3, #16
 8008b66:	4618      	mov	r0, r3
 8008b68:	f001 f91e 	bl	8009da8 <xTaskRemoveFromEventList>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d012      	beq.n	8008b98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b72:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <xQueueGenericReset+0xcc>)
 8008b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	e009      	b.n	8008b98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3310      	adds	r3, #16
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff fef3 	bl	8008974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3324      	adds	r3, #36	; 0x24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff feee 	bl	8008974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b98:	f002 f88e 	bl	800acb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b9c:	2301      	movs	r3, #1
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <xQueueGenericCreateStatic+0x28>
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd2:	e7fe      	b.n	8008bd2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <xQueueGenericCreateStatic+0x42>
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <xQueueGenericCreateStatic+0x4e>
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <xQueueGenericCreateStatic+0x52>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericCreateStatic+0x54>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <xQueueGenericCreateStatic+0x6c>
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	623b      	str	r3, [r7, #32]
 8008c16:	e7fe      	b.n	8008c16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <xQueueGenericCreateStatic+0x78>
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <xQueueGenericCreateStatic+0x7c>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <xQueueGenericCreateStatic+0x7e>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <xQueueGenericCreateStatic+0x96>
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	e7fe      	b.n	8008c40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c42:	2350      	movs	r3, #80	; 0x50
 8008c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b50      	cmp	r3, #80	; 0x50
 8008c4a:	d009      	beq.n	8008c60 <xQueueGenericCreateStatic+0xb4>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	e7fe      	b.n	8008c5e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00d      	beq.n	8008c88 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f844 	bl	8008d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3730      	adds	r7, #48	; 0x30
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b08a      	sub	sp, #40	; 0x28
 8008c96:	af02      	add	r7, sp, #8
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <xQueueGenericCreate+0x28>
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	e004      	b.n	8008cd0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3350      	adds	r3, #80	; 0x50
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f002 f8db 	bl	800ae90 <pvPortMalloc>
 8008cda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d011      	beq.n	8008d06 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	3350      	adds	r3, #80	; 0x50
 8008cea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cf4:	79fa      	ldrb	r2, [r7, #7]
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f805 	bl	8008d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d06:	69bb      	ldr	r3, [r7, #24]
	}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d103      	bne.n	8008d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	e002      	b.n	8008d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d3e:	2101      	movs	r1, #1
 8008d40:	69b8      	ldr	r0, [r7, #24]
 8008d42:	f7ff fecb 	bl	8008adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	; 0x38
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d66:	2300      	movs	r3, #0
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <xQueueGenericSend+0x30>
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d86:	e7fe      	b.n	8008d86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <xQueueGenericSend+0x3e>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <xQueueGenericSend+0x42>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueGenericSend+0x44>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <xQueueGenericSend+0x5c>
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	e7fe      	b.n	8008db2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d103      	bne.n	8008dc2 <xQueueGenericSend+0x6a>
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <xQueueGenericSend+0x6e>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericSend+0x70>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <xQueueGenericSend+0x88>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	623b      	str	r3, [r7, #32]
 8008dde:	e7fe      	b.n	8008dde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008de0:	f001 f998 	bl	800a114 <xTaskGetSchedulerState>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <xQueueGenericSend+0x98>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueueGenericSend+0x9c>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueueGenericSend+0x9e>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <xQueueGenericSend+0xb6>
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e7fe      	b.n	8008e0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e0e:	f001 ff25 	bl	800ac5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <xQueueGenericSend+0xcc>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d129      	bne.n	8008e78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e2a:	f000 f9ff 	bl	800922c <prvCopyDataToQueue>
 8008e2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	3324      	adds	r3, #36	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 ffb3 	bl	8009da8 <xTaskRemoveFromEventList>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d013      	beq.n	8008e70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e48:	4b3f      	ldr	r3, [pc, #252]	; (8008f48 <xQueueGenericSend+0x1f0>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	e00a      	b.n	8008e70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e60:	4b39      	ldr	r3, [pc, #228]	; (8008f48 <xQueueGenericSend+0x1f0>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e70:	f001 ff22 	bl	800acb8 <vPortExitCritical>
				return pdPASS;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e063      	b.n	8008f40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e7e:	f001 ff1b 	bl	800acb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e05c      	b.n	8008f40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ffeb 	bl	8009e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e9a:	f001 ff0d 	bl	800acb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e9e:	f000 fd67 	bl	8009970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea2:	f001 fedb 	bl	800ac5c <vPortEnterCritical>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d103      	bne.n	8008ebc <xQueueGenericSend+0x164>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d103      	bne.n	8008ed2 <xQueueGenericSend+0x17a>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ed2:	f001 fef1 	bl	800acb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ed6:	1d3a      	adds	r2, r7, #4
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 ffda 	bl	8009e98 <xTaskCheckForTimeOut>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d124      	bne.n	8008f34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eec:	f000 fa96 	bl	800941c <prvIsQueueFull>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d018      	beq.n	8008f28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	3310      	adds	r3, #16
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 ff04 	bl	8009d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f06:	f000 fa21 	bl	800934c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f0a:	f000 fd3f 	bl	800998c <xTaskResumeAll>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f af7c 	bne.w	8008e0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008f16:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <xQueueGenericSend+0x1f0>)
 8008f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	e772      	b.n	8008e0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2a:	f000 fa0f 	bl	800934c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f2e:	f000 fd2d 	bl	800998c <xTaskResumeAll>
 8008f32:	e76c      	b.n	8008e0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f36:	f000 fa09 	bl	800934c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f3a:	f000 fd27 	bl	800998c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3738      	adds	r7, #56	; 0x38
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08e      	sub	sp, #56	; 0x38
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <xQueueGenericSendFromISR+0x2c>
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	e7fe      	b.n	8008f76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <xQueueGenericSendFromISR+0x3a>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <xQueueGenericSendFromISR+0x3e>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <xQueueGenericSendFromISR+0x40>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d109      	bne.n	8008fa4 <xQueueGenericSendFromISR+0x58>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	623b      	str	r3, [r7, #32]
 8008fa2:	e7fe      	b.n	8008fa2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d103      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x66>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x6a>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <xQueueGenericSendFromISR+0x6c>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <xQueueGenericSendFromISR+0x84>
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	e7fe      	b.n	8008fce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fd0:	f001 ff20 	bl	800ae14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	61ba      	str	r2, [r7, #24]
 8008fea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008fec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <xQueueGenericSendFromISR+0xb6>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d12c      	bne.n	800905c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009012:	f000 f90b 	bl	800922c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009016:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d112      	bne.n	8009046 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d016      	beq.n	8009056 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	4618      	mov	r0, r3
 800902e:	f000 febb 	bl	8009da8 <xTaskRemoveFromEventList>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00e      	beq.n	8009056 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	e007      	b.n	8009056 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800904a:	3301      	adds	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	b25a      	sxtb	r2, r3
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009056:	2301      	movs	r3, #1
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800905a:	e001      	b.n	8009060 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800905c:	2300      	movs	r3, #0
 800905e:	637b      	str	r3, [r7, #52]	; 0x34
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800906c:	4618      	mov	r0, r3
 800906e:	3738      	adds	r7, #56	; 0x38
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	; 0x30
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009080:	2300      	movs	r3, #0
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <xQueueReceive+0x2e>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	623b      	str	r3, [r7, #32]
 80090a0:	e7fe      	b.n	80090a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <xQueueReceive+0x3c>
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <xQueueReceive+0x40>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <xQueueReceive+0x42>
 80090b4:	2300      	movs	r3, #0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <xQueueReceive+0x5a>
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	e7fe      	b.n	80090cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ce:	f001 f821 	bl	800a114 <xTaskGetSchedulerState>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <xQueueReceive+0x6a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueReceive+0x6e>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueReceive+0x70>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <xQueueReceive+0x88>
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	e7fe      	b.n	80090fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090fc:	f001 fdae 	bl	800ac5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01f      	beq.n	800914c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009110:	f000 f8f6 	bl	8009300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	1e5a      	subs	r2, r3, #1
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00f      	beq.n	8009144 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	3310      	adds	r3, #16
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fe3d 	bl	8009da8 <xTaskRemoveFromEventList>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009134:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <xQueueReceive+0x1b4>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009144:	f001 fdb8 	bl	800acb8 <vPortExitCritical>
				return pdPASS;
 8009148:	2301      	movs	r3, #1
 800914a:	e069      	b.n	8009220 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009152:	f001 fdb1 	bl	800acb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009156:	2300      	movs	r3, #0
 8009158:	e062      	b.n	8009220 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009160:	f107 0310 	add.w	r3, r7, #16
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fe81 	bl	8009e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800916e:	f001 fda3 	bl	800acb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009172:	f000 fbfd 	bl	8009970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009176:	f001 fd71 	bl	800ac5c <vPortEnterCritical>
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009180:	b25b      	sxtb	r3, r3
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d103      	bne.n	8009190 <xQueueReceive+0x11c>
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009196:	b25b      	sxtb	r3, r3
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d103      	bne.n	80091a6 <xQueueReceive+0x132>
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a6:	f001 fd87 	bl	800acb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091aa:	1d3a      	adds	r2, r7, #4
 80091ac:	f107 0310 	add.w	r3, r7, #16
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fe70 	bl	8009e98 <xTaskCheckForTimeOut>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d123      	bne.n	8009206 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c0:	f000 f916 	bl	80093f0 <prvIsQueueEmpty>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	3324      	adds	r3, #36	; 0x24
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fd9a 	bl	8009d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091da:	f000 f8b7 	bl	800934c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091de:	f000 fbd5 	bl	800998c <xTaskResumeAll>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d189      	bne.n	80090fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80091e8:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <xQueueReceive+0x1b4>)
 80091ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	e780      	b.n	80090fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091fc:	f000 f8a6 	bl	800934c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009200:	f000 fbc4 	bl	800998c <xTaskResumeAll>
 8009204:	e77a      	b.n	80090fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009208:	f000 f8a0 	bl	800934c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800920c:	f000 fbbe 	bl	800998c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009212:	f000 f8ed 	bl	80093f0 <prvIsQueueEmpty>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	f43f af6f 	beq.w	80090fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800921e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009220:	4618      	mov	r0, r3
 8009222:	3730      	adds	r7, #48	; 0x30
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	e000ed04 	.word	0xe000ed04

0800922c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10d      	bne.n	8009266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d14d      	bne.n	80092ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 ff7a 	bl	800a150 <xTaskPriorityDisinherit>
 800925c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	609a      	str	r2, [r3, #8]
 8009264:	e043      	b.n	80092ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d119      	bne.n	80092a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6858      	ldr	r0, [r3, #4]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	461a      	mov	r2, r3
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	f002 f82a 	bl	800b2d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	441a      	add	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	429a      	cmp	r2, r3
 8009294:	d32b      	bcc.n	80092ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	e026      	b.n	80092ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	68d8      	ldr	r0, [r3, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	461a      	mov	r2, r3
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	f002 f810 	bl	800b2d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	425b      	negs	r3, r3
 80092ba:	441a      	add	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d207      	bcs.n	80092dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	425b      	negs	r3, r3
 80092d6:	441a      	add	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d105      	bne.n	80092ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092f6:	697b      	ldr	r3, [r7, #20]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d018      	beq.n	8009344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	441a      	add	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	429a      	cmp	r2, r3
 800932a:	d303      	bcc.n	8009334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68d9      	ldr	r1, [r3, #12]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933c:	461a      	mov	r2, r3
 800933e:	6838      	ldr	r0, [r7, #0]
 8009340:	f001 ffc6 	bl	800b2d0 <memcpy>
	}
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009354:	f001 fc82 	bl	800ac5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800935e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009360:	e011      	b.n	8009386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	2b00      	cmp	r3, #0
 8009368:	d012      	beq.n	8009390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3324      	adds	r3, #36	; 0x24
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fd1a 	bl	8009da8 <xTaskRemoveFromEventList>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800937a:	f000 fded 	bl	8009f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	3b01      	subs	r3, #1
 8009382:	b2db      	uxtb	r3, r3
 8009384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	dce9      	bgt.n	8009362 <prvUnlockQueue+0x16>
 800938e:	e000      	b.n	8009392 <prvUnlockQueue+0x46>
					break;
 8009390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	22ff      	movs	r2, #255	; 0xff
 8009396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800939a:	f001 fc8d 	bl	800acb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800939e:	f001 fc5d 	bl	800ac5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093aa:	e011      	b.n	80093d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d012      	beq.n	80093da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3310      	adds	r3, #16
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fcf5 	bl	8009da8 <xTaskRemoveFromEventList>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093c4:	f000 fdc8 	bl	8009f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dce9      	bgt.n	80093ac <prvUnlockQueue+0x60>
 80093d8:	e000      	b.n	80093dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	22ff      	movs	r2, #255	; 0xff
 80093e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093e4:	f001 fc68 	bl	800acb8 <vPortExitCritical>
}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093f8:	f001 fc30 	bl	800ac5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	e001      	b.n	800940e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800940e:	f001 fc53 	bl	800acb8 <vPortExitCritical>

	return xReturn;
 8009412:	68fb      	ldr	r3, [r7, #12]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009424:	f001 fc1a 	bl	800ac5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009430:	429a      	cmp	r2, r3
 8009432:	d102      	bne.n	800943a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e001      	b.n	800943e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800943e:	f001 fc3b 	bl	800acb8 <vPortExitCritical>

	return xReturn;
 8009442:	68fb      	ldr	r3, [r7, #12]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	e014      	b.n	8009486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800945c:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <vQueueAddToRegistry+0x4c>)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10b      	bne.n	8009480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009468:	490b      	ldr	r1, [pc, #44]	; (8009498 <vQueueAddToRegistry+0x4c>)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <vQueueAddToRegistry+0x4c>)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800947e:	e005      	b.n	800948c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b07      	cmp	r3, #7
 800948a:	d9e7      	bls.n	800945c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	24004edc 	.word	0x24004edc

0800949c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094ac:	f001 fbd6 	bl	800ac5c <vPortEnterCritical>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d103      	bne.n	80094c6 <vQueueWaitForMessageRestricted+0x2a>
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094cc:	b25b      	sxtb	r3, r3
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d103      	bne.n	80094dc <vQueueWaitForMessageRestricted+0x40>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094dc:	f001 fbec 	bl	800acb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	3324      	adds	r3, #36	; 0x24
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fc2f 	bl	8009d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094f6:	6978      	ldr	r0, [r7, #20]
 80094f8:	f7ff ff28 	bl	800934c <prvUnlockQueue>
	}
 80094fc:	bf00      	nop
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	; 0x38
 8009508:	af04      	add	r7, sp, #16
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <xTaskCreateStatic+0x28>
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	623b      	str	r3, [r7, #32]
 800952a:	e7fe      	b.n	800952a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d109      	bne.n	8009546 <xTaskCreateStatic+0x42>
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	e7fe      	b.n	8009544 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009546:	235c      	movs	r3, #92	; 0x5c
 8009548:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b5c      	cmp	r3, #92	; 0x5c
 800954e:	d009      	beq.n	8009564 <xTaskCreateStatic+0x60>
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	61bb      	str	r3, [r7, #24]
 8009562:	e7fe      	b.n	8009562 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009564:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01e      	beq.n	80095aa <xTaskCreateStatic+0xa6>
 800956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956e:	2b00      	cmp	r3, #0
 8009570:	d01b      	beq.n	80095aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800957a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	2202      	movs	r2, #2
 8009580:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009584:	2300      	movs	r3, #0
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	f107 0314 	add.w	r3, r7, #20
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f850 	bl	8009642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095a4:	f000 f8dc 	bl	8009760 <prvAddNewTaskToReadyList>
 80095a8:	e001      	b.n	80095ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095ae:	697b      	ldr	r3, [r7, #20]
	}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3728      	adds	r7, #40	; 0x28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08c      	sub	sp, #48	; 0x30
 80095bc:	af04      	add	r7, sp, #16
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095c8:	88fb      	ldrh	r3, [r7, #6]
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fc5f 	bl	800ae90 <pvPortMalloc>
 80095d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00e      	beq.n	80095f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095da:	205c      	movs	r0, #92	; 0x5c
 80095dc:	f001 fc58 	bl	800ae90 <pvPortMalloc>
 80095e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
 80095ee:	e005      	b.n	80095fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095f0:	6978      	ldr	r0, [r7, #20]
 80095f2:	f001 fd0f 	bl	800b014 <vPortFree>
 80095f6:	e001      	b.n	80095fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d017      	beq.n	8009632 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	2300      	movs	r3, #0
 800960e:	9303      	str	r3, [sp, #12]
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 f80e 	bl	8009642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009626:	69f8      	ldr	r0, [r7, #28]
 8009628:	f000 f89a 	bl	8009760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800962c:	2301      	movs	r3, #1
 800962e:	61bb      	str	r3, [r7, #24]
 8009630:	e002      	b.n	8009638 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009632:	f04f 33ff 	mov.w	r3, #4294967295
 8009636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009638:	69bb      	ldr	r3, [r7, #24]
	}
 800963a:	4618      	mov	r0, r3
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	461a      	mov	r2, r3
 800965a:	21a5      	movs	r1, #165	; 0xa5
 800965c:	f001 fe5c 	bl	800b318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800966a:	440b      	add	r3, r1
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <prvInitialiseNewTask+0x56>
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	617b      	str	r3, [r7, #20]
 8009696:	e7fe      	b.n	8009696 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01f      	beq.n	80096de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	e012      	b.n	80096ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	7819      	ldrb	r1, [r3, #0]
 80096ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	3334      	adds	r3, #52	; 0x34
 80096b4:	460a      	mov	r2, r1
 80096b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d006      	beq.n	80096d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	3301      	adds	r3, #1
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	2b0f      	cmp	r3, #15
 80096ce:	d9e9      	bls.n	80096a4 <prvInitialiseNewTask+0x62>
 80096d0:	e000      	b.n	80096d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80096d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096dc:	e003      	b.n	80096e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	2b37      	cmp	r3, #55	; 0x37
 80096ea:	d901      	bls.n	80096f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096ec:	2337      	movs	r3, #55	; 0x37
 80096ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	2200      	movs	r2, #0
 8009700:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	3304      	adds	r3, #4
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff f954 	bl	80089b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	3318      	adds	r3, #24
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff f94f 	bl	80089b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	69b8      	ldr	r0, [r7, #24]
 8009740:	f001 f968 	bl	800aa14 <pxPortInitialiseStack>
 8009744:	4602      	mov	r2, r0
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009756:	bf00      	nop
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009768:	f001 fa78 	bl	800ac5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800976c:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <prvAddNewTaskToReadyList+0xc4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	4a2c      	ldr	r2, [pc, #176]	; (8009824 <prvAddNewTaskToReadyList+0xc4>)
 8009774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009776:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <prvAddNewTaskToReadyList+0xc8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d109      	bne.n	8009792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800977e:	4a2a      	ldr	r2, [pc, #168]	; (8009828 <prvAddNewTaskToReadyList+0xc8>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009784:	4b27      	ldr	r3, [pc, #156]	; (8009824 <prvAddNewTaskToReadyList+0xc4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d110      	bne.n	80097ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800978c:	f000 fc08 	bl	8009fa0 <prvInitialiseTaskLists>
 8009790:	e00d      	b.n	80097ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009792:	4b26      	ldr	r3, [pc, #152]	; (800982c <prvAddNewTaskToReadyList+0xcc>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800979a:	4b23      	ldr	r3, [pc, #140]	; (8009828 <prvAddNewTaskToReadyList+0xc8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d802      	bhi.n	80097ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097a8:	4a1f      	ldr	r2, [pc, #124]	; (8009828 <prvAddNewTaskToReadyList+0xc8>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097ae:	4b20      	ldr	r3, [pc, #128]	; (8009830 <prvAddNewTaskToReadyList+0xd0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	4a1e      	ldr	r2, [pc, #120]	; (8009830 <prvAddNewTaskToReadyList+0xd0>)
 80097b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097b8:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <prvAddNewTaskToReadyList+0xd0>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <prvAddNewTaskToReadyList+0xd4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d903      	bls.n	80097d4 <prvAddNewTaskToReadyList+0x74>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	4a18      	ldr	r2, [pc, #96]	; (8009834 <prvAddNewTaskToReadyList+0xd4>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4a15      	ldr	r2, [pc, #84]	; (8009838 <prvAddNewTaskToReadyList+0xd8>)
 80097e2:	441a      	add	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7ff f8ef 	bl	80089ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097f0:	f001 fa62 	bl	800acb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097f4:	4b0d      	ldr	r3, [pc, #52]	; (800982c <prvAddNewTaskToReadyList+0xcc>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00e      	beq.n	800981a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <prvAddNewTaskToReadyList+0xc8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	429a      	cmp	r2, r3
 8009808:	d207      	bcs.n	800981a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800980a:	4b0c      	ldr	r3, [pc, #48]	; (800983c <prvAddNewTaskToReadyList+0xdc>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	24000ed4 	.word	0x24000ed4
 8009828:	24000a00 	.word	0x24000a00
 800982c:	24000ee0 	.word	0x24000ee0
 8009830:	24000ef0 	.word	0x24000ef0
 8009834:	24000edc 	.word	0x24000edc
 8009838:	24000a04 	.word	0x24000a04
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d016      	beq.n	8009880 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <vTaskDelay+0x60>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <vTaskDelay+0x2e>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	e7fe      	b.n	800986c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800986e:	f000 f87f 	bl	8009970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009872:	2100      	movs	r1, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fcd7 	bl	800a228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800987a:	f000 f887 	bl	800998c <xTaskResumeAll>
 800987e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d107      	bne.n	8009896 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009886:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <vTaskDelay+0x64>)
 8009888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	24000efc 	.word	0x24000efc
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098b6:	463a      	mov	r2, r7
 80098b8:	1d39      	adds	r1, r7, #4
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff f824 	bl	800890c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	9202      	str	r2, [sp, #8]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2300      	movs	r3, #0
 80098d4:	460a      	mov	r2, r1
 80098d6:	4920      	ldr	r1, [pc, #128]	; (8009958 <vTaskStartScheduler+0xb0>)
 80098d8:	4820      	ldr	r0, [pc, #128]	; (800995c <vTaskStartScheduler+0xb4>)
 80098da:	f7ff fe13 	bl	8009504 <xTaskCreateStatic>
 80098de:	4602      	mov	r2, r0
 80098e0:	4b1f      	ldr	r3, [pc, #124]	; (8009960 <vTaskStartScheduler+0xb8>)
 80098e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098e4:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <vTaskStartScheduler+0xb8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098ec:	2301      	movs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e001      	b.n	80098f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d102      	bne.n	8009902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098fc:	f000 fce8 	bl	800a2d0 <xTimerCreateTimerTask>
 8009900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d115      	bne.n	8009934 <vTaskStartScheduler+0x8c>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <vTaskStartScheduler+0xbc>)
 800991c:	f04f 32ff 	mov.w	r2, #4294967295
 8009920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009922:	4b11      	ldr	r3, [pc, #68]	; (8009968 <vTaskStartScheduler+0xc0>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009928:	4b10      	ldr	r3, [pc, #64]	; (800996c <vTaskStartScheduler+0xc4>)
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800992e:	f001 f8f7 	bl	800ab20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009932:	e00d      	b.n	8009950 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d109      	bne.n	8009950 <vTaskStartScheduler+0xa8>
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	e7fe      	b.n	800994e <vTaskStartScheduler+0xa6>
}
 8009950:	bf00      	nop
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	0800dddc 	.word	0x0800dddc
 800995c:	08009f71 	.word	0x08009f71
 8009960:	24000ef8 	.word	0x24000ef8
 8009964:	24000ef4 	.word	0x24000ef4
 8009968:	24000ee0 	.word	0x24000ee0
 800996c:	24000ed8 	.word	0x24000ed8

08009970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <vTaskSuspendAll+0x18>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a03      	ldr	r2, [pc, #12]	; (8009988 <vTaskSuspendAll+0x18>)
 800997c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800997e:	bf00      	nop
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	24000efc 	.word	0x24000efc

0800998c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009996:	2300      	movs	r3, #0
 8009998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800999a:	4b41      	ldr	r3, [pc, #260]	; (8009aa0 <xTaskResumeAll+0x114>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <xTaskResumeAll+0x2a>
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	e7fe      	b.n	80099b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099b6:	f001 f951 	bl	800ac5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099ba:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <xTaskResumeAll+0x114>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3b01      	subs	r3, #1
 80099c0:	4a37      	ldr	r2, [pc, #220]	; (8009aa0 <xTaskResumeAll+0x114>)
 80099c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c4:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <xTaskResumeAll+0x114>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d162      	bne.n	8009a92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099cc:	4b35      	ldr	r3, [pc, #212]	; (8009aa4 <xTaskResumeAll+0x118>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d05e      	beq.n	8009a92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d4:	e02f      	b.n	8009a36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d6:	4b34      	ldr	r3, [pc, #208]	; (8009aa8 <xTaskResumeAll+0x11c>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3318      	adds	r3, #24
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff f850 	bl	8008a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff f84b 	bl	8008a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f6:	4b2d      	ldr	r3, [pc, #180]	; (8009aac <xTaskResumeAll+0x120>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d903      	bls.n	8009a06 <xTaskResumeAll+0x7a>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	4a2a      	ldr	r2, [pc, #168]	; (8009aac <xTaskResumeAll+0x120>)
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a27      	ldr	r2, [pc, #156]	; (8009ab0 <xTaskResumeAll+0x124>)
 8009a14:	441a      	add	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fe ffd6 	bl	80089ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a26:	4b23      	ldr	r3, [pc, #140]	; (8009ab4 <xTaskResumeAll+0x128>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d302      	bcc.n	8009a36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a30:	4b21      	ldr	r3, [pc, #132]	; (8009ab8 <xTaskResumeAll+0x12c>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a36:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <xTaskResumeAll+0x11c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1cb      	bne.n	80099d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a44:	f000 fb46 	bl	800a0d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a48:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <xTaskResumeAll+0x130>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d010      	beq.n	8009a76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a54:	f000 f846 	bl	8009ae4 <xTaskIncrementTick>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a5e:	4b16      	ldr	r3, [pc, #88]	; (8009ab8 <xTaskResumeAll+0x12c>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1f1      	bne.n	8009a54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009a70:	4b12      	ldr	r3, [pc, #72]	; (8009abc <xTaskResumeAll+0x130>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <xTaskResumeAll+0x12c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <xTaskResumeAll+0x134>)
 8009a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a92:	f001 f911 	bl	800acb8 <vPortExitCritical>

	return xAlreadyYielded;
 8009a96:	68bb      	ldr	r3, [r7, #8]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	24000efc 	.word	0x24000efc
 8009aa4:	24000ed4 	.word	0x24000ed4
 8009aa8:	24000e94 	.word	0x24000e94
 8009aac:	24000edc 	.word	0x24000edc
 8009ab0:	24000a04 	.word	0x24000a04
 8009ab4:	24000a00 	.word	0x24000a00
 8009ab8:	24000ee8 	.word	0x24000ee8
 8009abc:	24000ee4 	.word	0x24000ee4
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <xTaskGetTickCount+0x1c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ad0:	687b      	ldr	r3, [r7, #4]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	24000ed8 	.word	0x24000ed8

08009ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aee:	4b4e      	ldr	r3, [pc, #312]	; (8009c28 <xTaskIncrementTick+0x144>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f040 8088 	bne.w	8009c08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009af8:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <xTaskIncrementTick+0x148>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b00:	4a4a      	ldr	r2, [pc, #296]	; (8009c2c <xTaskIncrementTick+0x148>)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11f      	bne.n	8009b4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b0c:	4b48      	ldr	r3, [pc, #288]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d009      	beq.n	8009b2a <xTaskIncrementTick+0x46>
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	e7fe      	b.n	8009b28 <xTaskIncrementTick+0x44>
 8009b2a:	4b41      	ldr	r3, [pc, #260]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	4b40      	ldr	r3, [pc, #256]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a3e      	ldr	r2, [pc, #248]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4a3e      	ldr	r2, [pc, #248]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	; (8009c38 <xTaskIncrementTick+0x154>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	4a3c      	ldr	r2, [pc, #240]	; (8009c38 <xTaskIncrementTick+0x154>)
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	f000 fac4 	bl	800a0d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b4c:	4b3b      	ldr	r3, [pc, #236]	; (8009c3c <xTaskIncrementTick+0x158>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d349      	bcc.n	8009bea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b56:	4b36      	ldr	r3, [pc, #216]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b60:	4b36      	ldr	r3, [pc, #216]	; (8009c3c <xTaskIncrementTick+0x158>)
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
 8009b66:	601a      	str	r2, [r3, #0]
					break;
 8009b68:	e03f      	b.n	8009bea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6a:	4b31      	ldr	r3, [pc, #196]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d203      	bcs.n	8009b8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b82:	4a2e      	ldr	r2, [pc, #184]	; (8009c3c <xTaskIncrementTick+0x158>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b88:	e02f      	b.n	8009bea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe ff7a 	bl	8008a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3318      	adds	r3, #24
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe ff71 	bl	8008a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	4b25      	ldr	r3, [pc, #148]	; (8009c40 <xTaskIncrementTick+0x15c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d903      	bls.n	8009bba <xTaskIncrementTick+0xd6>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb6:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <xTaskIncrementTick+0x15c>)
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4a1f      	ldr	r2, [pc, #124]	; (8009c44 <xTaskIncrementTick+0x160>)
 8009bc8:	441a      	add	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fe fefc 	bl	80089ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <xTaskIncrementTick+0x164>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d3b8      	bcc.n	8009b56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009be4:	2301      	movs	r3, #1
 8009be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be8:	e7b5      	b.n	8009b56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bea:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <xTaskIncrementTick+0x164>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf0:	4914      	ldr	r1, [pc, #80]	; (8009c44 <xTaskIncrementTick+0x160>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	440b      	add	r3, r1
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d907      	bls.n	8009c12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009c02:	2301      	movs	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e004      	b.n	8009c12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c08:	4b10      	ldr	r3, [pc, #64]	; (8009c4c <xTaskIncrementTick+0x168>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	4a0f      	ldr	r2, [pc, #60]	; (8009c4c <xTaskIncrementTick+0x168>)
 8009c10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c12:	4b0f      	ldr	r3, [pc, #60]	; (8009c50 <xTaskIncrementTick+0x16c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c1e:	697b      	ldr	r3, [r7, #20]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	24000efc 	.word	0x24000efc
 8009c2c:	24000ed8 	.word	0x24000ed8
 8009c30:	24000e8c 	.word	0x24000e8c
 8009c34:	24000e90 	.word	0x24000e90
 8009c38:	24000eec 	.word	0x24000eec
 8009c3c:	24000ef4 	.word	0x24000ef4
 8009c40:	24000edc 	.word	0x24000edc
 8009c44:	24000a04 	.word	0x24000a04
 8009c48:	24000a00 	.word	0x24000a00
 8009c4c:	24000ee4 	.word	0x24000ee4
 8009c50:	24000ee8 	.word	0x24000ee8

08009c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c5a:	4b27      	ldr	r3, [pc, #156]	; (8009cf8 <vTaskSwitchContext+0xa4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c62:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <vTaskSwitchContext+0xa8>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c68:	e040      	b.n	8009cec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009c6a:	4b24      	ldr	r3, [pc, #144]	; (8009cfc <vTaskSwitchContext+0xa8>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c70:	4b23      	ldr	r3, [pc, #140]	; (8009d00 <vTaskSwitchContext+0xac>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e00f      	b.n	8009c98 <vTaskSwitchContext+0x44>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d109      	bne.n	8009c92 <vTaskSwitchContext+0x3e>
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	e7fe      	b.n	8009c90 <vTaskSwitchContext+0x3c>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	491a      	ldr	r1, [pc, #104]	; (8009d04 <vTaskSwitchContext+0xb0>)
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0e5      	beq.n	8009c78 <vTaskSwitchContext+0x24>
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <vTaskSwitchContext+0xb0>)
 8009cb8:	4413      	add	r3, r2
 8009cba:	60bb      	str	r3, [r7, #8]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d104      	bne.n	8009cdc <vTaskSwitchContext+0x88>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a09      	ldr	r2, [pc, #36]	; (8009d08 <vTaskSwitchContext+0xb4>)
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <vTaskSwitchContext+0xac>)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6013      	str	r3, [r2, #0]
}
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	24000efc 	.word	0x24000efc
 8009cfc:	24000ee8 	.word	0x24000ee8
 8009d00:	24000edc 	.word	0x24000edc
 8009d04:	24000a04 	.word	0x24000a04
 8009d08:	24000a00 	.word	0x24000a00

08009d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <vTaskPlaceOnEventList+0x24>
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e7fe      	b.n	8009d2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <vTaskPlaceOnEventList+0x44>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3318      	adds	r3, #24
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fe fe6c 	bl	8008a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d3e:	2101      	movs	r1, #1
 8009d40:	6838      	ldr	r0, [r7, #0]
 8009d42:	f000 fa71 	bl	800a228 <prvAddCurrentTaskToDelayedList>
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	24000a00 	.word	0x24000a00

08009d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d109      	bne.n	8009d7a <vTaskPlaceOnEventListRestricted+0x26>
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e7fe      	b.n	8009d78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <vTaskPlaceOnEventListRestricted+0x50>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3318      	adds	r3, #24
 8009d80:	4619      	mov	r1, r3
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7fe fe23 	bl	80089ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d94:	6879      	ldr	r1, [r7, #4]
 8009d96:	68b8      	ldr	r0, [r7, #8]
 8009d98:	f000 fa46 	bl	800a228 <prvAddCurrentTaskToDelayedList>
	}
 8009d9c:	bf00      	nop
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	24000a00 	.word	0x24000a00

08009da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <xTaskRemoveFromEventList+0x2a>
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e7fe      	b.n	8009dd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fe fe56 	bl	8008a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ddc:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <xTaskRemoveFromEventList+0xac>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d11d      	bne.n	8009e20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fe4d 	bl	8008a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df2:	4b19      	ldr	r3, [pc, #100]	; (8009e58 <xTaskRemoveFromEventList+0xb0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d903      	bls.n	8009e02 <xTaskRemoveFromEventList+0x5a>
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <xTaskRemoveFromEventList+0xb0>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <xTaskRemoveFromEventList+0xb4>)
 8009e10:	441a      	add	r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe fdd8 	bl	80089ce <vListInsertEnd>
 8009e1e:	e005      	b.n	8009e2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3318      	adds	r3, #24
 8009e24:	4619      	mov	r1, r3
 8009e26:	480e      	ldr	r0, [pc, #56]	; (8009e60 <xTaskRemoveFromEventList+0xb8>)
 8009e28:	f7fe fdd1 	bl	80089ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <xTaskRemoveFromEventList+0xbc>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d905      	bls.n	8009e46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <xTaskRemoveFromEventList+0xc0>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e001      	b.n	8009e4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e4a:	697b      	ldr	r3, [r7, #20]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	24000efc 	.word	0x24000efc
 8009e58:	24000edc 	.word	0x24000edc
 8009e5c:	24000a04 	.word	0x24000a04
 8009e60:	24000e94 	.word	0x24000e94
 8009e64:	24000a00 	.word	0x24000a00
 8009e68:	24000ee8 	.word	0x24000ee8

08009e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <vTaskInternalSetTimeOutState+0x24>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <vTaskInternalSetTimeOutState+0x28>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	24000eec 	.word	0x24000eec
 8009e94:	24000ed8 	.word	0x24000ed8

08009e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d109      	bne.n	8009ebc <xTaskCheckForTimeOut+0x24>
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	e7fe      	b.n	8009eba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <xTaskCheckForTimeOut+0x3e>
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e7fe      	b.n	8009ed4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009ed6:	f000 fec1 	bl	800ac5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eda:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <xTaskCheckForTimeOut+0xb8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d102      	bne.n	8009efa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	e023      	b.n	8009f42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <xTaskCheckForTimeOut+0xbc>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d007      	beq.n	8009f16 <xTaskCheckForTimeOut+0x7e>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d302      	bcc.n	8009f16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	e015      	b.n	8009f42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d20b      	bcs.n	8009f38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	1ad2      	subs	r2, r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ff9d 	bl	8009e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	e004      	b.n	8009f42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f42:	f000 feb9 	bl	800acb8 <vPortExitCritical>

	return xReturn;
 8009f46:	69fb      	ldr	r3, [r7, #28]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	24000ed8 	.word	0x24000ed8
 8009f54:	24000eec 	.word	0x24000eec

08009f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f5c:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <vTaskMissedYield+0x14>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
}
 8009f62:	bf00      	nop
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	24000ee8 	.word	0x24000ee8

08009f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f78:	f000 f852 	bl	800a020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <prvIdleTask+0x28>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d9f9      	bls.n	8009f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <prvIdleTask+0x2c>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f94:	e7f0      	b.n	8009f78 <prvIdleTask+0x8>
 8009f96:	bf00      	nop
 8009f98:	24000a04 	.word	0x24000a04
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	e00c      	b.n	8009fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4a12      	ldr	r2, [pc, #72]	; (800a000 <prvInitialiseTaskLists+0x60>)
 8009fb8:	4413      	add	r3, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fcda 	bl	8008974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b37      	cmp	r3, #55	; 0x37
 8009fca:	d9ef      	bls.n	8009fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fcc:	480d      	ldr	r0, [pc, #52]	; (800a004 <prvInitialiseTaskLists+0x64>)
 8009fce:	f7fe fcd1 	bl	8008974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fd2:	480d      	ldr	r0, [pc, #52]	; (800a008 <prvInitialiseTaskLists+0x68>)
 8009fd4:	f7fe fcce 	bl	8008974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd8:	480c      	ldr	r0, [pc, #48]	; (800a00c <prvInitialiseTaskLists+0x6c>)
 8009fda:	f7fe fccb 	bl	8008974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fde:	480c      	ldr	r0, [pc, #48]	; (800a010 <prvInitialiseTaskLists+0x70>)
 8009fe0:	f7fe fcc8 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe4:	480b      	ldr	r0, [pc, #44]	; (800a014 <prvInitialiseTaskLists+0x74>)
 8009fe6:	f7fe fcc5 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fea:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <prvInitialiseTaskLists+0x78>)
 8009fec:	4a05      	ldr	r2, [pc, #20]	; (800a004 <prvInitialiseTaskLists+0x64>)
 8009fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <prvInitialiseTaskLists+0x7c>)
 8009ff2:	4a05      	ldr	r2, [pc, #20]	; (800a008 <prvInitialiseTaskLists+0x68>)
 8009ff4:	601a      	str	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	24000a04 	.word	0x24000a04
 800a004:	24000e64 	.word	0x24000e64
 800a008:	24000e78 	.word	0x24000e78
 800a00c:	24000e94 	.word	0x24000e94
 800a010:	24000ea8 	.word	0x24000ea8
 800a014:	24000ec0 	.word	0x24000ec0
 800a018:	24000e8c 	.word	0x24000e8c
 800a01c:	24000e90 	.word	0x24000e90

0800a020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a026:	e019      	b.n	800a05c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a028:	f000 fe18 	bl	800ac5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a02c:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <prvCheckTasksWaitingTermination+0x4c>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fd25 	bl	8008a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03e:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <prvCheckTasksWaitingTermination+0x50>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3b01      	subs	r3, #1
 800a044:	4a0a      	ldr	r2, [pc, #40]	; (800a070 <prvCheckTasksWaitingTermination+0x50>)
 800a046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	4a09      	ldr	r2, [pc, #36]	; (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a052:	f000 fe31 	bl	800acb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f80e 	bl	800a078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e1      	bne.n	800a028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	24000ea8 	.word	0x24000ea8
 800a070:	24000ed4 	.word	0x24000ed4
 800a074:	24000ebc 	.word	0x24000ebc

0800a078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a086:	2b00      	cmp	r3, #0
 800a088:	d108      	bne.n	800a09c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 ffc0 	bl	800b014 <vPortFree>
				vPortFree( pxTCB );
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 ffbd 	bl	800b014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a09a:	e017      	b.n	800a0cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d103      	bne.n	800a0ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 ffb4 	bl	800b014 <vPortFree>
	}
 800a0ac:	e00e      	b.n	800a0cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d009      	beq.n	800a0cc <prvDeleteTCB+0x54>
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	e7fe      	b.n	800a0ca <prvDeleteTCB+0x52>
	}
 800a0cc:	bf00      	nop
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0da:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <prvResetNextTaskUnblockTime+0x38>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <prvResetNextTaskUnblockTime+0x3c>)
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0ec:	e008      	b.n	800a100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <prvResetNextTaskUnblockTime+0x38>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4a04      	ldr	r2, [pc, #16]	; (800a110 <prvResetNextTaskUnblockTime+0x3c>)
 800a0fe:	6013      	str	r3, [r2, #0]
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	24000e8c 	.word	0x24000e8c
 800a110:	24000ef4 	.word	0x24000ef4

0800a114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a11a:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <xTaskGetSchedulerState+0x34>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a122:	2301      	movs	r3, #1
 800a124:	607b      	str	r3, [r7, #4]
 800a126:	e008      	b.n	800a13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a128:	4b08      	ldr	r3, [pc, #32]	; (800a14c <xTaskGetSchedulerState+0x38>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a130:	2302      	movs	r3, #2
 800a132:	607b      	str	r3, [r7, #4]
 800a134:	e001      	b.n	800a13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a13a:	687b      	ldr	r3, [r7, #4]
	}
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	24000ee0 	.word	0x24000ee0
 800a14c:	24000efc 	.word	0x24000efc

0800a150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d054      	beq.n	800a210 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a166:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <xTaskPriorityDisinherit+0xcc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d009      	beq.n	800a184 <xTaskPriorityDisinherit+0x34>
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e7fe      	b.n	800a182 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <xTaskPriorityDisinherit+0x50>
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	e7fe      	b.n	800a19e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a4:	1e5a      	subs	r2, r3, #1
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d02c      	beq.n	800a210 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d128      	bne.n	800a210 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fc60 	bl	8008a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <xTaskPriorityDisinherit+0xd0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d903      	bls.n	800a1f0 <xTaskPriorityDisinherit+0xa0>
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	4a0c      	ldr	r2, [pc, #48]	; (800a220 <xTaskPriorityDisinherit+0xd0>)
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4a09      	ldr	r2, [pc, #36]	; (800a224 <xTaskPriorityDisinherit+0xd4>)
 800a1fe:	441a      	add	r2, r3
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3304      	adds	r3, #4
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7fe fbe1 	bl	80089ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a210:	697b      	ldr	r3, [r7, #20]
	}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	24000a00 	.word	0x24000a00
 800a220:	24000edc 	.word	0x24000edc
 800a224:	24000a04 	.word	0x24000a04

0800a228 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a232:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3304      	adds	r3, #4
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fc22 	bl	8008a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d10a      	bne.n	800a262 <prvAddCurrentTaskToDelayedList+0x3a>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a252:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	4819      	ldr	r0, [pc, #100]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a25c:	f7fe fbb7 	bl	80089ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a260:	e026      	b.n	800a2b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4413      	add	r3, r2
 800a268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	429a      	cmp	r2, r3
 800a278:	d209      	bcs.n	800a28e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3304      	adds	r3, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7fe fbc5 	bl	8008a16 <vListInsert>
}
 800a28c:	e010      	b.n	800a2b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a28e:	4b0e      	ldr	r3, [pc, #56]	; (800a2c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7fe fbbb 	bl	8008a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d202      	bcs.n	800a2b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2aa:	4a08      	ldr	r2, [pc, #32]	; (800a2cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6013      	str	r3, [r2, #0]
}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	24000ed8 	.word	0x24000ed8
 800a2bc:	24000a00 	.word	0x24000a00
 800a2c0:	24000ec0 	.word	0x24000ec0
 800a2c4:	24000e90 	.word	0x24000e90
 800a2c8:	24000e8c 	.word	0x24000e8c
 800a2cc:	24000ef4 	.word	0x24000ef4

0800a2d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08a      	sub	sp, #40	; 0x28
 800a2d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2da:	f000 fb5b 	bl	800a994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2de:	4b1c      	ldr	r3, [pc, #112]	; (800a350 <xTimerCreateTimerTask+0x80>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d021      	beq.n	800a32a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2ee:	1d3a      	adds	r2, r7, #4
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	f107 030c 	add.w	r3, r7, #12
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fb21 	bl	8008940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	9202      	str	r2, [sp, #8]
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	2302      	movs	r3, #2
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2300      	movs	r3, #0
 800a30e:	460a      	mov	r2, r1
 800a310:	4910      	ldr	r1, [pc, #64]	; (800a354 <xTimerCreateTimerTask+0x84>)
 800a312:	4811      	ldr	r0, [pc, #68]	; (800a358 <xTimerCreateTimerTask+0x88>)
 800a314:	f7ff f8f6 	bl	8009504 <xTaskCreateStatic>
 800a318:	4602      	mov	r2, r0
 800a31a:	4b10      	ldr	r3, [pc, #64]	; (800a35c <xTimerCreateTimerTask+0x8c>)
 800a31c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a31e:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <xTimerCreateTimerTask+0x8c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a326:	2301      	movs	r3, #1
 800a328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d109      	bne.n	800a344 <xTimerCreateTimerTask+0x74>
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	e7fe      	b.n	800a342 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a344:	697b      	ldr	r3, [r7, #20]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	24000f30 	.word	0x24000f30
 800a354:	0800dde4 	.word	0x0800dde4
 800a358:	0800a549 	.word	0x0800a549
 800a35c:	24000f34 	.word	0x24000f34

0800a360 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a36e:	202c      	movs	r0, #44	; 0x2c
 800a370:	f000 fd8e 	bl	800ae90 <pvPortMalloc>
 800a374:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00d      	beq.n	800a398 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 f805 	bl	800a3a2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a398:	697b      	ldr	r3, [r7, #20]
	}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	607a      	str	r2, [r7, #4]
 800a3ae:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <prvInitialiseNewTimer+0x28>
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	e7fe      	b.n	800a3c8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01e      	beq.n	800a40e <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a3d0:	f000 fae0 	bl	800a994 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	6a3a      	ldr	r2, [r7, #32]
 800a3ea:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fadf 	bl	80089b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d008      	beq.n	800a40e <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a402:	f043 0304 	orr.w	r3, r3, #4
 800a406:	b2da      	uxtb	r2, r3
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a40e:	bf00      	nop
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
	...

0800a418 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	; 0x28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a426:	2300      	movs	r3, #0
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <xTimerGenericCommand+0x2c>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	623b      	str	r3, [r7, #32]
 800a442:	e7fe      	b.n	800a442 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a444:	4b19      	ldr	r3, [pc, #100]	; (800a4ac <xTimerGenericCommand+0x94>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d02a      	beq.n	800a4a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	dc18      	bgt.n	800a490 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a45e:	f7ff fe59 	bl	800a114 <xTaskGetSchedulerState>
 800a462:	4603      	mov	r3, r0
 800a464:	2b02      	cmp	r3, #2
 800a466:	d109      	bne.n	800a47c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a468:	4b10      	ldr	r3, [pc, #64]	; (800a4ac <xTimerGenericCommand+0x94>)
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	f107 0110 	add.w	r1, r7, #16
 800a470:	2300      	movs	r3, #0
 800a472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a474:	f7fe fc70 	bl	8008d58 <xQueueGenericSend>
 800a478:	6278      	str	r0, [r7, #36]	; 0x24
 800a47a:	e012      	b.n	800a4a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a47c:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <xTimerGenericCommand+0x94>)
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	f107 0110 	add.w	r1, r7, #16
 800a484:	2300      	movs	r3, #0
 800a486:	2200      	movs	r2, #0
 800a488:	f7fe fc66 	bl	8008d58 <xQueueGenericSend>
 800a48c:	6278      	str	r0, [r7, #36]	; 0x24
 800a48e:	e008      	b.n	800a4a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a490:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <xTimerGenericCommand+0x94>)
 800a492:	6818      	ldr	r0, [r3, #0]
 800a494:	f107 0110 	add.w	r1, r7, #16
 800a498:	2300      	movs	r3, #0
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	f7fe fd56 	bl	8008f4c <xQueueGenericSendFromISR>
 800a4a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3728      	adds	r7, #40	; 0x28
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	24000f30 	.word	0x24000f30

0800a4b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ba:	4b22      	ldr	r3, [pc, #136]	; (800a544 <prvProcessExpiredTimer+0x94>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe fadd 	bl	8008a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d021      	beq.n	800a520 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	699a      	ldr	r2, [r3, #24]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	18d1      	adds	r1, r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	6978      	ldr	r0, [r7, #20]
 800a4ea:	f000 f8d1 	bl	800a690 <prvInsertTimerInActiveList>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01e      	beq.n	800a532 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	6978      	ldr	r0, [r7, #20]
 800a500:	f7ff ff8a 	bl	800a418 <xTimerGenericCommand>
 800a504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d112      	bne.n	800a532 <prvProcessExpiredTimer+0x82>
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e7fe      	b.n	800a51e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a526:	f023 0301 	bic.w	r3, r3, #1
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	4798      	blx	r3
}
 800a53a:	bf00      	nop
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	24000f28 	.word	0x24000f28

0800a548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a550:	f107 0308 	add.w	r3, r7, #8
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f857 	bl	800a608 <prvGetNextExpireTime>
 800a55a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4619      	mov	r1, r3
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 f803 	bl	800a56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a566:	f000 f8d5 	bl	800a714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a56a:	e7f1      	b.n	800a550 <prvTimerTask+0x8>

0800a56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a576:	f7ff f9fb 	bl	8009970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f866 	bl	800a650 <prvSampleTimeNow>
 800a584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d130      	bne.n	800a5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10a      	bne.n	800a5a8 <prvProcessTimerOrBlockTask+0x3c>
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	429a      	cmp	r2, r3
 800a598:	d806      	bhi.n	800a5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a59a:	f7ff f9f7 	bl	800998c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ff85 	bl	800a4b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5a6:	e024      	b.n	800a5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d008      	beq.n	800a5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5ae:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <prvProcessTimerOrBlockTask+0x90>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <prvProcessTimerOrBlockTask+0x50>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <prvProcessTimerOrBlockTask+0x52>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <prvProcessTimerOrBlockTask+0x94>)
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	f7fe ff65 	bl	800949c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5d2:	f7ff f9db 	bl	800998c <xTaskResumeAll>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <prvProcessTimerOrBlockTask+0x98>)
 800a5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	f3bf 8f6f 	isb	sy
}
 800a5ec:	e001      	b.n	800a5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5ee:	f7ff f9cd 	bl	800998c <xTaskResumeAll>
}
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	24000f2c 	.word	0x24000f2c
 800a600:	24000f30 	.word	0x24000f30
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a610:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <prvGetNextExpireTime+0x44>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <prvGetNextExpireTime+0x16>
 800a61a:	2201      	movs	r2, #1
 800a61c:	e000      	b.n	800a620 <prvGetNextExpireTime+0x18>
 800a61e:	2200      	movs	r2, #0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d105      	bne.n	800a638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a62c:	4b07      	ldr	r3, [pc, #28]	; (800a64c <prvGetNextExpireTime+0x44>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	e001      	b.n	800a63c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a63c:	68fb      	ldr	r3, [r7, #12]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	24000f28 	.word	0x24000f28

0800a650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a658:	f7ff fa34 	bl	8009ac4 <xTaskGetTickCount>
 800a65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <prvSampleTimeNow+0x3c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	429a      	cmp	r2, r3
 800a666:	d205      	bcs.n	800a674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a668:	f000 f930 	bl	800a8cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	e002      	b.n	800a67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a67a:	4a04      	ldr	r2, [pc, #16]	; (800a68c <prvSampleTimeNow+0x3c>)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a680:	68fb      	ldr	r3, [r7, #12]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	24000f38 	.word	0x24000f38

0800a690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d812      	bhi.n	800a6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	1ad2      	subs	r2, r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d302      	bcc.n	800a6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e01b      	b.n	800a702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6ca:	4b10      	ldr	r3, [pc, #64]	; (800a70c <prvInsertTimerInActiveList+0x7c>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fe f99e 	bl	8008a16 <vListInsert>
 800a6da:	e012      	b.n	800a702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d206      	bcs.n	800a6f2 <prvInsertTimerInActiveList+0x62>
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d302      	bcc.n	800a6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e007      	b.n	800a702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6f2:	4b07      	ldr	r3, [pc, #28]	; (800a710 <prvInsertTimerInActiveList+0x80>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7fe f98a 	bl	8008a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a702:	697b      	ldr	r3, [r7, #20]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	24000f2c 	.word	0x24000f2c
 800a710:	24000f28 	.word	0x24000f28

0800a714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08e      	sub	sp, #56	; 0x38
 800a718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a71a:	e0c6      	b.n	800a8aa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	da17      	bge.n	800a752 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a722:	1d3b      	adds	r3, r7, #4
 800a724:	3304      	adds	r3, #4
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d109      	bne.n	800a742 <prvProcessReceivedCommands+0x2e>
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	61fb      	str	r3, [r7, #28]
 800a740:	e7fe      	b.n	800a740 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a748:	6850      	ldr	r0, [r2, #4]
 800a74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a74c:	6892      	ldr	r2, [r2, #8]
 800a74e:	4611      	mov	r1, r2
 800a750:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f2c0 80a7 	blt.w	800a8a8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	3304      	adds	r3, #4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe f98c 	bl	8008a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a770:	463b      	mov	r3, r7
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff ff6c 	bl	800a650 <prvSampleTimeNow>
 800a778:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	f200 8094 	bhi.w	800a8aa <prvProcessReceivedCommands+0x196>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <prvProcessReceivedCommands+0x74>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b1 	.word	0x0800a7b1
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a823 	.word	0x0800a823
 800a798:	0800a837 	.word	0x0800a837
 800a79c:	0800a87f 	.word	0x0800a87f
 800a7a0:	0800a7b1 	.word	0x0800a7b1
 800a7a4:	0800a7b1 	.word	0x0800a7b1
 800a7a8:	0800a823 	.word	0x0800a823
 800a7ac:	0800a837 	.word	0x0800a837
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b6:	f043 0301 	orr.w	r3, r3, #1
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	18d1      	adds	r1, r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d0:	f7ff ff5e 	bl	800a690 <prvInsertTimerInActiveList>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d067      	beq.n	800a8aa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d05c      	beq.n	800a8aa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a802:	f7ff fe09 	bl	800a418 <xTimerGenericCommand>
 800a806:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d14d      	bne.n	800a8aa <prvProcessReceivedCommands+0x196>
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	61bb      	str	r3, [r7, #24]
 800a820:	e7fe      	b.n	800a820 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a828:	f023 0301 	bic.w	r3, r3, #1
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a834:	e039      	b.n	800a8aa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83c:	f043 0301 	orr.w	r3, r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d109      	bne.n	800a86a <prvProcessReceivedCommands+0x156>
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e7fe      	b.n	800a868 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	699a      	ldr	r2, [r3, #24]
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	18d1      	adds	r1, r2, r3
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a878:	f7ff ff0a 	bl	800a690 <prvInsertTimerInActiveList>
					break;
 800a87c:	e015      	b.n	800a8aa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d103      	bne.n	800a894 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88e:	f000 fbc1 	bl	800b014 <vPortFree>
 800a892:	e00a      	b.n	800a8aa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a89a:	f023 0301 	bic.w	r3, r3, #1
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8a6:	e000      	b.n	800a8aa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a8a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvProcessReceivedCommands+0x1b4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	1d39      	adds	r1, r7, #4
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fbde 	bl	8009074 <xQueueReceive>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f47f af2e 	bne.w	800a71c <prvProcessReceivedCommands+0x8>
	}
}
 800a8c0:	bf00      	nop
 800a8c2:	3730      	adds	r7, #48	; 0x30
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	24000f30 	.word	0x24000f30

0800a8cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8d2:	e047      	b.n	800a964 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8d4:	4b2d      	ldr	r3, [pc, #180]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8de:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fe f8cb 	bl	8008a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02d      	beq.n	800a964 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	429a      	cmp	r2, r3
 800a918:	d90e      	bls.n	800a938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7fe f870 	bl	8008a16 <vListInsert>
 800a936:	e015      	b.n	800a964 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a938:	2300      	movs	r3, #0
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2300      	movs	r3, #0
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	2100      	movs	r1, #0
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fd68 	bl	800a418 <xTimerGenericCommand>
 800a948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d109      	bne.n	800a964 <prvSwitchTimerLists+0x98>
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	e7fe      	b.n	800a962 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a964:	4b09      	ldr	r3, [pc, #36]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1b2      	bne.n	800a8d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a974:	4b06      	ldr	r3, [pc, #24]	; (800a990 <prvSwitchTimerLists+0xc4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a04      	ldr	r2, [pc, #16]	; (800a98c <prvSwitchTimerLists+0xc0>)
 800a97a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvSwitchTimerLists+0xc4>)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	6013      	str	r3, [r2, #0]
}
 800a982:	bf00      	nop
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	24000f28 	.word	0x24000f28
 800a990:	24000f2c 	.word	0x24000f2c

0800a994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a99a:	f000 f95f 	bl	800ac5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a99e:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d120      	bne.n	800a9e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9a6:	4814      	ldr	r0, [pc, #80]	; (800a9f8 <prvCheckForValidListAndQueue+0x64>)
 800a9a8:	f7fd ffe4 	bl	8008974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9ac:	4813      	ldr	r0, [pc, #76]	; (800a9fc <prvCheckForValidListAndQueue+0x68>)
 800a9ae:	f7fd ffe1 	bl	8008974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <prvCheckForValidListAndQueue+0x6c>)
 800a9b4:	4a10      	ldr	r2, [pc, #64]	; (800a9f8 <prvCheckForValidListAndQueue+0x64>)
 800a9b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9b8:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <prvCheckForValidListAndQueue+0x70>)
 800a9ba:	4a10      	ldr	r2, [pc, #64]	; (800a9fc <prvCheckForValidListAndQueue+0x68>)
 800a9bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <prvCheckForValidListAndQueue+0x74>)
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <prvCheckForValidListAndQueue+0x78>)
 800a9c6:	2110      	movs	r1, #16
 800a9c8:	200a      	movs	r0, #10
 800a9ca:	f7fe f8ef 	bl	8008bac <xQueueGenericCreateStatic>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9d4:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <prvCheckForValidListAndQueue+0x60>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	490b      	ldr	r1, [pc, #44]	; (800aa10 <prvCheckForValidListAndQueue+0x7c>)
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fd32 	bl	800944c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e8:	f000 f966 	bl	800acb8 <vPortExitCritical>
}
 800a9ec:	bf00      	nop
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	24000f30 	.word	0x24000f30
 800a9f8:	24000f00 	.word	0x24000f00
 800a9fc:	24000f14 	.word	0x24000f14
 800aa00:	24000f28 	.word	0x24000f28
 800aa04:	24000f2c 	.word	0x24000f2c
 800aa08:	24000fdc 	.word	0x24000fdc
 800aa0c:	24000f3c 	.word	0x24000f3c
 800aa10:	0800ddec 	.word	0x0800ddec

0800aa14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b04      	subs	r3, #4
 800aa24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3b04      	subs	r3, #4
 800aa32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f023 0201 	bic.w	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3b04      	subs	r3, #4
 800aa42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa44:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <pxPortInitialiseStack+0x64>)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3b14      	subs	r3, #20
 800aa4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f06f 0202 	mvn.w	r2, #2
 800aa62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3b20      	subs	r3, #32
 800aa68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	0800aa7d 	.word	0x0800aa7d

0800aa7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa86:	4b11      	ldr	r3, [pc, #68]	; (800aacc <prvTaskExitError+0x50>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8e:	d009      	beq.n	800aaa4 <prvTaskExitError+0x28>
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e7fe      	b.n	800aaa2 <prvTaskExitError+0x26>
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aab6:	bf00      	nop
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0fc      	beq.n	800aab8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	24000010 	.word	0x24000010

0800aad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <pxCurrentTCBConst2>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6808      	ldr	r0, [r1, #0]
 800aad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f380 8809 	msr	PSP, r0
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8811 	msr	BASEPRI, r0
 800aaea:	4770      	bx	lr
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst2>:
 800aaf0:	24000a00 	.word	0x24000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aaf8:	4808      	ldr	r0, [pc, #32]	; (800ab1c <prvPortStartFirstTask+0x24>)
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	f380 8808 	msr	MSP, r0
 800ab02:	f04f 0000 	mov.w	r0, #0
 800ab06:	f380 8814 	msr	CONTROL, r0
 800ab0a:	b662      	cpsie	i
 800ab0c:	b661      	cpsie	f
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	df00      	svc	0
 800ab18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed08 	.word	0xe000ed08

0800ab20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab26:	4b44      	ldr	r3, [pc, #272]	; (800ac38 <xPortStartScheduler+0x118>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a44      	ldr	r2, [pc, #272]	; (800ac3c <xPortStartScheduler+0x11c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d109      	bne.n	800ab44 <xPortStartScheduler+0x24>
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	e7fe      	b.n	800ab42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab44:	4b3c      	ldr	r3, [pc, #240]	; (800ac38 <xPortStartScheduler+0x118>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a3d      	ldr	r2, [pc, #244]	; (800ac40 <xPortStartScheduler+0x120>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d109      	bne.n	800ab62 <xPortStartScheduler+0x42>
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	e7fe      	b.n	800ab60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab62:	4b38      	ldr	r3, [pc, #224]	; (800ac44 <xPortStartScheduler+0x124>)
 800ab64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	22ff      	movs	r2, #255	; 0xff
 800ab72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <xPortStartScheduler+0x128>)
 800ab88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab8a:	4b30      	ldr	r3, [pc, #192]	; (800ac4c <xPortStartScheduler+0x12c>)
 800ab8c:	2207      	movs	r2, #7
 800ab8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab90:	e009      	b.n	800aba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ab92:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <xPortStartScheduler+0x12c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <xPortStartScheduler+0x12c>)
 800ab9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abae:	2b80      	cmp	r3, #128	; 0x80
 800abb0:	d0ef      	beq.n	800ab92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abb2:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <xPortStartScheduler+0x12c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f1c3 0307 	rsb	r3, r3, #7
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d009      	beq.n	800abd2 <xPortStartScheduler+0xb2>
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	60bb      	str	r3, [r7, #8]
 800abd0:	e7fe      	b.n	800abd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abd2:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <xPortStartScheduler+0x12c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	4a1c      	ldr	r2, [pc, #112]	; (800ac4c <xPortStartScheduler+0x12c>)
 800abda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abdc:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <xPortStartScheduler+0x12c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abe4:	4a19      	ldr	r2, [pc, #100]	; (800ac4c <xPortStartScheduler+0x12c>)
 800abe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	b2da      	uxtb	r2, r3
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abf0:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <xPortStartScheduler+0x130>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a16      	ldr	r2, [pc, #88]	; (800ac50 <xPortStartScheduler+0x130>)
 800abf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abfc:	4b14      	ldr	r3, [pc, #80]	; (800ac50 <xPortStartScheduler+0x130>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <xPortStartScheduler+0x130>)
 800ac02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac08:	f000 f8d6 	bl	800adb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac0c:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <xPortStartScheduler+0x134>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac12:	f000 f8f5 	bl	800ae00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac16:	4b10      	ldr	r3, [pc, #64]	; (800ac58 <xPortStartScheduler+0x138>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a0f      	ldr	r2, [pc, #60]	; (800ac58 <xPortStartScheduler+0x138>)
 800ac1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac22:	f7ff ff69 	bl	800aaf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac26:	f7ff f815 	bl	8009c54 <vTaskSwitchContext>
	prvTaskExitError();
 800ac2a:	f7ff ff27 	bl	800aa7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	e000ed00 	.word	0xe000ed00
 800ac3c:	410fc271 	.word	0x410fc271
 800ac40:	410fc270 	.word	0x410fc270
 800ac44:	e000e400 	.word	0xe000e400
 800ac48:	2400102c 	.word	0x2400102c
 800ac4c:	24001030 	.word	0x24001030
 800ac50:	e000ed20 	.word	0xe000ed20
 800ac54:	24000010 	.word	0x24000010
 800ac58:	e000ef34 	.word	0xe000ef34

0800ac5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac74:	4b0e      	ldr	r3, [pc, #56]	; (800acb0 <vPortEnterCritical+0x54>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	4a0d      	ldr	r2, [pc, #52]	; (800acb0 <vPortEnterCritical+0x54>)
 800ac7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <vPortEnterCritical+0x54>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d10e      	bne.n	800aca4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac86:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <vPortEnterCritical+0x58>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d009      	beq.n	800aca4 <vPortEnterCritical+0x48>
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	603b      	str	r3, [r7, #0]
 800aca2:	e7fe      	b.n	800aca2 <vPortEnterCritical+0x46>
	}
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	24000010 	.word	0x24000010
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acbe:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <vPortExitCritical+0x4c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <vPortExitCritical+0x22>
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	607b      	str	r3, [r7, #4]
 800acd8:	e7fe      	b.n	800acd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <vPortExitCritical+0x4c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3b01      	subs	r3, #1
 800ace0:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <vPortExitCritical+0x4c>)
 800ace2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ace4:	4b07      	ldr	r3, [pc, #28]	; (800ad04 <vPortExitCritical+0x4c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <vPortExitCritical+0x3e>
 800acec:	2300      	movs	r3, #0
 800acee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	24000010 	.word	0x24000010
	...

0800ad10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad10:	f3ef 8009 	mrs	r0, PSP
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <pxCurrentTCBConst>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f01e 0f10 	tst.w	lr, #16
 800ad20:	bf08      	it	eq
 800ad22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad34:	f380 8811 	msr	BASEPRI, r0
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f7fe ff88 	bl	8009c54 <vTaskSwitchContext>
 800ad44:	f04f 0000 	mov.w	r0, #0
 800ad48:	f380 8811 	msr	BASEPRI, r0
 800ad4c:	bc09      	pop	{r0, r3}
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	6808      	ldr	r0, [r1, #0]
 800ad52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad56:	f01e 0f10 	tst.w	lr, #16
 800ad5a:	bf08      	it	eq
 800ad5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad60:	f380 8809 	msr	PSP, r0
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	f3af 8000 	nop.w

0800ad70 <pxCurrentTCBConst>:
 800ad70:	24000a00 	.word	0x24000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop

0800ad78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad90:	f7fe fea8 	bl	8009ae4 <xTaskIncrementTick>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <SysTick_Handler+0x3c>)
 800ad9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	2300      	movs	r3, #0
 800ada4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	e000ed04 	.word	0xe000ed04

0800adb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adbc:	4b0b      	ldr	r3, [pc, #44]	; (800adec <vPortSetupTimerInterrupt+0x34>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <vPortSetupTimerInterrupt+0x38>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <vPortSetupTimerInterrupt+0x3c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0a      	ldr	r2, [pc, #40]	; (800adf8 <vPortSetupTimerInterrupt+0x40>)
 800adce:	fba2 2303 	umull	r2, r3, r2, r3
 800add2:	099b      	lsrs	r3, r3, #6
 800add4:	4a09      	ldr	r2, [pc, #36]	; (800adfc <vPortSetupTimerInterrupt+0x44>)
 800add6:	3b01      	subs	r3, #1
 800add8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adda:	4b04      	ldr	r3, [pc, #16]	; (800adec <vPortSetupTimerInterrupt+0x34>)
 800addc:	2207      	movs	r2, #7
 800adde:	601a      	str	r2, [r3, #0]
}
 800ade0:	bf00      	nop
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	e000e010 	.word	0xe000e010
 800adf0:	e000e018 	.word	0xe000e018
 800adf4:	24000000 	.word	0x24000000
 800adf8:	10624dd3 	.word	0x10624dd3
 800adfc:	e000e014 	.word	0xe000e014

0800ae00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae10 <vPortEnableVFP+0x10>
 800ae04:	6801      	ldr	r1, [r0, #0]
 800ae06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae0a:	6001      	str	r1, [r0, #0]
 800ae0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae0e:	bf00      	nop
 800ae10:	e000ed88 	.word	0xe000ed88

0800ae14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae1a:	f3ef 8305 	mrs	r3, IPSR
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b0f      	cmp	r3, #15
 800ae24:	d913      	bls.n	800ae4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae26:	4a16      	ldr	r2, [pc, #88]	; (800ae80 <vPortValidateInterruptPriority+0x6c>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae30:	4b14      	ldr	r3, [pc, #80]	; (800ae84 <vPortValidateInterruptPriority+0x70>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	7afa      	ldrb	r2, [r7, #11]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d209      	bcs.n	800ae4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	e7fe      	b.n	800ae4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae4e:	4b0e      	ldr	r3, [pc, #56]	; (800ae88 <vPortValidateInterruptPriority+0x74>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae56:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <vPortValidateInterruptPriority+0x78>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d909      	bls.n	800ae72 <vPortValidateInterruptPriority+0x5e>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	e7fe      	b.n	800ae70 <vPortValidateInterruptPriority+0x5c>
	}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	e000e3f0 	.word	0xe000e3f0
 800ae84:	2400102c 	.word	0x2400102c
 800ae88:	e000ed0c 	.word	0xe000ed0c
 800ae8c:	24001030 	.word	0x24001030

0800ae90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08a      	sub	sp, #40	; 0x28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae9c:	f7fe fd68 	bl	8009970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aea0:	4b57      	ldr	r3, [pc, #348]	; (800b000 <pvPortMalloc+0x170>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aea8:	f000 f90c 	bl	800b0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aeac:	4b55      	ldr	r3, [pc, #340]	; (800b004 <pvPortMalloc+0x174>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f040 808c 	bne.w	800afd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01c      	beq.n	800aefa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aec0:	2208      	movs	r2, #8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4413      	add	r3, r2
 800aec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f003 0307 	and.w	r3, r3, #7
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d013      	beq.n	800aefa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f023 0307 	bic.w	r3, r3, #7
 800aed8:	3308      	adds	r3, #8
 800aeda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <pvPortMalloc+0x6a>
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	e7fe      	b.n	800aef8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d068      	beq.n	800afd2 <pvPortMalloc+0x142>
 800af00:	4b41      	ldr	r3, [pc, #260]	; (800b008 <pvPortMalloc+0x178>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	d863      	bhi.n	800afd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af0a:	4b40      	ldr	r3, [pc, #256]	; (800b00c <pvPortMalloc+0x17c>)
 800af0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af0e:	4b3f      	ldr	r3, [pc, #252]	; (800b00c <pvPortMalloc+0x17c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af14:	e004      	b.n	800af20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d903      	bls.n	800af32 <pvPortMalloc+0xa2>
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1f1      	bne.n	800af16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af32:	4b33      	ldr	r3, [pc, #204]	; (800b000 <pvPortMalloc+0x170>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af38:	429a      	cmp	r2, r3
 800af3a:	d04a      	beq.n	800afd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2208      	movs	r2, #8
 800af42:	4413      	add	r3, r2
 800af44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	1ad2      	subs	r2, r2, r3
 800af56:	2308      	movs	r3, #8
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d91e      	bls.n	800af9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4413      	add	r3, r2
 800af64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	f003 0307 	and.w	r3, r3, #7
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <pvPortMalloc+0xf4>
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	e7fe      	b.n	800af82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	1ad2      	subs	r2, r2, r3
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af96:	69b8      	ldr	r0, [r7, #24]
 800af98:	f000 f8f6 	bl	800b188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af9c:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <pvPortMalloc+0x178>)
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	4a18      	ldr	r2, [pc, #96]	; (800b008 <pvPortMalloc+0x178>)
 800afa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afaa:	4b17      	ldr	r3, [pc, #92]	; (800b008 <pvPortMalloc+0x178>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4b18      	ldr	r3, [pc, #96]	; (800b010 <pvPortMalloc+0x180>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d203      	bcs.n	800afbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afb6:	4b14      	ldr	r3, [pc, #80]	; (800b008 <pvPortMalloc+0x178>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a15      	ldr	r2, [pc, #84]	; (800b010 <pvPortMalloc+0x180>)
 800afbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	4b10      	ldr	r3, [pc, #64]	; (800b004 <pvPortMalloc+0x174>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	431a      	orrs	r2, r3
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800afd2:	f7fe fcdb 	bl	800998c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d009      	beq.n	800aff4 <pvPortMalloc+0x164>
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	e7fe      	b.n	800aff2 <pvPortMalloc+0x162>
	return pvReturn;
 800aff4:	69fb      	ldr	r3, [r7, #28]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	; 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	24004c3c 	.word	0x24004c3c
 800b004:	24004c48 	.word	0x24004c48
 800b008:	24004c40 	.word	0x24004c40
 800b00c:	24004c34 	.word	0x24004c34
 800b010:	24004c44 	.word	0x24004c44

0800b014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d046      	beq.n	800b0b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b026:	2308      	movs	r3, #8
 800b028:	425b      	negs	r3, r3
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	4413      	add	r3, r2
 800b02e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	4b20      	ldr	r3, [pc, #128]	; (800b0bc <vPortFree+0xa8>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4013      	ands	r3, r2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <vPortFree+0x42>
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	e7fe      	b.n	800b054 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d009      	beq.n	800b072 <vPortFree+0x5e>
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60bb      	str	r3, [r7, #8]
 800b070:	e7fe      	b.n	800b070 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <vPortFree+0xa8>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4013      	ands	r3, r2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d019      	beq.n	800b0b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d115      	bne.n	800b0b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <vPortFree+0xa8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	43db      	mvns	r3, r3
 800b092:	401a      	ands	r2, r3
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b098:	f7fe fc6a 	bl	8009970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <vPortFree+0xac>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	4a06      	ldr	r2, [pc, #24]	; (800b0c0 <vPortFree+0xac>)
 800b0a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0aa:	6938      	ldr	r0, [r7, #16]
 800b0ac:	f000 f86c 	bl	800b188 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b0b0:	f7fe fc6c 	bl	800998c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0b4:	bf00      	nop
 800b0b6:	3718      	adds	r7, #24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	24004c48 	.word	0x24004c48
 800b0c0:	24004c40 	.word	0x24004c40

0800b0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b0d0:	4b27      	ldr	r3, [pc, #156]	; (800b170 <prvHeapInit+0xac>)
 800b0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f003 0307 	and.w	r3, r3, #7
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00c      	beq.n	800b0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3307      	adds	r3, #7
 800b0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f023 0307 	bic.w	r3, r3, #7
 800b0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	4a1f      	ldr	r2, [pc, #124]	; (800b170 <prvHeapInit+0xac>)
 800b0f4:	4413      	add	r3, r2
 800b0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0fc:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <prvHeapInit+0xb0>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b102:	4b1c      	ldr	r3, [pc, #112]	; (800b174 <prvHeapInit+0xb0>)
 800b104:	2200      	movs	r2, #0
 800b106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	4413      	add	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b110:	2208      	movs	r2, #8
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0307 	bic.w	r3, r3, #7
 800b11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4a15      	ldr	r2, [pc, #84]	; (800b178 <prvHeapInit+0xb4>)
 800b124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <prvHeapInit+0xb4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2200      	movs	r2, #0
 800b12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b12e:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvHeapInit+0xb4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <prvHeapInit+0xb4>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4a0a      	ldr	r2, [pc, #40]	; (800b17c <prvHeapInit+0xb8>)
 800b152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	4a09      	ldr	r2, [pc, #36]	; (800b180 <prvHeapInit+0xbc>)
 800b15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b15c:	4b09      	ldr	r3, [pc, #36]	; (800b184 <prvHeapInit+0xc0>)
 800b15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b162:	601a      	str	r2, [r3, #0]
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	24001034 	.word	0x24001034
 800b174:	24004c34 	.word	0x24004c34
 800b178:	24004c3c 	.word	0x24004c3c
 800b17c:	24004c44 	.word	0x24004c44
 800b180:	24004c40 	.word	0x24004c40
 800b184:	24004c48 	.word	0x24004c48

0800b188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b190:	4b28      	ldr	r3, [pc, #160]	; (800b234 <prvInsertBlockIntoFreeList+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e002      	b.n	800b19c <prvInsertBlockIntoFreeList+0x14>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d8f7      	bhi.n	800b196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d108      	bne.n	800b1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	441a      	add	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	441a      	add	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d118      	bne.n	800b210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b15      	ldr	r3, [pc, #84]	; (800b238 <prvInsertBlockIntoFreeList+0xb0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d00d      	beq.n	800b206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	441a      	add	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e008      	b.n	800b218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b206:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvInsertBlockIntoFreeList+0xb0>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	e003      	b.n	800b218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d002      	beq.n	800b226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b226:	bf00      	nop
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	24004c34 	.word	0x24004c34
 800b238:	24004c3c 	.word	0x24004c3c

0800b23c <__errno>:
 800b23c:	4b01      	ldr	r3, [pc, #4]	; (800b244 <__errno+0x8>)
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	24000014 	.word	0x24000014

0800b248 <__libc_init_array>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4e0d      	ldr	r6, [pc, #52]	; (800b280 <__libc_init_array+0x38>)
 800b24c:	4c0d      	ldr	r4, [pc, #52]	; (800b284 <__libc_init_array+0x3c>)
 800b24e:	1ba4      	subs	r4, r4, r6
 800b250:	10a4      	asrs	r4, r4, #2
 800b252:	2500      	movs	r5, #0
 800b254:	42a5      	cmp	r5, r4
 800b256:	d109      	bne.n	800b26c <__libc_init_array+0x24>
 800b258:	4e0b      	ldr	r6, [pc, #44]	; (800b288 <__libc_init_array+0x40>)
 800b25a:	4c0c      	ldr	r4, [pc, #48]	; (800b28c <__libc_init_array+0x44>)
 800b25c:	f002 fd32 	bl	800dcc4 <_init>
 800b260:	1ba4      	subs	r4, r4, r6
 800b262:	10a4      	asrs	r4, r4, #2
 800b264:	2500      	movs	r5, #0
 800b266:	42a5      	cmp	r5, r4
 800b268:	d105      	bne.n	800b276 <__libc_init_array+0x2e>
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b270:	4798      	blx	r3
 800b272:	3501      	adds	r5, #1
 800b274:	e7ee      	b.n	800b254 <__libc_init_array+0xc>
 800b276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b27a:	4798      	blx	r3
 800b27c:	3501      	adds	r5, #1
 800b27e:	e7f2      	b.n	800b266 <__libc_init_array+0x1e>
 800b280:	0800e10c 	.word	0x0800e10c
 800b284:	0800e10c 	.word	0x0800e10c
 800b288:	0800e10c 	.word	0x0800e10c
 800b28c:	0800e110 	.word	0x0800e110

0800b290 <__locale_ctype_ptr>:
 800b290:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <__locale_ctype_ptr+0x14>)
 800b292:	4a05      	ldr	r2, [pc, #20]	; (800b2a8 <__locale_ctype_ptr+0x18>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	bf08      	it	eq
 800b29c:	4613      	moveq	r3, r2
 800b29e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b2a2:	4770      	bx	lr
 800b2a4:	24000014 	.word	0x24000014
 800b2a8:	24000078 	.word	0x24000078

0800b2ac <__ascii_mbtowc>:
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	b901      	cbnz	r1, 800b2b2 <__ascii_mbtowc+0x6>
 800b2b0:	a901      	add	r1, sp, #4
 800b2b2:	b142      	cbz	r2, 800b2c6 <__ascii_mbtowc+0x1a>
 800b2b4:	b14b      	cbz	r3, 800b2ca <__ascii_mbtowc+0x1e>
 800b2b6:	7813      	ldrb	r3, [r2, #0]
 800b2b8:	600b      	str	r3, [r1, #0]
 800b2ba:	7812      	ldrb	r2, [r2, #0]
 800b2bc:	1c10      	adds	r0, r2, #0
 800b2be:	bf18      	it	ne
 800b2c0:	2001      	movne	r0, #1
 800b2c2:	b002      	add	sp, #8
 800b2c4:	4770      	bx	lr
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	e7fb      	b.n	800b2c2 <__ascii_mbtowc+0x16>
 800b2ca:	f06f 0001 	mvn.w	r0, #1
 800b2ce:	e7f8      	b.n	800b2c2 <__ascii_mbtowc+0x16>

0800b2d0 <memcpy>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	1e43      	subs	r3, r0, #1
 800b2d4:	440a      	add	r2, r1
 800b2d6:	4291      	cmp	r1, r2
 800b2d8:	d100      	bne.n	800b2dc <memcpy+0xc>
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2e4:	e7f7      	b.n	800b2d6 <memcpy+0x6>

0800b2e6 <memmove>:
 800b2e6:	4288      	cmp	r0, r1
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	eb01 0302 	add.w	r3, r1, r2
 800b2ee:	d807      	bhi.n	800b300 <memmove+0x1a>
 800b2f0:	1e42      	subs	r2, r0, #1
 800b2f2:	4299      	cmp	r1, r3
 800b2f4:	d00a      	beq.n	800b30c <memmove+0x26>
 800b2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b2fe:	e7f8      	b.n	800b2f2 <memmove+0xc>
 800b300:	4283      	cmp	r3, r0
 800b302:	d9f5      	bls.n	800b2f0 <memmove+0xa>
 800b304:	1881      	adds	r1, r0, r2
 800b306:	1ad2      	subs	r2, r2, r3
 800b308:	42d3      	cmn	r3, r2
 800b30a:	d100      	bne.n	800b30e <memmove+0x28>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b312:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b316:	e7f7      	b.n	800b308 <memmove+0x22>

0800b318 <memset>:
 800b318:	4402      	add	r2, r0
 800b31a:	4603      	mov	r3, r0
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d100      	bne.n	800b322 <memset+0xa>
 800b320:	4770      	bx	lr
 800b322:	f803 1b01 	strb.w	r1, [r3], #1
 800b326:	e7f9      	b.n	800b31c <memset+0x4>

0800b328 <__sfputc_r>:
 800b328:	6893      	ldr	r3, [r2, #8]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	b410      	push	{r4}
 800b330:	6093      	str	r3, [r2, #8]
 800b332:	da08      	bge.n	800b346 <__sfputc_r+0x1e>
 800b334:	6994      	ldr	r4, [r2, #24]
 800b336:	42a3      	cmp	r3, r4
 800b338:	db01      	blt.n	800b33e <__sfputc_r+0x16>
 800b33a:	290a      	cmp	r1, #10
 800b33c:	d103      	bne.n	800b346 <__sfputc_r+0x1e>
 800b33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b342:	f000 be1d 	b.w	800bf80 <__swbuf_r>
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	1c58      	adds	r0, r3, #1
 800b34a:	6010      	str	r0, [r2, #0]
 800b34c:	7019      	strb	r1, [r3, #0]
 800b34e:	4608      	mov	r0, r1
 800b350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <__sfputs_r>:
 800b356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b358:	4606      	mov	r6, r0
 800b35a:	460f      	mov	r7, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	18d5      	adds	r5, r2, r3
 800b360:	42ac      	cmp	r4, r5
 800b362:	d101      	bne.n	800b368 <__sfputs_r+0x12>
 800b364:	2000      	movs	r0, #0
 800b366:	e007      	b.n	800b378 <__sfputs_r+0x22>
 800b368:	463a      	mov	r2, r7
 800b36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36e:	4630      	mov	r0, r6
 800b370:	f7ff ffda 	bl	800b328 <__sfputc_r>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d1f3      	bne.n	800b360 <__sfputs_r+0xa>
 800b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b37c <_vfiprintf_r>:
 800b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	b09d      	sub	sp, #116	; 0x74
 800b384:	4617      	mov	r7, r2
 800b386:	461d      	mov	r5, r3
 800b388:	4606      	mov	r6, r0
 800b38a:	b118      	cbz	r0, 800b394 <_vfiprintf_r+0x18>
 800b38c:	6983      	ldr	r3, [r0, #24]
 800b38e:	b90b      	cbnz	r3, 800b394 <_vfiprintf_r+0x18>
 800b390:	f001 fd8e 	bl	800ceb0 <__sinit>
 800b394:	4b7c      	ldr	r3, [pc, #496]	; (800b588 <_vfiprintf_r+0x20c>)
 800b396:	429c      	cmp	r4, r3
 800b398:	d158      	bne.n	800b44c <_vfiprintf_r+0xd0>
 800b39a:	6874      	ldr	r4, [r6, #4]
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	0718      	lsls	r0, r3, #28
 800b3a0:	d55e      	bpl.n	800b460 <_vfiprintf_r+0xe4>
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d05b      	beq.n	800b460 <_vfiprintf_r+0xe4>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ac:	2320      	movs	r3, #32
 800b3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3b2:	2330      	movs	r3, #48	; 0x30
 800b3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3b8:	9503      	str	r5, [sp, #12]
 800b3ba:	f04f 0b01 	mov.w	fp, #1
 800b3be:	46b8      	mov	r8, r7
 800b3c0:	4645      	mov	r5, r8
 800b3c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3c6:	b10b      	cbz	r3, 800b3cc <_vfiprintf_r+0x50>
 800b3c8:	2b25      	cmp	r3, #37	; 0x25
 800b3ca:	d154      	bne.n	800b476 <_vfiprintf_r+0xfa>
 800b3cc:	ebb8 0a07 	subs.w	sl, r8, r7
 800b3d0:	d00b      	beq.n	800b3ea <_vfiprintf_r+0x6e>
 800b3d2:	4653      	mov	r3, sl
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffbc 	bl	800b356 <__sfputs_r>
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f000 80c2 	beq.w	800b568 <_vfiprintf_r+0x1ec>
 800b3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e6:	4453      	add	r3, sl
 800b3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ea:	f898 3000 	ldrb.w	r3, [r8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 80ba 	beq.w	800b568 <_vfiprintf_r+0x1ec>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	9307      	str	r3, [sp, #28]
 800b402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b406:	931a      	str	r3, [sp, #104]	; 0x68
 800b408:	46a8      	mov	r8, r5
 800b40a:	2205      	movs	r2, #5
 800b40c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b410:	485e      	ldr	r0, [pc, #376]	; (800b58c <_vfiprintf_r+0x210>)
 800b412:	f7f4 ff6d 	bl	80002f0 <memchr>
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	bb78      	cbnz	r0, 800b47a <_vfiprintf_r+0xfe>
 800b41a:	06d9      	lsls	r1, r3, #27
 800b41c:	bf44      	itt	mi
 800b41e:	2220      	movmi	r2, #32
 800b420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b424:	071a      	lsls	r2, r3, #28
 800b426:	bf44      	itt	mi
 800b428:	222b      	movmi	r2, #43	; 0x2b
 800b42a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b42e:	782a      	ldrb	r2, [r5, #0]
 800b430:	2a2a      	cmp	r2, #42	; 0x2a
 800b432:	d02a      	beq.n	800b48a <_vfiprintf_r+0x10e>
 800b434:	9a07      	ldr	r2, [sp, #28]
 800b436:	46a8      	mov	r8, r5
 800b438:	2000      	movs	r0, #0
 800b43a:	250a      	movs	r5, #10
 800b43c:	4641      	mov	r1, r8
 800b43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b442:	3b30      	subs	r3, #48	; 0x30
 800b444:	2b09      	cmp	r3, #9
 800b446:	d969      	bls.n	800b51c <_vfiprintf_r+0x1a0>
 800b448:	b360      	cbz	r0, 800b4a4 <_vfiprintf_r+0x128>
 800b44a:	e024      	b.n	800b496 <_vfiprintf_r+0x11a>
 800b44c:	4b50      	ldr	r3, [pc, #320]	; (800b590 <_vfiprintf_r+0x214>)
 800b44e:	429c      	cmp	r4, r3
 800b450:	d101      	bne.n	800b456 <_vfiprintf_r+0xda>
 800b452:	68b4      	ldr	r4, [r6, #8]
 800b454:	e7a2      	b.n	800b39c <_vfiprintf_r+0x20>
 800b456:	4b4f      	ldr	r3, [pc, #316]	; (800b594 <_vfiprintf_r+0x218>)
 800b458:	429c      	cmp	r4, r3
 800b45a:	bf08      	it	eq
 800b45c:	68f4      	ldreq	r4, [r6, #12]
 800b45e:	e79d      	b.n	800b39c <_vfiprintf_r+0x20>
 800b460:	4621      	mov	r1, r4
 800b462:	4630      	mov	r0, r6
 800b464:	f000 fdec 	bl	800c040 <__swsetup_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d09d      	beq.n	800b3a8 <_vfiprintf_r+0x2c>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b01d      	add	sp, #116	; 0x74
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	46a8      	mov	r8, r5
 800b478:	e7a2      	b.n	800b3c0 <_vfiprintf_r+0x44>
 800b47a:	4a44      	ldr	r2, [pc, #272]	; (800b58c <_vfiprintf_r+0x210>)
 800b47c:	1a80      	subs	r0, r0, r2
 800b47e:	fa0b f000 	lsl.w	r0, fp, r0
 800b482:	4318      	orrs	r0, r3
 800b484:	9004      	str	r0, [sp, #16]
 800b486:	4645      	mov	r5, r8
 800b488:	e7be      	b.n	800b408 <_vfiprintf_r+0x8c>
 800b48a:	9a03      	ldr	r2, [sp, #12]
 800b48c:	1d11      	adds	r1, r2, #4
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	9103      	str	r1, [sp, #12]
 800b492:	2a00      	cmp	r2, #0
 800b494:	db01      	blt.n	800b49a <_vfiprintf_r+0x11e>
 800b496:	9207      	str	r2, [sp, #28]
 800b498:	e004      	b.n	800b4a4 <_vfiprintf_r+0x128>
 800b49a:	4252      	negs	r2, r2
 800b49c:	f043 0302 	orr.w	r3, r3, #2
 800b4a0:	9207      	str	r2, [sp, #28]
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	f898 3000 	ldrb.w	r3, [r8]
 800b4a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4aa:	d10e      	bne.n	800b4ca <_vfiprintf_r+0x14e>
 800b4ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b2:	d138      	bne.n	800b526 <_vfiprintf_r+0x1aa>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	1d1a      	adds	r2, r3, #4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	9203      	str	r2, [sp, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bfb8      	it	lt
 800b4c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c4:	f108 0802 	add.w	r8, r8, #2
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	4d33      	ldr	r5, [pc, #204]	; (800b598 <_vfiprintf_r+0x21c>)
 800b4cc:	f898 1000 	ldrb.w	r1, [r8]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f7f4 ff0c 	bl	80002f0 <memchr>
 800b4d8:	b140      	cbz	r0, 800b4ec <_vfiprintf_r+0x170>
 800b4da:	2340      	movs	r3, #64	; 0x40
 800b4dc:	1b40      	subs	r0, r0, r5
 800b4de:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e2:	9b04      	ldr	r3, [sp, #16]
 800b4e4:	4303      	orrs	r3, r0
 800b4e6:	f108 0801 	add.w	r8, r8, #1
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	f898 1000 	ldrb.w	r1, [r8]
 800b4f0:	482a      	ldr	r0, [pc, #168]	; (800b59c <_vfiprintf_r+0x220>)
 800b4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	f108 0701 	add.w	r7, r8, #1
 800b4fc:	f7f4 fef8 	bl	80002f0 <memchr>
 800b500:	2800      	cmp	r0, #0
 800b502:	d037      	beq.n	800b574 <_vfiprintf_r+0x1f8>
 800b504:	4b26      	ldr	r3, [pc, #152]	; (800b5a0 <_vfiprintf_r+0x224>)
 800b506:	bb1b      	cbnz	r3, 800b550 <_vfiprintf_r+0x1d4>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	3307      	adds	r3, #7
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	3308      	adds	r3, #8
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b516:	444b      	add	r3, r9
 800b518:	9309      	str	r3, [sp, #36]	; 0x24
 800b51a:	e750      	b.n	800b3be <_vfiprintf_r+0x42>
 800b51c:	fb05 3202 	mla	r2, r5, r2, r3
 800b520:	2001      	movs	r0, #1
 800b522:	4688      	mov	r8, r1
 800b524:	e78a      	b.n	800b43c <_vfiprintf_r+0xc0>
 800b526:	2300      	movs	r3, #0
 800b528:	f108 0801 	add.w	r8, r8, #1
 800b52c:	9305      	str	r3, [sp, #20]
 800b52e:	4619      	mov	r1, r3
 800b530:	250a      	movs	r5, #10
 800b532:	4640      	mov	r0, r8
 800b534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b538:	3a30      	subs	r2, #48	; 0x30
 800b53a:	2a09      	cmp	r2, #9
 800b53c:	d903      	bls.n	800b546 <_vfiprintf_r+0x1ca>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0c3      	beq.n	800b4ca <_vfiprintf_r+0x14e>
 800b542:	9105      	str	r1, [sp, #20]
 800b544:	e7c1      	b.n	800b4ca <_vfiprintf_r+0x14e>
 800b546:	fb05 2101 	mla	r1, r5, r1, r2
 800b54a:	2301      	movs	r3, #1
 800b54c:	4680      	mov	r8, r0
 800b54e:	e7f0      	b.n	800b532 <_vfiprintf_r+0x1b6>
 800b550:	ab03      	add	r3, sp, #12
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	4622      	mov	r2, r4
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <_vfiprintf_r+0x228>)
 800b558:	a904      	add	r1, sp, #16
 800b55a:	4630      	mov	r0, r6
 800b55c:	f000 f8ac 	bl	800b6b8 <_printf_float>
 800b560:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b564:	4681      	mov	r9, r0
 800b566:	d1d5      	bne.n	800b514 <_vfiprintf_r+0x198>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	065b      	lsls	r3, r3, #25
 800b56c:	f53f af7e 	bmi.w	800b46c <_vfiprintf_r+0xf0>
 800b570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b572:	e77d      	b.n	800b470 <_vfiprintf_r+0xf4>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	4622      	mov	r2, r4
 800b57a:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <_vfiprintf_r+0x228>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4630      	mov	r0, r6
 800b580:	f000 fb3c 	bl	800bbfc <_printf_i>
 800b584:	e7ec      	b.n	800b560 <_vfiprintf_r+0x1e4>
 800b586:	bf00      	nop
 800b588:	0800dfc4 	.word	0x0800dfc4
 800b58c:	0800de4e 	.word	0x0800de4e
 800b590:	0800dfe4 	.word	0x0800dfe4
 800b594:	0800dfa4 	.word	0x0800dfa4
 800b598:	0800de54 	.word	0x0800de54
 800b59c:	0800de58 	.word	0x0800de58
 800b5a0:	0800b6b9 	.word	0x0800b6b9
 800b5a4:	0800b357 	.word	0x0800b357

0800b5a8 <__cvt>:
 800b5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5aa:	ed2d 8b02 	vpush	{d8}
 800b5ae:	eeb0 8b40 	vmov.f64	d8, d0
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	4617      	mov	r7, r2
 800b5b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b5b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b5ba:	ee18 2a90 	vmov	r2, s17
 800b5be:	f025 0520 	bic.w	r5, r5, #32
 800b5c2:	2a00      	cmp	r2, #0
 800b5c4:	bfb6      	itet	lt
 800b5c6:	222d      	movlt	r2, #45	; 0x2d
 800b5c8:	2200      	movge	r2, #0
 800b5ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800b5ce:	2d46      	cmp	r5, #70	; 0x46
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	d004      	beq.n	800b5e0 <__cvt+0x38>
 800b5d6:	2d45      	cmp	r5, #69	; 0x45
 800b5d8:	d100      	bne.n	800b5dc <__cvt+0x34>
 800b5da:	3401      	adds	r4, #1
 800b5dc:	2102      	movs	r1, #2
 800b5de:	e000      	b.n	800b5e2 <__cvt+0x3a>
 800b5e0:	2103      	movs	r1, #3
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	ab02      	add	r3, sp, #8
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	4633      	mov	r3, r6
 800b5ee:	eeb0 0b48 	vmov.f64	d0, d8
 800b5f2:	f000 fe21 	bl	800c238 <_dtoa_r>
 800b5f6:	2d47      	cmp	r5, #71	; 0x47
 800b5f8:	d101      	bne.n	800b5fe <__cvt+0x56>
 800b5fa:	07fb      	lsls	r3, r7, #31
 800b5fc:	d51e      	bpl.n	800b63c <__cvt+0x94>
 800b5fe:	2d46      	cmp	r5, #70	; 0x46
 800b600:	eb00 0304 	add.w	r3, r0, r4
 800b604:	d10c      	bne.n	800b620 <__cvt+0x78>
 800b606:	7802      	ldrb	r2, [r0, #0]
 800b608:	2a30      	cmp	r2, #48	; 0x30
 800b60a:	d107      	bne.n	800b61c <__cvt+0x74>
 800b60c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b614:	bf1c      	itt	ne
 800b616:	f1c4 0401 	rsbne	r4, r4, #1
 800b61a:	6034      	strne	r4, [r6, #0]
 800b61c:	6832      	ldr	r2, [r6, #0]
 800b61e:	4413      	add	r3, r2
 800b620:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b628:	d007      	beq.n	800b63a <__cvt+0x92>
 800b62a:	2130      	movs	r1, #48	; 0x30
 800b62c:	9a03      	ldr	r2, [sp, #12]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d204      	bcs.n	800b63c <__cvt+0x94>
 800b632:	1c54      	adds	r4, r2, #1
 800b634:	9403      	str	r4, [sp, #12]
 800b636:	7011      	strb	r1, [r2, #0]
 800b638:	e7f8      	b.n	800b62c <__cvt+0x84>
 800b63a:	9303      	str	r3, [sp, #12]
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b640:	1a1b      	subs	r3, r3, r0
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	b005      	add	sp, #20
 800b646:	ecbd 8b02 	vpop	{d8}
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b64c <__exponent>:
 800b64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b64e:	2900      	cmp	r1, #0
 800b650:	4604      	mov	r4, r0
 800b652:	bfba      	itte	lt
 800b654:	4249      	neglt	r1, r1
 800b656:	232d      	movlt	r3, #45	; 0x2d
 800b658:	232b      	movge	r3, #43	; 0x2b
 800b65a:	2909      	cmp	r1, #9
 800b65c:	f804 2b02 	strb.w	r2, [r4], #2
 800b660:	7043      	strb	r3, [r0, #1]
 800b662:	dd20      	ble.n	800b6a6 <__exponent+0x5a>
 800b664:	f10d 0307 	add.w	r3, sp, #7
 800b668:	461f      	mov	r7, r3
 800b66a:	260a      	movs	r6, #10
 800b66c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b670:	fb06 1115 	mls	r1, r6, r5, r1
 800b674:	3130      	adds	r1, #48	; 0x30
 800b676:	2d09      	cmp	r5, #9
 800b678:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b67c:	f103 32ff 	add.w	r2, r3, #4294967295
 800b680:	4629      	mov	r1, r5
 800b682:	dc09      	bgt.n	800b698 <__exponent+0x4c>
 800b684:	3130      	adds	r1, #48	; 0x30
 800b686:	3b02      	subs	r3, #2
 800b688:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b68c:	42bb      	cmp	r3, r7
 800b68e:	4622      	mov	r2, r4
 800b690:	d304      	bcc.n	800b69c <__exponent+0x50>
 800b692:	1a10      	subs	r0, r2, r0
 800b694:	b003      	add	sp, #12
 800b696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b698:	4613      	mov	r3, r2
 800b69a:	e7e7      	b.n	800b66c <__exponent+0x20>
 800b69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a0:	f804 2b01 	strb.w	r2, [r4], #1
 800b6a4:	e7f2      	b.n	800b68c <__exponent+0x40>
 800b6a6:	2330      	movs	r3, #48	; 0x30
 800b6a8:	4419      	add	r1, r3
 800b6aa:	7083      	strb	r3, [r0, #2]
 800b6ac:	1d02      	adds	r2, r0, #4
 800b6ae:	70c1      	strb	r1, [r0, #3]
 800b6b0:	e7ef      	b.n	800b692 <__exponent+0x46>
 800b6b2:	0000      	movs	r0, r0
 800b6b4:	0000      	movs	r0, r0
	...

0800b6b8 <_printf_float>:
 800b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	b08d      	sub	sp, #52	; 0x34
 800b6be:	460c      	mov	r4, r1
 800b6c0:	4616      	mov	r6, r2
 800b6c2:	461f      	mov	r7, r3
 800b6c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	f001 fc7b 	bl	800cfc4 <_localeconv_r>
 800b6ce:	f8d0 b000 	ldr.w	fp, [r0]
 800b6d2:	4658      	mov	r0, fp
 800b6d4:	f7f4 fe04 	bl	80002e0 <strlen>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	930a      	str	r3, [sp, #40]	; 0x28
 800b6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b6e0:	9005      	str	r0, [sp, #20]
 800b6e2:	3307      	adds	r3, #7
 800b6e4:	f023 0307 	bic.w	r3, r3, #7
 800b6e8:	f103 0108 	add.w	r1, r3, #8
 800b6ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b6f0:	6822      	ldr	r2, [r4, #0]
 800b6f2:	f8c8 1000 	str.w	r1, [r8]
 800b6f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b6fe:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b988 <_printf_float+0x2d0>
 800b702:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b706:	eeb0 6bc0 	vabs.f64	d6, d0
 800b70a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b712:	dd24      	ble.n	800b75e <_printf_float+0xa6>
 800b714:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71c:	d502      	bpl.n	800b724 <_printf_float+0x6c>
 800b71e:	232d      	movs	r3, #45	; 0x2d
 800b720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b724:	499a      	ldr	r1, [pc, #616]	; (800b990 <_printf_float+0x2d8>)
 800b726:	4b9b      	ldr	r3, [pc, #620]	; (800b994 <_printf_float+0x2dc>)
 800b728:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b72c:	bf8c      	ite	hi
 800b72e:	4688      	movhi	r8, r1
 800b730:	4698      	movls	r8, r3
 800b732:	f022 0204 	bic.w	r2, r2, #4
 800b736:	2303      	movs	r3, #3
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	6022      	str	r2, [r4, #0]
 800b73c:	f04f 0a00 	mov.w	sl, #0
 800b740:	9700      	str	r7, [sp, #0]
 800b742:	4633      	mov	r3, r6
 800b744:	aa0b      	add	r2, sp, #44	; 0x2c
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f9e1 	bl	800bb10 <_printf_common>
 800b74e:	3001      	adds	r0, #1
 800b750:	f040 8089 	bne.w	800b866 <_printf_float+0x1ae>
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	b00d      	add	sp, #52	; 0x34
 800b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b766:	d702      	bvc.n	800b76e <_printf_float+0xb6>
 800b768:	498b      	ldr	r1, [pc, #556]	; (800b998 <_printf_float+0x2e0>)
 800b76a:	4b8c      	ldr	r3, [pc, #560]	; (800b99c <_printf_float+0x2e4>)
 800b76c:	e7dc      	b.n	800b728 <_printf_float+0x70>
 800b76e:	6861      	ldr	r1, [r4, #4]
 800b770:	1c4b      	adds	r3, r1, #1
 800b772:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b776:	ab0a      	add	r3, sp, #40	; 0x28
 800b778:	a809      	add	r0, sp, #36	; 0x24
 800b77a:	d13b      	bne.n	800b7f4 <_printf_float+0x13c>
 800b77c:	2106      	movs	r1, #6
 800b77e:	6061      	str	r1, [r4, #4]
 800b780:	f04f 0c00 	mov.w	ip, #0
 800b784:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b788:	e9cd 0900 	strd	r0, r9, [sp]
 800b78c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b790:	6022      	str	r2, [r4, #0]
 800b792:	6861      	ldr	r1, [r4, #4]
 800b794:	4628      	mov	r0, r5
 800b796:	f7ff ff07 	bl	800b5a8 <__cvt>
 800b79a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b79e:	2b47      	cmp	r3, #71	; 0x47
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	d109      	bne.n	800b7b8 <_printf_float+0x100>
 800b7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a6:	1cd8      	adds	r0, r3, #3
 800b7a8:	db02      	blt.n	800b7b0 <_printf_float+0xf8>
 800b7aa:	6862      	ldr	r2, [r4, #4]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	dd47      	ble.n	800b840 <_printf_float+0x188>
 800b7b0:	f1a9 0902 	sub.w	r9, r9, #2
 800b7b4:	fa5f f989 	uxtb.w	r9, r9
 800b7b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7be:	d824      	bhi.n	800b80a <_printf_float+0x152>
 800b7c0:	3901      	subs	r1, #1
 800b7c2:	464a      	mov	r2, r9
 800b7c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b7ca:	f7ff ff3f 	bl	800b64c <__exponent>
 800b7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7d0:	1813      	adds	r3, r2, r0
 800b7d2:	2a01      	cmp	r2, #1
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	dc02      	bgt.n	800b7e0 <_printf_float+0x128>
 800b7da:	6822      	ldr	r2, [r4, #0]
 800b7dc:	07d1      	lsls	r1, r2, #31
 800b7de:	d501      	bpl.n	800b7e4 <_printf_float+0x12c>
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0a9      	beq.n	800b740 <_printf_float+0x88>
 800b7ec:	232d      	movs	r3, #45	; 0x2d
 800b7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f2:	e7a5      	b.n	800b740 <_printf_float+0x88>
 800b7f4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b7f8:	f000 8178 	beq.w	800baec <_printf_float+0x434>
 800b7fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b800:	d1be      	bne.n	800b780 <_printf_float+0xc8>
 800b802:	2900      	cmp	r1, #0
 800b804:	d1bc      	bne.n	800b780 <_printf_float+0xc8>
 800b806:	2101      	movs	r1, #1
 800b808:	e7b9      	b.n	800b77e <_printf_float+0xc6>
 800b80a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b80e:	d119      	bne.n	800b844 <_printf_float+0x18c>
 800b810:	2900      	cmp	r1, #0
 800b812:	6863      	ldr	r3, [r4, #4]
 800b814:	dd0c      	ble.n	800b830 <_printf_float+0x178>
 800b816:	6121      	str	r1, [r4, #16]
 800b818:	b913      	cbnz	r3, 800b820 <_printf_float+0x168>
 800b81a:	6822      	ldr	r2, [r4, #0]
 800b81c:	07d2      	lsls	r2, r2, #31
 800b81e:	d502      	bpl.n	800b826 <_printf_float+0x16e>
 800b820:	3301      	adds	r3, #1
 800b822:	440b      	add	r3, r1
 800b824:	6123      	str	r3, [r4, #16]
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	65a3      	str	r3, [r4, #88]	; 0x58
 800b82a:	f04f 0a00 	mov.w	sl, #0
 800b82e:	e7d9      	b.n	800b7e4 <_printf_float+0x12c>
 800b830:	b913      	cbnz	r3, 800b838 <_printf_float+0x180>
 800b832:	6822      	ldr	r2, [r4, #0]
 800b834:	07d0      	lsls	r0, r2, #31
 800b836:	d501      	bpl.n	800b83c <_printf_float+0x184>
 800b838:	3302      	adds	r3, #2
 800b83a:	e7f3      	b.n	800b824 <_printf_float+0x16c>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e7f1      	b.n	800b824 <_printf_float+0x16c>
 800b840:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b844:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b848:	4293      	cmp	r3, r2
 800b84a:	db05      	blt.n	800b858 <_printf_float+0x1a0>
 800b84c:	6822      	ldr	r2, [r4, #0]
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	07d1      	lsls	r1, r2, #31
 800b852:	d5e8      	bpl.n	800b826 <_printf_float+0x16e>
 800b854:	3301      	adds	r3, #1
 800b856:	e7e5      	b.n	800b824 <_printf_float+0x16c>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfd4      	ite	le
 800b85c:	f1c3 0302 	rsble	r3, r3, #2
 800b860:	2301      	movgt	r3, #1
 800b862:	4413      	add	r3, r2
 800b864:	e7de      	b.n	800b824 <_printf_float+0x16c>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	055a      	lsls	r2, r3, #21
 800b86a:	d407      	bmi.n	800b87c <_printf_float+0x1c4>
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	4642      	mov	r2, r8
 800b870:	4631      	mov	r1, r6
 800b872:	4628      	mov	r0, r5
 800b874:	47b8      	blx	r7
 800b876:	3001      	adds	r0, #1
 800b878:	d12a      	bne.n	800b8d0 <_printf_float+0x218>
 800b87a:	e76b      	b.n	800b754 <_printf_float+0x9c>
 800b87c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b880:	f240 80de 	bls.w	800ba40 <_printf_float+0x388>
 800b884:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b888:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b890:	d133      	bne.n	800b8fa <_printf_float+0x242>
 800b892:	2301      	movs	r3, #1
 800b894:	4a42      	ldr	r2, [pc, #264]	; (800b9a0 <_printf_float+0x2e8>)
 800b896:	4631      	mov	r1, r6
 800b898:	4628      	mov	r0, r5
 800b89a:	47b8      	blx	r7
 800b89c:	3001      	adds	r0, #1
 800b89e:	f43f af59 	beq.w	800b754 <_printf_float+0x9c>
 800b8a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	db02      	blt.n	800b8b0 <_printf_float+0x1f8>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	07d8      	lsls	r0, r3, #31
 800b8ae:	d50f      	bpl.n	800b8d0 <_printf_float+0x218>
 800b8b0:	9b05      	ldr	r3, [sp, #20]
 800b8b2:	465a      	mov	r2, fp
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	f43f af4a 	beq.w	800b754 <_printf_float+0x9c>
 800b8c0:	f04f 0800 	mov.w	r8, #0
 800b8c4:	f104 091a 	add.w	r9, r4, #26
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	4543      	cmp	r3, r8
 800b8ce:	dc09      	bgt.n	800b8e4 <_printf_float+0x22c>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	079b      	lsls	r3, r3, #30
 800b8d4:	f100 8105 	bmi.w	800bae2 <_printf_float+0x42a>
 800b8d8:	68e0      	ldr	r0, [r4, #12]
 800b8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8dc:	4298      	cmp	r0, r3
 800b8de:	bfb8      	it	lt
 800b8e0:	4618      	movlt	r0, r3
 800b8e2:	e739      	b.n	800b758 <_printf_float+0xa0>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	464a      	mov	r2, r9
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b8      	blx	r7
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f43f af30 	beq.w	800b754 <_printf_float+0x9c>
 800b8f4:	f108 0801 	add.w	r8, r8, #1
 800b8f8:	e7e6      	b.n	800b8c8 <_printf_float+0x210>
 800b8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	dc2b      	bgt.n	800b958 <_printf_float+0x2a0>
 800b900:	2301      	movs	r3, #1
 800b902:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <_printf_float+0x2e8>)
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	f43f af22 	beq.w	800b754 <_printf_float+0x9c>
 800b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b912:	b923      	cbnz	r3, 800b91e <_printf_float+0x266>
 800b914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b916:	b913      	cbnz	r3, 800b91e <_printf_float+0x266>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	07d9      	lsls	r1, r3, #31
 800b91c:	d5d8      	bpl.n	800b8d0 <_printf_float+0x218>
 800b91e:	9b05      	ldr	r3, [sp, #20]
 800b920:	465a      	mov	r2, fp
 800b922:	4631      	mov	r1, r6
 800b924:	4628      	mov	r0, r5
 800b926:	47b8      	blx	r7
 800b928:	3001      	adds	r0, #1
 800b92a:	f43f af13 	beq.w	800b754 <_printf_float+0x9c>
 800b92e:	f04f 0900 	mov.w	r9, #0
 800b932:	f104 0a1a 	add.w	sl, r4, #26
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	425b      	negs	r3, r3
 800b93a:	454b      	cmp	r3, r9
 800b93c:	dc01      	bgt.n	800b942 <_printf_float+0x28a>
 800b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b940:	e795      	b.n	800b86e <_printf_float+0x1b6>
 800b942:	2301      	movs	r3, #1
 800b944:	4652      	mov	r2, sl
 800b946:	4631      	mov	r1, r6
 800b948:	4628      	mov	r0, r5
 800b94a:	47b8      	blx	r7
 800b94c:	3001      	adds	r0, #1
 800b94e:	f43f af01 	beq.w	800b754 <_printf_float+0x9c>
 800b952:	f109 0901 	add.w	r9, r9, #1
 800b956:	e7ee      	b.n	800b936 <_printf_float+0x27e>
 800b958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b95a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b95c:	429a      	cmp	r2, r3
 800b95e:	bfa8      	it	ge
 800b960:	461a      	movge	r2, r3
 800b962:	2a00      	cmp	r2, #0
 800b964:	4691      	mov	r9, r2
 800b966:	dd07      	ble.n	800b978 <_printf_float+0x2c0>
 800b968:	4613      	mov	r3, r2
 800b96a:	4631      	mov	r1, r6
 800b96c:	4642      	mov	r2, r8
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	f43f aeee 	beq.w	800b754 <_printf_float+0x9c>
 800b978:	f104 031a 	add.w	r3, r4, #26
 800b97c:	f04f 0a00 	mov.w	sl, #0
 800b980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b984:	9307      	str	r3, [sp, #28]
 800b986:	e017      	b.n	800b9b8 <_printf_float+0x300>
 800b988:	ffffffff 	.word	0xffffffff
 800b98c:	7fefffff 	.word	0x7fefffff
 800b990:	0800de63 	.word	0x0800de63
 800b994:	0800de5f 	.word	0x0800de5f
 800b998:	0800de6b 	.word	0x0800de6b
 800b99c:	0800de67 	.word	0x0800de67
 800b9a0:	0800de6f 	.word	0x0800de6f
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	9a07      	ldr	r2, [sp, #28]
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b8      	blx	r7
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	f43f aed0 	beq.w	800b754 <_printf_float+0x9c>
 800b9b4:	f10a 0a01 	add.w	sl, sl, #1
 800b9b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9ba:	9306      	str	r3, [sp, #24]
 800b9bc:	eba3 0309 	sub.w	r3, r3, r9
 800b9c0:	4553      	cmp	r3, sl
 800b9c2:	dcef      	bgt.n	800b9a4 <_printf_float+0x2ec>
 800b9c4:	9b06      	ldr	r3, [sp, #24]
 800b9c6:	4498      	add	r8, r3
 800b9c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	db15      	blt.n	800b9fc <_printf_float+0x344>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	07da      	lsls	r2, r3, #31
 800b9d4:	d412      	bmi.n	800b9fc <_printf_float+0x344>
 800b9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d8:	9a06      	ldr	r2, [sp, #24]
 800b9da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9dc:	1a9a      	subs	r2, r3, r2
 800b9de:	eba3 0a01 	sub.w	sl, r3, r1
 800b9e2:	4592      	cmp	sl, r2
 800b9e4:	bfa8      	it	ge
 800b9e6:	4692      	movge	sl, r2
 800b9e8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ec:	dc0e      	bgt.n	800ba0c <_printf_float+0x354>
 800b9ee:	f04f 0800 	mov.w	r8, #0
 800b9f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9f6:	f104 091a 	add.w	r9, r4, #26
 800b9fa:	e019      	b.n	800ba30 <_printf_float+0x378>
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	465a      	mov	r2, fp
 800ba00:	4631      	mov	r1, r6
 800ba02:	4628      	mov	r0, r5
 800ba04:	47b8      	blx	r7
 800ba06:	3001      	adds	r0, #1
 800ba08:	d1e5      	bne.n	800b9d6 <_printf_float+0x31e>
 800ba0a:	e6a3      	b.n	800b754 <_printf_float+0x9c>
 800ba0c:	4653      	mov	r3, sl
 800ba0e:	4642      	mov	r2, r8
 800ba10:	4631      	mov	r1, r6
 800ba12:	4628      	mov	r0, r5
 800ba14:	47b8      	blx	r7
 800ba16:	3001      	adds	r0, #1
 800ba18:	d1e9      	bne.n	800b9ee <_printf_float+0x336>
 800ba1a:	e69b      	b.n	800b754 <_printf_float+0x9c>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	464a      	mov	r2, r9
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f ae94 	beq.w	800b754 <_printf_float+0x9c>
 800ba2c:	f108 0801 	add.w	r8, r8, #1
 800ba30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	eba3 030a 	sub.w	r3, r3, sl
 800ba3a:	4543      	cmp	r3, r8
 800ba3c:	dcee      	bgt.n	800ba1c <_printf_float+0x364>
 800ba3e:	e747      	b.n	800b8d0 <_printf_float+0x218>
 800ba40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba42:	2a01      	cmp	r2, #1
 800ba44:	dc01      	bgt.n	800ba4a <_printf_float+0x392>
 800ba46:	07db      	lsls	r3, r3, #31
 800ba48:	d539      	bpl.n	800babe <_printf_float+0x406>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b8      	blx	r7
 800ba54:	3001      	adds	r0, #1
 800ba56:	f43f ae7d 	beq.w	800b754 <_printf_float+0x9c>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	465a      	mov	r2, fp
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4628      	mov	r0, r5
 800ba62:	47b8      	blx	r7
 800ba64:	3001      	adds	r0, #1
 800ba66:	f108 0801 	add.w	r8, r8, #1
 800ba6a:	f43f ae73 	beq.w	800b754 <_printf_float+0x9c>
 800ba6e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ba72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba80:	d018      	beq.n	800bab4 <_printf_float+0x3fc>
 800ba82:	4642      	mov	r2, r8
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d10e      	bne.n	800baac <_printf_float+0x3f4>
 800ba8e:	e661      	b.n	800b754 <_printf_float+0x9c>
 800ba90:	2301      	movs	r3, #1
 800ba92:	464a      	mov	r2, r9
 800ba94:	4631      	mov	r1, r6
 800ba96:	4628      	mov	r0, r5
 800ba98:	47b8      	blx	r7
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f43f ae5a 	beq.w	800b754 <_printf_float+0x9c>
 800baa0:	f108 0801 	add.w	r8, r8, #1
 800baa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa6:	3b01      	subs	r3, #1
 800baa8:	4543      	cmp	r3, r8
 800baaa:	dcf1      	bgt.n	800ba90 <_printf_float+0x3d8>
 800baac:	4653      	mov	r3, sl
 800baae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bab2:	e6dd      	b.n	800b870 <_printf_float+0x1b8>
 800bab4:	f04f 0800 	mov.w	r8, #0
 800bab8:	f104 091a 	add.w	r9, r4, #26
 800babc:	e7f2      	b.n	800baa4 <_printf_float+0x3ec>
 800babe:	2301      	movs	r3, #1
 800bac0:	e7df      	b.n	800ba82 <_printf_float+0x3ca>
 800bac2:	2301      	movs	r3, #1
 800bac4:	464a      	mov	r2, r9
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	f43f ae41 	beq.w	800b754 <_printf_float+0x9c>
 800bad2:	f108 0801 	add.w	r8, r8, #1
 800bad6:	68e3      	ldr	r3, [r4, #12]
 800bad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bada:	1a9b      	subs	r3, r3, r2
 800badc:	4543      	cmp	r3, r8
 800bade:	dcf0      	bgt.n	800bac2 <_printf_float+0x40a>
 800bae0:	e6fa      	b.n	800b8d8 <_printf_float+0x220>
 800bae2:	f04f 0800 	mov.w	r8, #0
 800bae6:	f104 0919 	add.w	r9, r4, #25
 800baea:	e7f4      	b.n	800bad6 <_printf_float+0x41e>
 800baec:	2900      	cmp	r1, #0
 800baee:	f43f ae8a 	beq.w	800b806 <_printf_float+0x14e>
 800baf2:	f04f 0c00 	mov.w	ip, #0
 800baf6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800bafa:	e9cd 0900 	strd	r0, r9, [sp]
 800bafe:	6022      	str	r2, [r4, #0]
 800bb00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7ff fd4f 	bl	800b5a8 <__cvt>
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	e64a      	b.n	800b7a4 <_printf_float+0xec>
 800bb0e:	bf00      	nop

0800bb10 <_printf_common>:
 800bb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	4691      	mov	r9, r2
 800bb16:	461f      	mov	r7, r3
 800bb18:	688a      	ldr	r2, [r1, #8]
 800bb1a:	690b      	ldr	r3, [r1, #16]
 800bb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bfb8      	it	lt
 800bb24:	4613      	movlt	r3, r2
 800bb26:	f8c9 3000 	str.w	r3, [r9]
 800bb2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460c      	mov	r4, r1
 800bb32:	b112      	cbz	r2, 800bb3a <_printf_common+0x2a>
 800bb34:	3301      	adds	r3, #1
 800bb36:	f8c9 3000 	str.w	r3, [r9]
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	0699      	lsls	r1, r3, #26
 800bb3e:	bf42      	ittt	mi
 800bb40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bb44:	3302      	addmi	r3, #2
 800bb46:	f8c9 3000 	strmi.w	r3, [r9]
 800bb4a:	6825      	ldr	r5, [r4, #0]
 800bb4c:	f015 0506 	ands.w	r5, r5, #6
 800bb50:	d107      	bne.n	800bb62 <_printf_common+0x52>
 800bb52:	f104 0a19 	add.w	sl, r4, #25
 800bb56:	68e3      	ldr	r3, [r4, #12]
 800bb58:	f8d9 2000 	ldr.w	r2, [r9]
 800bb5c:	1a9b      	subs	r3, r3, r2
 800bb5e:	42ab      	cmp	r3, r5
 800bb60:	dc28      	bgt.n	800bbb4 <_printf_common+0xa4>
 800bb62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb66:	6822      	ldr	r2, [r4, #0]
 800bb68:	3300      	adds	r3, #0
 800bb6a:	bf18      	it	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	0692      	lsls	r2, r2, #26
 800bb70:	d42d      	bmi.n	800bbce <_printf_common+0xbe>
 800bb72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb76:	4639      	mov	r1, r7
 800bb78:	4630      	mov	r0, r6
 800bb7a:	47c0      	blx	r8
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d020      	beq.n	800bbc2 <_printf_common+0xb2>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	68e5      	ldr	r5, [r4, #12]
 800bb84:	f8d9 2000 	ldr.w	r2, [r9]
 800bb88:	f003 0306 	and.w	r3, r3, #6
 800bb8c:	2b04      	cmp	r3, #4
 800bb8e:	bf08      	it	eq
 800bb90:	1aad      	subeq	r5, r5, r2
 800bb92:	68a3      	ldr	r3, [r4, #8]
 800bb94:	6922      	ldr	r2, [r4, #16]
 800bb96:	bf0c      	ite	eq
 800bb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb9c:	2500      	movne	r5, #0
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	bfc4      	itt	gt
 800bba2:	1a9b      	subgt	r3, r3, r2
 800bba4:	18ed      	addgt	r5, r5, r3
 800bba6:	f04f 0900 	mov.w	r9, #0
 800bbaa:	341a      	adds	r4, #26
 800bbac:	454d      	cmp	r5, r9
 800bbae:	d11a      	bne.n	800bbe6 <_printf_common+0xd6>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	e008      	b.n	800bbc6 <_printf_common+0xb6>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	4652      	mov	r2, sl
 800bbb8:	4639      	mov	r1, r7
 800bbba:	4630      	mov	r0, r6
 800bbbc:	47c0      	blx	r8
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	d103      	bne.n	800bbca <_printf_common+0xba>
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	3501      	adds	r5, #1
 800bbcc:	e7c3      	b.n	800bb56 <_printf_common+0x46>
 800bbce:	18e1      	adds	r1, r4, r3
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	2030      	movs	r0, #48	; 0x30
 800bbd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbd8:	4422      	add	r2, r4
 800bbda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbe2:	3302      	adds	r3, #2
 800bbe4:	e7c5      	b.n	800bb72 <_printf_common+0x62>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4639      	mov	r1, r7
 800bbec:	4630      	mov	r0, r6
 800bbee:	47c0      	blx	r8
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d0e6      	beq.n	800bbc2 <_printf_common+0xb2>
 800bbf4:	f109 0901 	add.w	r9, r9, #1
 800bbf8:	e7d8      	b.n	800bbac <_printf_common+0x9c>
	...

0800bbfc <_printf_i>:
 800bbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc04:	460c      	mov	r4, r1
 800bc06:	7e09      	ldrb	r1, [r1, #24]
 800bc08:	b085      	sub	sp, #20
 800bc0a:	296e      	cmp	r1, #110	; 0x6e
 800bc0c:	4617      	mov	r7, r2
 800bc0e:	4606      	mov	r6, r0
 800bc10:	4698      	mov	r8, r3
 800bc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc14:	f000 80b3 	beq.w	800bd7e <_printf_i+0x182>
 800bc18:	d822      	bhi.n	800bc60 <_printf_i+0x64>
 800bc1a:	2963      	cmp	r1, #99	; 0x63
 800bc1c:	d036      	beq.n	800bc8c <_printf_i+0x90>
 800bc1e:	d80a      	bhi.n	800bc36 <_printf_i+0x3a>
 800bc20:	2900      	cmp	r1, #0
 800bc22:	f000 80b9 	beq.w	800bd98 <_printf_i+0x19c>
 800bc26:	2958      	cmp	r1, #88	; 0x58
 800bc28:	f000 8083 	beq.w	800bd32 <_printf_i+0x136>
 800bc2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bc34:	e032      	b.n	800bc9c <_printf_i+0xa0>
 800bc36:	2964      	cmp	r1, #100	; 0x64
 800bc38:	d001      	beq.n	800bc3e <_printf_i+0x42>
 800bc3a:	2969      	cmp	r1, #105	; 0x69
 800bc3c:	d1f6      	bne.n	800bc2c <_printf_i+0x30>
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	6813      	ldr	r3, [r2, #0]
 800bc42:	0605      	lsls	r5, r0, #24
 800bc44:	f103 0104 	add.w	r1, r3, #4
 800bc48:	d52a      	bpl.n	800bca0 <_printf_i+0xa4>
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6011      	str	r1, [r2, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	da03      	bge.n	800bc5a <_printf_i+0x5e>
 800bc52:	222d      	movs	r2, #45	; 0x2d
 800bc54:	425b      	negs	r3, r3
 800bc56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bc5a:	486f      	ldr	r0, [pc, #444]	; (800be18 <_printf_i+0x21c>)
 800bc5c:	220a      	movs	r2, #10
 800bc5e:	e039      	b.n	800bcd4 <_printf_i+0xd8>
 800bc60:	2973      	cmp	r1, #115	; 0x73
 800bc62:	f000 809d 	beq.w	800bda0 <_printf_i+0x1a4>
 800bc66:	d808      	bhi.n	800bc7a <_printf_i+0x7e>
 800bc68:	296f      	cmp	r1, #111	; 0x6f
 800bc6a:	d020      	beq.n	800bcae <_printf_i+0xb2>
 800bc6c:	2970      	cmp	r1, #112	; 0x70
 800bc6e:	d1dd      	bne.n	800bc2c <_printf_i+0x30>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	f043 0320 	orr.w	r3, r3, #32
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	e003      	b.n	800bc82 <_printf_i+0x86>
 800bc7a:	2975      	cmp	r1, #117	; 0x75
 800bc7c:	d017      	beq.n	800bcae <_printf_i+0xb2>
 800bc7e:	2978      	cmp	r1, #120	; 0x78
 800bc80:	d1d4      	bne.n	800bc2c <_printf_i+0x30>
 800bc82:	2378      	movs	r3, #120	; 0x78
 800bc84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc88:	4864      	ldr	r0, [pc, #400]	; (800be1c <_printf_i+0x220>)
 800bc8a:	e055      	b.n	800bd38 <_printf_i+0x13c>
 800bc8c:	6813      	ldr	r3, [r2, #0]
 800bc8e:	1d19      	adds	r1, r3, #4
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6011      	str	r1, [r2, #0]
 800bc94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e08c      	b.n	800bdba <_printf_i+0x1be>
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6011      	str	r1, [r2, #0]
 800bca4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bca8:	bf18      	it	ne
 800bcaa:	b21b      	sxthne	r3, r3
 800bcac:	e7cf      	b.n	800bc4e <_printf_i+0x52>
 800bcae:	6813      	ldr	r3, [r2, #0]
 800bcb0:	6825      	ldr	r5, [r4, #0]
 800bcb2:	1d18      	adds	r0, r3, #4
 800bcb4:	6010      	str	r0, [r2, #0]
 800bcb6:	0628      	lsls	r0, r5, #24
 800bcb8:	d501      	bpl.n	800bcbe <_printf_i+0xc2>
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	e002      	b.n	800bcc4 <_printf_i+0xc8>
 800bcbe:	0668      	lsls	r0, r5, #25
 800bcc0:	d5fb      	bpl.n	800bcba <_printf_i+0xbe>
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	4854      	ldr	r0, [pc, #336]	; (800be18 <_printf_i+0x21c>)
 800bcc6:	296f      	cmp	r1, #111	; 0x6f
 800bcc8:	bf14      	ite	ne
 800bcca:	220a      	movne	r2, #10
 800bccc:	2208      	moveq	r2, #8
 800bcce:	2100      	movs	r1, #0
 800bcd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcd4:	6865      	ldr	r5, [r4, #4]
 800bcd6:	60a5      	str	r5, [r4, #8]
 800bcd8:	2d00      	cmp	r5, #0
 800bcda:	f2c0 8095 	blt.w	800be08 <_printf_i+0x20c>
 800bcde:	6821      	ldr	r1, [r4, #0]
 800bce0:	f021 0104 	bic.w	r1, r1, #4
 800bce4:	6021      	str	r1, [r4, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d13d      	bne.n	800bd66 <_printf_i+0x16a>
 800bcea:	2d00      	cmp	r5, #0
 800bcec:	f040 808e 	bne.w	800be0c <_printf_i+0x210>
 800bcf0:	4665      	mov	r5, ip
 800bcf2:	2a08      	cmp	r2, #8
 800bcf4:	d10b      	bne.n	800bd0e <_printf_i+0x112>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	07db      	lsls	r3, r3, #31
 800bcfa:	d508      	bpl.n	800bd0e <_printf_i+0x112>
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	6862      	ldr	r2, [r4, #4]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	bfde      	ittt	le
 800bd04:	2330      	movle	r3, #48	; 0x30
 800bd06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd0e:	ebac 0305 	sub.w	r3, ip, r5
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	f8cd 8000 	str.w	r8, [sp]
 800bd18:	463b      	mov	r3, r7
 800bd1a:	aa03      	add	r2, sp, #12
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f7ff fef6 	bl	800bb10 <_printf_common>
 800bd24:	3001      	adds	r0, #1
 800bd26:	d14d      	bne.n	800bdc4 <_printf_i+0x1c8>
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	b005      	add	sp, #20
 800bd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd32:	4839      	ldr	r0, [pc, #228]	; (800be18 <_printf_i+0x21c>)
 800bd34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd38:	6813      	ldr	r3, [r2, #0]
 800bd3a:	6821      	ldr	r1, [r4, #0]
 800bd3c:	1d1d      	adds	r5, r3, #4
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6015      	str	r5, [r2, #0]
 800bd42:	060a      	lsls	r2, r1, #24
 800bd44:	d50b      	bpl.n	800bd5e <_printf_i+0x162>
 800bd46:	07ca      	lsls	r2, r1, #31
 800bd48:	bf44      	itt	mi
 800bd4a:	f041 0120 	orrmi.w	r1, r1, #32
 800bd4e:	6021      	strmi	r1, [r4, #0]
 800bd50:	b91b      	cbnz	r3, 800bd5a <_printf_i+0x15e>
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	f022 0220 	bic.w	r2, r2, #32
 800bd58:	6022      	str	r2, [r4, #0]
 800bd5a:	2210      	movs	r2, #16
 800bd5c:	e7b7      	b.n	800bcce <_printf_i+0xd2>
 800bd5e:	064d      	lsls	r5, r1, #25
 800bd60:	bf48      	it	mi
 800bd62:	b29b      	uxthmi	r3, r3
 800bd64:	e7ef      	b.n	800bd46 <_printf_i+0x14a>
 800bd66:	4665      	mov	r5, ip
 800bd68:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd6c:	fb02 3311 	mls	r3, r2, r1, r3
 800bd70:	5cc3      	ldrb	r3, [r0, r3]
 800bd72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd76:	460b      	mov	r3, r1
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d1f5      	bne.n	800bd68 <_printf_i+0x16c>
 800bd7c:	e7b9      	b.n	800bcf2 <_printf_i+0xf6>
 800bd7e:	6813      	ldr	r3, [r2, #0]
 800bd80:	6825      	ldr	r5, [r4, #0]
 800bd82:	6961      	ldr	r1, [r4, #20]
 800bd84:	1d18      	adds	r0, r3, #4
 800bd86:	6010      	str	r0, [r2, #0]
 800bd88:	0628      	lsls	r0, r5, #24
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	d501      	bpl.n	800bd92 <_printf_i+0x196>
 800bd8e:	6019      	str	r1, [r3, #0]
 800bd90:	e002      	b.n	800bd98 <_printf_i+0x19c>
 800bd92:	066a      	lsls	r2, r5, #25
 800bd94:	d5fb      	bpl.n	800bd8e <_printf_i+0x192>
 800bd96:	8019      	strh	r1, [r3, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	4665      	mov	r5, ip
 800bd9e:	e7b9      	b.n	800bd14 <_printf_i+0x118>
 800bda0:	6813      	ldr	r3, [r2, #0]
 800bda2:	1d19      	adds	r1, r3, #4
 800bda4:	6011      	str	r1, [r2, #0]
 800bda6:	681d      	ldr	r5, [r3, #0]
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	4628      	mov	r0, r5
 800bdae:	f7f4 fa9f 	bl	80002f0 <memchr>
 800bdb2:	b108      	cbz	r0, 800bdb8 <_printf_i+0x1bc>
 800bdb4:	1b40      	subs	r0, r0, r5
 800bdb6:	6060      	str	r0, [r4, #4]
 800bdb8:	6863      	ldr	r3, [r4, #4]
 800bdba:	6123      	str	r3, [r4, #16]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc2:	e7a7      	b.n	800bd14 <_printf_i+0x118>
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4639      	mov	r1, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	47c0      	blx	r8
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d0aa      	beq.n	800bd28 <_printf_i+0x12c>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	079b      	lsls	r3, r3, #30
 800bdd6:	d413      	bmi.n	800be00 <_printf_i+0x204>
 800bdd8:	68e0      	ldr	r0, [r4, #12]
 800bdda:	9b03      	ldr	r3, [sp, #12]
 800bddc:	4298      	cmp	r0, r3
 800bdde:	bfb8      	it	lt
 800bde0:	4618      	movlt	r0, r3
 800bde2:	e7a3      	b.n	800bd2c <_printf_i+0x130>
 800bde4:	2301      	movs	r3, #1
 800bde6:	464a      	mov	r2, r9
 800bde8:	4639      	mov	r1, r7
 800bdea:	4630      	mov	r0, r6
 800bdec:	47c0      	blx	r8
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d09a      	beq.n	800bd28 <_printf_i+0x12c>
 800bdf2:	3501      	adds	r5, #1
 800bdf4:	68e3      	ldr	r3, [r4, #12]
 800bdf6:	9a03      	ldr	r2, [sp, #12]
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	42ab      	cmp	r3, r5
 800bdfc:	dcf2      	bgt.n	800bde4 <_printf_i+0x1e8>
 800bdfe:	e7eb      	b.n	800bdd8 <_printf_i+0x1dc>
 800be00:	2500      	movs	r5, #0
 800be02:	f104 0919 	add.w	r9, r4, #25
 800be06:	e7f5      	b.n	800bdf4 <_printf_i+0x1f8>
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1ac      	bne.n	800bd66 <_printf_i+0x16a>
 800be0c:	7803      	ldrb	r3, [r0, #0]
 800be0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be16:	e76c      	b.n	800bcf2 <_printf_i+0xf6>
 800be18:	0800de71 	.word	0x0800de71
 800be1c:	0800de82 	.word	0x0800de82

0800be20 <iprintf>:
 800be20:	b40f      	push	{r0, r1, r2, r3}
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <iprintf+0x2c>)
 800be24:	b513      	push	{r0, r1, r4, lr}
 800be26:	681c      	ldr	r4, [r3, #0]
 800be28:	b124      	cbz	r4, 800be34 <iprintf+0x14>
 800be2a:	69a3      	ldr	r3, [r4, #24]
 800be2c:	b913      	cbnz	r3, 800be34 <iprintf+0x14>
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 f83e 	bl	800ceb0 <__sinit>
 800be34:	ab05      	add	r3, sp, #20
 800be36:	9a04      	ldr	r2, [sp, #16]
 800be38:	68a1      	ldr	r1, [r4, #8]
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	4620      	mov	r0, r4
 800be3e:	f7ff fa9d 	bl	800b37c <_vfiprintf_r>
 800be42:	b002      	add	sp, #8
 800be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be48:	b004      	add	sp, #16
 800be4a:	4770      	bx	lr
 800be4c:	24000014 	.word	0x24000014

0800be50 <putchar>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <putchar+0x24>)
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	4605      	mov	r5, r0
 800be58:	b124      	cbz	r4, 800be64 <putchar+0x14>
 800be5a:	69a3      	ldr	r3, [r4, #24]
 800be5c:	b913      	cbnz	r3, 800be64 <putchar+0x14>
 800be5e:	4620      	mov	r0, r4
 800be60:	f001 f826 	bl	800ceb0 <__sinit>
 800be64:	68a2      	ldr	r2, [r4, #8]
 800be66:	4629      	mov	r1, r5
 800be68:	4620      	mov	r0, r4
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f001 be2d 	b.w	800dacc <_putc_r>
 800be72:	bf00      	nop
 800be74:	24000014 	.word	0x24000014

0800be78 <_puts_r>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	460e      	mov	r6, r1
 800be7c:	4605      	mov	r5, r0
 800be7e:	b118      	cbz	r0, 800be88 <_puts_r+0x10>
 800be80:	6983      	ldr	r3, [r0, #24]
 800be82:	b90b      	cbnz	r3, 800be88 <_puts_r+0x10>
 800be84:	f001 f814 	bl	800ceb0 <__sinit>
 800be88:	69ab      	ldr	r3, [r5, #24]
 800be8a:	68ac      	ldr	r4, [r5, #8]
 800be8c:	b913      	cbnz	r3, 800be94 <_puts_r+0x1c>
 800be8e:	4628      	mov	r0, r5
 800be90:	f001 f80e 	bl	800ceb0 <__sinit>
 800be94:	4b23      	ldr	r3, [pc, #140]	; (800bf24 <_puts_r+0xac>)
 800be96:	429c      	cmp	r4, r3
 800be98:	d117      	bne.n	800beca <_puts_r+0x52>
 800be9a:	686c      	ldr	r4, [r5, #4]
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	071b      	lsls	r3, r3, #28
 800bea0:	d51d      	bpl.n	800bede <_puts_r+0x66>
 800bea2:	6923      	ldr	r3, [r4, #16]
 800bea4:	b1db      	cbz	r3, 800bede <_puts_r+0x66>
 800bea6:	3e01      	subs	r6, #1
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800beae:	3b01      	subs	r3, #1
 800beb0:	60a3      	str	r3, [r4, #8]
 800beb2:	b9e9      	cbnz	r1, 800bef0 <_puts_r+0x78>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da2e      	bge.n	800bf16 <_puts_r+0x9e>
 800beb8:	4622      	mov	r2, r4
 800beba:	210a      	movs	r1, #10
 800bebc:	4628      	mov	r0, r5
 800bebe:	f000 f85f 	bl	800bf80 <__swbuf_r>
 800bec2:	3001      	adds	r0, #1
 800bec4:	d011      	beq.n	800beea <_puts_r+0x72>
 800bec6:	200a      	movs	r0, #10
 800bec8:	e011      	b.n	800beee <_puts_r+0x76>
 800beca:	4b17      	ldr	r3, [pc, #92]	; (800bf28 <_puts_r+0xb0>)
 800becc:	429c      	cmp	r4, r3
 800bece:	d101      	bne.n	800bed4 <_puts_r+0x5c>
 800bed0:	68ac      	ldr	r4, [r5, #8]
 800bed2:	e7e3      	b.n	800be9c <_puts_r+0x24>
 800bed4:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <_puts_r+0xb4>)
 800bed6:	429c      	cmp	r4, r3
 800bed8:	bf08      	it	eq
 800beda:	68ec      	ldreq	r4, [r5, #12]
 800bedc:	e7de      	b.n	800be9c <_puts_r+0x24>
 800bede:	4621      	mov	r1, r4
 800bee0:	4628      	mov	r0, r5
 800bee2:	f000 f8ad 	bl	800c040 <__swsetup_r>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d0dd      	beq.n	800bea6 <_puts_r+0x2e>
 800beea:	f04f 30ff 	mov.w	r0, #4294967295
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	da04      	bge.n	800befe <_puts_r+0x86>
 800bef4:	69a2      	ldr	r2, [r4, #24]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	dc06      	bgt.n	800bf08 <_puts_r+0x90>
 800befa:	290a      	cmp	r1, #10
 800befc:	d004      	beq.n	800bf08 <_puts_r+0x90>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	7019      	strb	r1, [r3, #0]
 800bf06:	e7cf      	b.n	800bea8 <_puts_r+0x30>
 800bf08:	4622      	mov	r2, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 f838 	bl	800bf80 <__swbuf_r>
 800bf10:	3001      	adds	r0, #1
 800bf12:	d1c9      	bne.n	800bea8 <_puts_r+0x30>
 800bf14:	e7e9      	b.n	800beea <_puts_r+0x72>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	200a      	movs	r0, #10
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	7018      	strb	r0, [r3, #0]
 800bf20:	e7e5      	b.n	800beee <_puts_r+0x76>
 800bf22:	bf00      	nop
 800bf24:	0800dfc4 	.word	0x0800dfc4
 800bf28:	0800dfe4 	.word	0x0800dfe4
 800bf2c:	0800dfa4 	.word	0x0800dfa4

0800bf30 <puts>:
 800bf30:	4b02      	ldr	r3, [pc, #8]	; (800bf3c <puts+0xc>)
 800bf32:	4601      	mov	r1, r0
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	f7ff bf9f 	b.w	800be78 <_puts_r>
 800bf3a:	bf00      	nop
 800bf3c:	24000014 	.word	0x24000014

0800bf40 <_vsiprintf_r>:
 800bf40:	b500      	push	{lr}
 800bf42:	b09b      	sub	sp, #108	; 0x6c
 800bf44:	9100      	str	r1, [sp, #0]
 800bf46:	9104      	str	r1, [sp, #16]
 800bf48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf4c:	9105      	str	r1, [sp, #20]
 800bf4e:	9102      	str	r1, [sp, #8]
 800bf50:	4905      	ldr	r1, [pc, #20]	; (800bf68 <_vsiprintf_r+0x28>)
 800bf52:	9103      	str	r1, [sp, #12]
 800bf54:	4669      	mov	r1, sp
 800bf56:	f001 fcc1 	bl	800d8dc <_svfiprintf_r>
 800bf5a:	9b00      	ldr	r3, [sp, #0]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	b01b      	add	sp, #108	; 0x6c
 800bf62:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf66:	bf00      	nop
 800bf68:	ffff0208 	.word	0xffff0208

0800bf6c <vsiprintf>:
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	460a      	mov	r2, r1
 800bf70:	4601      	mov	r1, r0
 800bf72:	4802      	ldr	r0, [pc, #8]	; (800bf7c <vsiprintf+0x10>)
 800bf74:	6800      	ldr	r0, [r0, #0]
 800bf76:	f7ff bfe3 	b.w	800bf40 <_vsiprintf_r>
 800bf7a:	bf00      	nop
 800bf7c:	24000014 	.word	0x24000014

0800bf80 <__swbuf_r>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	460e      	mov	r6, r1
 800bf84:	4614      	mov	r4, r2
 800bf86:	4605      	mov	r5, r0
 800bf88:	b118      	cbz	r0, 800bf92 <__swbuf_r+0x12>
 800bf8a:	6983      	ldr	r3, [r0, #24]
 800bf8c:	b90b      	cbnz	r3, 800bf92 <__swbuf_r+0x12>
 800bf8e:	f000 ff8f 	bl	800ceb0 <__sinit>
 800bf92:	4b21      	ldr	r3, [pc, #132]	; (800c018 <__swbuf_r+0x98>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d12a      	bne.n	800bfee <__swbuf_r+0x6e>
 800bf98:	686c      	ldr	r4, [r5, #4]
 800bf9a:	69a3      	ldr	r3, [r4, #24]
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	071a      	lsls	r2, r3, #28
 800bfa2:	d52e      	bpl.n	800c002 <__swbuf_r+0x82>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	b363      	cbz	r3, 800c002 <__swbuf_r+0x82>
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1ac0      	subs	r0, r0, r3
 800bfae:	6963      	ldr	r3, [r4, #20]
 800bfb0:	b2f6      	uxtb	r6, r6
 800bfb2:	4283      	cmp	r3, r0
 800bfb4:	4637      	mov	r7, r6
 800bfb6:	dc04      	bgt.n	800bfc2 <__swbuf_r+0x42>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 ff0e 	bl	800cddc <_fflush_r>
 800bfc0:	bb28      	cbnz	r0, 800c00e <__swbuf_r+0x8e>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	701e      	strb	r6, [r3, #0]
 800bfd0:	6963      	ldr	r3, [r4, #20]
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d004      	beq.n	800bfe2 <__swbuf_r+0x62>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d519      	bpl.n	800c012 <__swbuf_r+0x92>
 800bfde:	2e0a      	cmp	r6, #10
 800bfe0:	d117      	bne.n	800c012 <__swbuf_r+0x92>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 fef9 	bl	800cddc <_fflush_r>
 800bfea:	b190      	cbz	r0, 800c012 <__swbuf_r+0x92>
 800bfec:	e00f      	b.n	800c00e <__swbuf_r+0x8e>
 800bfee:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <__swbuf_r+0x9c>)
 800bff0:	429c      	cmp	r4, r3
 800bff2:	d101      	bne.n	800bff8 <__swbuf_r+0x78>
 800bff4:	68ac      	ldr	r4, [r5, #8]
 800bff6:	e7d0      	b.n	800bf9a <__swbuf_r+0x1a>
 800bff8:	4b09      	ldr	r3, [pc, #36]	; (800c020 <__swbuf_r+0xa0>)
 800bffa:	429c      	cmp	r4, r3
 800bffc:	bf08      	it	eq
 800bffe:	68ec      	ldreq	r4, [r5, #12]
 800c000:	e7cb      	b.n	800bf9a <__swbuf_r+0x1a>
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f81b 	bl	800c040 <__swsetup_r>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0cc      	beq.n	800bfa8 <__swbuf_r+0x28>
 800c00e:	f04f 37ff 	mov.w	r7, #4294967295
 800c012:	4638      	mov	r0, r7
 800c014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c016:	bf00      	nop
 800c018:	0800dfc4 	.word	0x0800dfc4
 800c01c:	0800dfe4 	.word	0x0800dfe4
 800c020:	0800dfa4 	.word	0x0800dfa4

0800c024 <__ascii_wctomb>:
 800c024:	b149      	cbz	r1, 800c03a <__ascii_wctomb+0x16>
 800c026:	2aff      	cmp	r2, #255	; 0xff
 800c028:	bf85      	ittet	hi
 800c02a:	238a      	movhi	r3, #138	; 0x8a
 800c02c:	6003      	strhi	r3, [r0, #0]
 800c02e:	700a      	strbls	r2, [r1, #0]
 800c030:	f04f 30ff 	movhi.w	r0, #4294967295
 800c034:	bf98      	it	ls
 800c036:	2001      	movls	r0, #1
 800c038:	4770      	bx	lr
 800c03a:	4608      	mov	r0, r1
 800c03c:	4770      	bx	lr
	...

0800c040 <__swsetup_r>:
 800c040:	4b32      	ldr	r3, [pc, #200]	; (800c10c <__swsetup_r+0xcc>)
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	681d      	ldr	r5, [r3, #0]
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	b125      	cbz	r5, 800c056 <__swsetup_r+0x16>
 800c04c:	69ab      	ldr	r3, [r5, #24]
 800c04e:	b913      	cbnz	r3, 800c056 <__swsetup_r+0x16>
 800c050:	4628      	mov	r0, r5
 800c052:	f000 ff2d 	bl	800ceb0 <__sinit>
 800c056:	4b2e      	ldr	r3, [pc, #184]	; (800c110 <__swsetup_r+0xd0>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	d10f      	bne.n	800c07c <__swsetup_r+0x3c>
 800c05c:	686c      	ldr	r4, [r5, #4]
 800c05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c062:	b29a      	uxth	r2, r3
 800c064:	0715      	lsls	r5, r2, #28
 800c066:	d42c      	bmi.n	800c0c2 <__swsetup_r+0x82>
 800c068:	06d0      	lsls	r0, r2, #27
 800c06a:	d411      	bmi.n	800c090 <__swsetup_r+0x50>
 800c06c:	2209      	movs	r2, #9
 800c06e:	6032      	str	r2, [r6, #0]
 800c070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	f04f 30ff 	mov.w	r0, #4294967295
 800c07a:	e03e      	b.n	800c0fa <__swsetup_r+0xba>
 800c07c:	4b25      	ldr	r3, [pc, #148]	; (800c114 <__swsetup_r+0xd4>)
 800c07e:	429c      	cmp	r4, r3
 800c080:	d101      	bne.n	800c086 <__swsetup_r+0x46>
 800c082:	68ac      	ldr	r4, [r5, #8]
 800c084:	e7eb      	b.n	800c05e <__swsetup_r+0x1e>
 800c086:	4b24      	ldr	r3, [pc, #144]	; (800c118 <__swsetup_r+0xd8>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	bf08      	it	eq
 800c08c:	68ec      	ldreq	r4, [r5, #12]
 800c08e:	e7e6      	b.n	800c05e <__swsetup_r+0x1e>
 800c090:	0751      	lsls	r1, r2, #29
 800c092:	d512      	bpl.n	800c0ba <__swsetup_r+0x7a>
 800c094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c096:	b141      	cbz	r1, 800c0aa <__swsetup_r+0x6a>
 800c098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c09c:	4299      	cmp	r1, r3
 800c09e:	d002      	beq.n	800c0a6 <__swsetup_r+0x66>
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f001 faf3 	bl	800d68c <_free_r>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0b0:	81a3      	strh	r3, [r4, #12]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	6063      	str	r3, [r4, #4]
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f043 0308 	orr.w	r3, r3, #8
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	b94b      	cbnz	r3, 800c0da <__swsetup_r+0x9a>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d0:	d003      	beq.n	800c0da <__swsetup_r+0x9a>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f000 ffa7 	bl	800d028 <__smakebuf_r>
 800c0da:	89a2      	ldrh	r2, [r4, #12]
 800c0dc:	f012 0301 	ands.w	r3, r2, #1
 800c0e0:	d00c      	beq.n	800c0fc <__swsetup_r+0xbc>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60a3      	str	r3, [r4, #8]
 800c0e6:	6963      	ldr	r3, [r4, #20]
 800c0e8:	425b      	negs	r3, r3
 800c0ea:	61a3      	str	r3, [r4, #24]
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	b953      	cbnz	r3, 800c106 <__swsetup_r+0xc6>
 800c0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c0f8:	d1ba      	bne.n	800c070 <__swsetup_r+0x30>
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	0792      	lsls	r2, r2, #30
 800c0fe:	bf58      	it	pl
 800c100:	6963      	ldrpl	r3, [r4, #20]
 800c102:	60a3      	str	r3, [r4, #8]
 800c104:	e7f2      	b.n	800c0ec <__swsetup_r+0xac>
 800c106:	2000      	movs	r0, #0
 800c108:	e7f7      	b.n	800c0fa <__swsetup_r+0xba>
 800c10a:	bf00      	nop
 800c10c:	24000014 	.word	0x24000014
 800c110:	0800dfc4 	.word	0x0800dfc4
 800c114:	0800dfe4 	.word	0x0800dfe4
 800c118:	0800dfa4 	.word	0x0800dfa4

0800c11c <quorem>:
 800c11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	6903      	ldr	r3, [r0, #16]
 800c122:	690c      	ldr	r4, [r1, #16]
 800c124:	42a3      	cmp	r3, r4
 800c126:	4680      	mov	r8, r0
 800c128:	f2c0 8082 	blt.w	800c230 <quorem+0x114>
 800c12c:	3c01      	subs	r4, #1
 800c12e:	f101 0714 	add.w	r7, r1, #20
 800c132:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c136:	f100 0614 	add.w	r6, r0, #20
 800c13a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c13e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c142:	eb06 030c 	add.w	r3, r6, ip
 800c146:	3501      	adds	r5, #1
 800c148:	eb07 090c 	add.w	r9, r7, ip
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c152:	b395      	cbz	r5, 800c1ba <quorem+0x9e>
 800c154:	f04f 0a00 	mov.w	sl, #0
 800c158:	4638      	mov	r0, r7
 800c15a:	46b6      	mov	lr, r6
 800c15c:	46d3      	mov	fp, sl
 800c15e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c162:	b293      	uxth	r3, r2
 800c164:	fb05 a303 	mla	r3, r5, r3, sl
 800c168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	ebab 0303 	sub.w	r3, fp, r3
 800c172:	0c12      	lsrs	r2, r2, #16
 800c174:	f8de b000 	ldr.w	fp, [lr]
 800c178:	fb05 a202 	mla	r2, r5, r2, sl
 800c17c:	fa13 f38b 	uxtah	r3, r3, fp
 800c180:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c184:	fa1f fb82 	uxth.w	fp, r2
 800c188:	f8de 2000 	ldr.w	r2, [lr]
 800c18c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c194:	b29b      	uxth	r3, r3
 800c196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c19a:	4581      	cmp	r9, r0
 800c19c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c1a0:	f84e 3b04 	str.w	r3, [lr], #4
 800c1a4:	d2db      	bcs.n	800c15e <quorem+0x42>
 800c1a6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c1aa:	b933      	cbnz	r3, 800c1ba <quorem+0x9e>
 800c1ac:	9b01      	ldr	r3, [sp, #4]
 800c1ae:	3b04      	subs	r3, #4
 800c1b0:	429e      	cmp	r6, r3
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	d330      	bcc.n	800c218 <quorem+0xfc>
 800c1b6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f001 f992 	bl	800d4e4 <__mcmp>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	db25      	blt.n	800c210 <quorem+0xf4>
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f04f 0c00 	mov.w	ip, #0
 800c1cc:	f857 2b04 	ldr.w	r2, [r7], #4
 800c1d0:	f8d0 e000 	ldr.w	lr, [r0]
 800c1d4:	b293      	uxth	r3, r2
 800c1d6:	ebac 0303 	sub.w	r3, ip, r3
 800c1da:	0c12      	lsrs	r2, r2, #16
 800c1dc:	fa13 f38e 	uxtah	r3, r3, lr
 800c1e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1ee:	45b9      	cmp	r9, r7
 800c1f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1f4:	f840 3b04 	str.w	r3, [r0], #4
 800c1f8:	d2e8      	bcs.n	800c1cc <quorem+0xb0>
 800c1fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c1fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c202:	b92a      	cbnz	r2, 800c210 <quorem+0xf4>
 800c204:	3b04      	subs	r3, #4
 800c206:	429e      	cmp	r6, r3
 800c208:	461a      	mov	r2, r3
 800c20a:	d30b      	bcc.n	800c224 <quorem+0x108>
 800c20c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c210:	4628      	mov	r0, r5
 800c212:	b003      	add	sp, #12
 800c214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	3b04      	subs	r3, #4
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d1ca      	bne.n	800c1b6 <quorem+0x9a>
 800c220:	3c01      	subs	r4, #1
 800c222:	e7c5      	b.n	800c1b0 <quorem+0x94>
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	3b04      	subs	r3, #4
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d1ef      	bne.n	800c20c <quorem+0xf0>
 800c22c:	3c01      	subs	r4, #1
 800c22e:	e7ea      	b.n	800c206 <quorem+0xea>
 800c230:	2000      	movs	r0, #0
 800c232:	e7ee      	b.n	800c212 <quorem+0xf6>
 800c234:	0000      	movs	r0, r0
	...

0800c238 <_dtoa_r>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	ec57 6b10 	vmov	r6, r7, d0
 800c240:	b095      	sub	sp, #84	; 0x54
 800c242:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c244:	9108      	str	r1, [sp, #32]
 800c246:	4604      	mov	r4, r0
 800c248:	920a      	str	r2, [sp, #40]	; 0x28
 800c24a:	9311      	str	r3, [sp, #68]	; 0x44
 800c24c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c250:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c254:	b93d      	cbnz	r5, 800c266 <_dtoa_r+0x2e>
 800c256:	2010      	movs	r0, #16
 800c258:	f000 ff26 	bl	800d0a8 <malloc>
 800c25c:	6260      	str	r0, [r4, #36]	; 0x24
 800c25e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c262:	6005      	str	r5, [r0, #0]
 800c264:	60c5      	str	r5, [r0, #12]
 800c266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	b151      	cbz	r1, 800c282 <_dtoa_r+0x4a>
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	604a      	str	r2, [r1, #4]
 800c270:	2301      	movs	r3, #1
 800c272:	4093      	lsls	r3, r2
 800c274:	608b      	str	r3, [r1, #8]
 800c276:	4620      	mov	r0, r4
 800c278:	f000 ff52 	bl	800d120 <_Bfree>
 800c27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	1e3b      	subs	r3, r7, #0
 800c284:	bfb9      	ittee	lt
 800c286:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c28a:	9303      	strlt	r3, [sp, #12]
 800c28c:	2300      	movge	r3, #0
 800c28e:	f8c8 3000 	strge.w	r3, [r8]
 800c292:	9d03      	ldr	r5, [sp, #12]
 800c294:	4bac      	ldr	r3, [pc, #688]	; (800c548 <_dtoa_r+0x310>)
 800c296:	bfbc      	itt	lt
 800c298:	2201      	movlt	r2, #1
 800c29a:	f8c8 2000 	strlt.w	r2, [r8]
 800c29e:	43ab      	bics	r3, r5
 800c2a0:	d11b      	bne.n	800c2da <_dtoa_r+0xa2>
 800c2a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2a4:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	b923      	cbnz	r3, 800c2b8 <_dtoa_r+0x80>
 800c2ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	f000 84dd 	beq.w	800cc72 <_dtoa_r+0xa3a>
 800c2b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2ba:	b953      	cbnz	r3, 800c2d2 <_dtoa_r+0x9a>
 800c2bc:	4ba3      	ldr	r3, [pc, #652]	; (800c54c <_dtoa_r+0x314>)
 800c2be:	e020      	b.n	800c302 <_dtoa_r+0xca>
 800c2c0:	4ba3      	ldr	r3, [pc, #652]	; (800c550 <_dtoa_r+0x318>)
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	9804      	ldr	r0, [sp, #16]
 800c2cc:	b015      	add	sp, #84	; 0x54
 800c2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d2:	4b9e      	ldr	r3, [pc, #632]	; (800c54c <_dtoa_r+0x314>)
 800c2d4:	9304      	str	r3, [sp, #16]
 800c2d6:	3303      	adds	r3, #3
 800c2d8:	e7f5      	b.n	800c2c6 <_dtoa_r+0x8e>
 800c2da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c2ea:	d10c      	bne.n	800c306 <_dtoa_r+0xce>
 800c2ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 84b9 	beq.w	800cc6c <_dtoa_r+0xa34>
 800c2fa:	4b96      	ldr	r3, [pc, #600]	; (800c554 <_dtoa_r+0x31c>)
 800c2fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	e7e1      	b.n	800c2ca <_dtoa_r+0x92>
 800c306:	a913      	add	r1, sp, #76	; 0x4c
 800c308:	aa12      	add	r2, sp, #72	; 0x48
 800c30a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800c30e:	4620      	mov	r0, r4
 800c310:	f001 f95f 	bl	800d5d2 <__d2b>
 800c314:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800c318:	9001      	str	r0, [sp, #4]
 800c31a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	d046      	beq.n	800c3ae <_dtoa_r+0x176>
 800c320:	9805      	ldr	r0, [sp, #20]
 800c322:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c32a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800c32e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c332:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800c336:	2700      	movs	r7, #0
 800c338:	ee07 aa90 	vmov	s15, sl
 800c33c:	ec43 2b16 	vmov	d6, r2, r3
 800c340:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c344:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800c530 <_dtoa_r+0x2f8>
 800c348:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c34c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c350:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800c538 <_dtoa_r+0x300>
 800c354:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c358:	eeb0 7b46 	vmov.f64	d7, d6
 800c35c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800c540 <_dtoa_r+0x308>
 800c360:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c364:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c368:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c370:	ee16 ba90 	vmov	fp, s13
 800c374:	d508      	bpl.n	800c388 <_dtoa_r+0x150>
 800c376:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c37a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c382:	bf18      	it	ne
 800c384:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c388:	f1bb 0f16 	cmp.w	fp, #22
 800c38c:	d834      	bhi.n	800c3f8 <_dtoa_r+0x1c0>
 800c38e:	4b72      	ldr	r3, [pc, #456]	; (800c558 <_dtoa_r+0x320>)
 800c390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c394:	ed93 7b00 	vldr	d7, [r3]
 800c398:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c39c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a4:	dd01      	ble.n	800c3aa <_dtoa_r+0x172>
 800c3a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e025      	b.n	800c3fa <_dtoa_r+0x1c2>
 800c3ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3b0:	eb01 0a03 	add.w	sl, r1, r3
 800c3b4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	dd17      	ble.n	800c3ec <_dtoa_r+0x1b4>
 800c3bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800c3c0:	9a02      	ldr	r2, [sp, #8]
 800c3c2:	409d      	lsls	r5, r3
 800c3c4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800c3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3cc:	432b      	orrs	r3, r5
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c3d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3da:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c3de:	9805      	ldr	r0, [sp, #20]
 800c3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3e4:	2701      	movs	r7, #1
 800c3e6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800c3ea:	e7a5      	b.n	800c338 <_dtoa_r+0x100>
 800c3ec:	9a02      	ldr	r2, [sp, #8]
 800c3ee:	f1c3 0320 	rsb	r3, r3, #32
 800c3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f6:	e7ea      	b.n	800c3ce <_dtoa_r+0x196>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	eba1 0a0a 	sub.w	sl, r1, sl
 800c3fe:	9310      	str	r3, [sp, #64]	; 0x40
 800c400:	f1ba 0301 	subs.w	r3, sl, #1
 800c404:	9307      	str	r3, [sp, #28]
 800c406:	bf43      	ittte	mi
 800c408:	2300      	movmi	r3, #0
 800c40a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800c40e:	9307      	strmi	r3, [sp, #28]
 800c410:	f04f 0a00 	movpl.w	sl, #0
 800c414:	f1bb 0f00 	cmp.w	fp, #0
 800c418:	db19      	blt.n	800c44e <_dtoa_r+0x216>
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c420:	445b      	add	r3, fp
 800c422:	9307      	str	r3, [sp, #28]
 800c424:	f04f 0800 	mov.w	r8, #0
 800c428:	9b08      	ldr	r3, [sp, #32]
 800c42a:	2b09      	cmp	r3, #9
 800c42c:	d866      	bhi.n	800c4fc <_dtoa_r+0x2c4>
 800c42e:	2b05      	cmp	r3, #5
 800c430:	bfc4      	itt	gt
 800c432:	3b04      	subgt	r3, #4
 800c434:	9308      	strgt	r3, [sp, #32]
 800c436:	9b08      	ldr	r3, [sp, #32]
 800c438:	f1a3 0302 	sub.w	r3, r3, #2
 800c43c:	bfcc      	ite	gt
 800c43e:	2500      	movgt	r5, #0
 800c440:	2501      	movle	r5, #1
 800c442:	2b03      	cmp	r3, #3
 800c444:	d866      	bhi.n	800c514 <_dtoa_r+0x2dc>
 800c446:	e8df f003 	tbb	[pc, r3]
 800c44a:	5755      	.short	0x5755
 800c44c:	4909      	.short	0x4909
 800c44e:	2300      	movs	r3, #0
 800c450:	ebaa 0a0b 	sub.w	sl, sl, fp
 800c454:	f1cb 0800 	rsb	r8, fp, #0
 800c458:	930b      	str	r3, [sp, #44]	; 0x2c
 800c45a:	e7e5      	b.n	800c428 <_dtoa_r+0x1f0>
 800c45c:	2301      	movs	r3, #1
 800c45e:	9309      	str	r3, [sp, #36]	; 0x24
 800c460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c462:	2b00      	cmp	r3, #0
 800c464:	dd59      	ble.n	800c51a <_dtoa_r+0x2e2>
 800c466:	9306      	str	r3, [sp, #24]
 800c468:	4699      	mov	r9, r3
 800c46a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c46c:	2200      	movs	r2, #0
 800c46e:	6072      	str	r2, [r6, #4]
 800c470:	2204      	movs	r2, #4
 800c472:	f102 0014 	add.w	r0, r2, #20
 800c476:	4298      	cmp	r0, r3
 800c478:	6871      	ldr	r1, [r6, #4]
 800c47a:	d953      	bls.n	800c524 <_dtoa_r+0x2ec>
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fe1b 	bl	800d0b8 <_Balloc>
 800c482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c484:	6030      	str	r0, [r6, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	f1b9 0f0e 	cmp.w	r9, #14
 800c48e:	f200 80c2 	bhi.w	800c616 <_dtoa_r+0x3de>
 800c492:	2d00      	cmp	r5, #0
 800c494:	f000 80bf 	beq.w	800c616 <_dtoa_r+0x3de>
 800c498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c49c:	f1bb 0f00 	cmp.w	fp, #0
 800c4a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c4a4:	f340 80e6 	ble.w	800c674 <_dtoa_r+0x43c>
 800c4a8:	4a2b      	ldr	r2, [pc, #172]	; (800c558 <_dtoa_r+0x320>)
 800c4aa:	f00b 030f 	and.w	r3, fp, #15
 800c4ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4b2:	ed93 7b00 	vldr	d7, [r3]
 800c4b6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800c4ba:	06da      	lsls	r2, r3, #27
 800c4bc:	f140 80d8 	bpl.w	800c670 <_dtoa_r+0x438>
 800c4c0:	4a26      	ldr	r2, [pc, #152]	; (800c55c <_dtoa_r+0x324>)
 800c4c2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800c4c6:	ed92 6b08 	vldr	d6, [r2, #32]
 800c4ca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800c4ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c4d2:	f003 030f 	and.w	r3, r3, #15
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	4920      	ldr	r1, [pc, #128]	; (800c55c <_dtoa_r+0x324>)
 800c4da:	e04a      	b.n	800c572 <_dtoa_r+0x33a>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e2:	445b      	add	r3, fp
 800c4e4:	f103 0901 	add.w	r9, r3, #1
 800c4e8:	9306      	str	r3, [sp, #24]
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	bfb8      	it	lt
 800c4f0:	2301      	movlt	r3, #1
 800c4f2:	e7ba      	b.n	800c46a <_dtoa_r+0x232>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	e7b2      	b.n	800c45e <_dtoa_r+0x226>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e7f0      	b.n	800c4de <_dtoa_r+0x2a6>
 800c4fc:	2501      	movs	r5, #1
 800c4fe:	2300      	movs	r3, #0
 800c500:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800c504:	f04f 33ff 	mov.w	r3, #4294967295
 800c508:	9306      	str	r3, [sp, #24]
 800c50a:	4699      	mov	r9, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	2312      	movs	r3, #18
 800c510:	920a      	str	r2, [sp, #40]	; 0x28
 800c512:	e7aa      	b.n	800c46a <_dtoa_r+0x232>
 800c514:	2301      	movs	r3, #1
 800c516:	9309      	str	r3, [sp, #36]	; 0x24
 800c518:	e7f4      	b.n	800c504 <_dtoa_r+0x2cc>
 800c51a:	2301      	movs	r3, #1
 800c51c:	9306      	str	r3, [sp, #24]
 800c51e:	4699      	mov	r9, r3
 800c520:	461a      	mov	r2, r3
 800c522:	e7f5      	b.n	800c510 <_dtoa_r+0x2d8>
 800c524:	3101      	adds	r1, #1
 800c526:	6071      	str	r1, [r6, #4]
 800c528:	0052      	lsls	r2, r2, #1
 800c52a:	e7a2      	b.n	800c472 <_dtoa_r+0x23a>
 800c52c:	f3af 8000 	nop.w
 800c530:	636f4361 	.word	0x636f4361
 800c534:	3fd287a7 	.word	0x3fd287a7
 800c538:	8b60c8b3 	.word	0x8b60c8b3
 800c53c:	3fc68a28 	.word	0x3fc68a28
 800c540:	509f79fb 	.word	0x509f79fb
 800c544:	3fd34413 	.word	0x3fd34413
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	0800df9d 	.word	0x0800df9d
 800c550:	0800df94 	.word	0x0800df94
 800c554:	0800de70 	.word	0x0800de70
 800c558:	0800e030 	.word	0x0800e030
 800c55c:	0800e008 	.word	0x0800e008
 800c560:	07de      	lsls	r6, r3, #31
 800c562:	d504      	bpl.n	800c56e <_dtoa_r+0x336>
 800c564:	ed91 6b00 	vldr	d6, [r1]
 800c568:	3201      	adds	r2, #1
 800c56a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c56e:	105b      	asrs	r3, r3, #1
 800c570:	3108      	adds	r1, #8
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1f4      	bne.n	800c560 <_dtoa_r+0x328>
 800c576:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c57a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c57e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80a7 	beq.w	800c6d8 <_dtoa_r+0x4a0>
 800c58a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c58e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c592:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	f140 809d 	bpl.w	800c6d8 <_dtoa_r+0x4a0>
 800c59e:	f1b9 0f00 	cmp.w	r9, #0
 800c5a2:	f000 8099 	beq.w	800c6d8 <_dtoa_r+0x4a0>
 800c5a6:	9b06      	ldr	r3, [sp, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	dd30      	ble.n	800c60e <_dtoa_r+0x3d6>
 800c5ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c5b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5b8:	9d06      	ldr	r5, [sp, #24]
 800c5ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c5be:	3201      	adds	r2, #1
 800c5c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c5c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c5c8:	ee07 2a90 	vmov	s15, r2
 800c5cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c5d4:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c5d8:	9a03      	ldr	r2, [sp, #12]
 800c5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5de:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	d17b      	bne.n	800c6de <_dtoa_r+0x4a6>
 800c5e6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c5ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c5ee:	ec41 0b17 	vmov	d7, r0, r1
 800c5f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fa:	f300 8253 	bgt.w	800caa4 <_dtoa_r+0x86c>
 800c5fe:	eeb1 7b47 	vneg.f64	d7, d7
 800c602:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60a:	f100 8249 	bmi.w	800caa0 <_dtoa_r+0x868>
 800c60e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f2c0 8119 	blt.w	800c850 <_dtoa_r+0x618>
 800c61e:	f1bb 0f0e 	cmp.w	fp, #14
 800c622:	f300 8115 	bgt.w	800c850 <_dtoa_r+0x618>
 800c626:	4bc3      	ldr	r3, [pc, #780]	; (800c934 <_dtoa_r+0x6fc>)
 800c628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c62c:	ed93 6b00 	vldr	d6, [r3]
 800c630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c632:	2b00      	cmp	r3, #0
 800c634:	f280 80ba 	bge.w	800c7ac <_dtoa_r+0x574>
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	f300 80b6 	bgt.w	800c7ac <_dtoa_r+0x574>
 800c640:	f040 822d 	bne.w	800ca9e <_dtoa_r+0x866>
 800c644:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c648:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c64c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c650:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	464d      	mov	r5, r9
 800c65a:	464f      	mov	r7, r9
 800c65c:	f280 8204 	bge.w	800ca68 <_dtoa_r+0x830>
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	9a04      	ldr	r2, [sp, #16]
 800c664:	1c5e      	adds	r6, r3, #1
 800c666:	2331      	movs	r3, #49	; 0x31
 800c668:	7013      	strb	r3, [r2, #0]
 800c66a:	f10b 0b01 	add.w	fp, fp, #1
 800c66e:	e1ff      	b.n	800ca70 <_dtoa_r+0x838>
 800c670:	2202      	movs	r2, #2
 800c672:	e731      	b.n	800c4d8 <_dtoa_r+0x2a0>
 800c674:	d02e      	beq.n	800c6d4 <_dtoa_r+0x49c>
 800c676:	f1cb 0300 	rsb	r3, fp, #0
 800c67a:	4aae      	ldr	r2, [pc, #696]	; (800c934 <_dtoa_r+0x6fc>)
 800c67c:	f003 010f 	and.w	r1, r3, #15
 800c680:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c684:	ed92 7b00 	vldr	d7, [r2]
 800c688:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800c68c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c690:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c694:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c698:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c69c:	49a6      	ldr	r1, [pc, #664]	; (800c938 <_dtoa_r+0x700>)
 800c69e:	111b      	asrs	r3, r3, #4
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	b93b      	cbnz	r3, 800c6b6 <_dtoa_r+0x47e>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f43f af6b 	beq.w	800c582 <_dtoa_r+0x34a>
 800c6ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6b4:	e765      	b.n	800c582 <_dtoa_r+0x34a>
 800c6b6:	07dd      	lsls	r5, r3, #31
 800c6b8:	d509      	bpl.n	800c6ce <_dtoa_r+0x496>
 800c6ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c6be:	ed91 7b00 	vldr	d7, [r1]
 800c6c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c6c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c6ca:	3201      	adds	r2, #1
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	105b      	asrs	r3, r3, #1
 800c6d0:	3108      	adds	r1, #8
 800c6d2:	e7e7      	b.n	800c6a4 <_dtoa_r+0x46c>
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	e754      	b.n	800c582 <_dtoa_r+0x34a>
 800c6d8:	465b      	mov	r3, fp
 800c6da:	464d      	mov	r5, r9
 800c6dc:	e770      	b.n	800c5c0 <_dtoa_r+0x388>
 800c6de:	4a95      	ldr	r2, [pc, #596]	; (800c934 <_dtoa_r+0x6fc>)
 800c6e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c6e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ea:	ec41 0b17 	vmov	d7, r0, r1
 800c6ee:	b35a      	cbz	r2, 800c748 <_dtoa_r+0x510>
 800c6f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c6f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c6f8:	9e04      	ldr	r6, [sp, #16]
 800c6fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c6fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c702:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c706:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c70a:	ee14 2a90 	vmov	r2, s9
 800c70e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c712:	3230      	adds	r2, #48	; 0x30
 800c714:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c720:	f806 2b01 	strb.w	r2, [r6], #1
 800c724:	d43b      	bmi.n	800c79e <_dtoa_r+0x566>
 800c726:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c72a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c732:	d472      	bmi.n	800c81a <_dtoa_r+0x5e2>
 800c734:	9a04      	ldr	r2, [sp, #16]
 800c736:	1ab2      	subs	r2, r6, r2
 800c738:	4295      	cmp	r5, r2
 800c73a:	f77f af68 	ble.w	800c60e <_dtoa_r+0x3d6>
 800c73e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c742:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c746:	e7de      	b.n	800c706 <_dtoa_r+0x4ce>
 800c748:	9a04      	ldr	r2, [sp, #16]
 800c74a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c74e:	1956      	adds	r6, r2, r5
 800c750:	4611      	mov	r1, r2
 800c752:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c756:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c75a:	ee14 2a90 	vmov	r2, s9
 800c75e:	3230      	adds	r2, #48	; 0x30
 800c760:	f801 2b01 	strb.w	r2, [r1], #1
 800c764:	42b1      	cmp	r1, r6
 800c766:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c76a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c76e:	d11a      	bne.n	800c7a6 <_dtoa_r+0x56e>
 800c770:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c774:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c778:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c780:	dc4b      	bgt.n	800c81a <_dtoa_r+0x5e2>
 800c782:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c786:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	f57f af3e 	bpl.w	800c60e <_dtoa_r+0x3d6>
 800c792:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c796:	2a30      	cmp	r2, #48	; 0x30
 800c798:	f106 31ff 	add.w	r1, r6, #4294967295
 800c79c:	d001      	beq.n	800c7a2 <_dtoa_r+0x56a>
 800c79e:	469b      	mov	fp, r3
 800c7a0:	e02a      	b.n	800c7f8 <_dtoa_r+0x5c0>
 800c7a2:	460e      	mov	r6, r1
 800c7a4:	e7f5      	b.n	800c792 <_dtoa_r+0x55a>
 800c7a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c7aa:	e7d4      	b.n	800c756 <_dtoa_r+0x51e>
 800c7ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c7b4:	9e04      	ldr	r6, [sp, #16]
 800c7b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c7ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c7be:	ee15 3a10 	vmov	r3, s10
 800c7c2:	3330      	adds	r3, #48	; 0x30
 800c7c4:	f806 3b01 	strb.w	r3, [r6], #1
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	1af3      	subs	r3, r6, r3
 800c7cc:	4599      	cmp	r9, r3
 800c7ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c7d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c7d6:	d133      	bne.n	800c840 <_dtoa_r+0x608>
 800c7d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c7dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e4:	dc18      	bgt.n	800c818 <_dtoa_r+0x5e0>
 800c7e6:	eeb4 7b46 	vcmp.f64	d7, d6
 800c7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ee:	d103      	bne.n	800c7f8 <_dtoa_r+0x5c0>
 800c7f0:	ee15 3a10 	vmov	r3, s10
 800c7f4:	07db      	lsls	r3, r3, #31
 800c7f6:	d40f      	bmi.n	800c818 <_dtoa_r+0x5e0>
 800c7f8:	9901      	ldr	r1, [sp, #4]
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fc90 	bl	800d120 <_Bfree>
 800c800:	2300      	movs	r3, #0
 800c802:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c804:	7033      	strb	r3, [r6, #0]
 800c806:	f10b 0301 	add.w	r3, fp, #1
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f43f ad5b 	beq.w	800c2ca <_dtoa_r+0x92>
 800c814:	601e      	str	r6, [r3, #0]
 800c816:	e558      	b.n	800c2ca <_dtoa_r+0x92>
 800c818:	465b      	mov	r3, fp
 800c81a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c81e:	2939      	cmp	r1, #57	; 0x39
 800c820:	f106 32ff 	add.w	r2, r6, #4294967295
 800c824:	d106      	bne.n	800c834 <_dtoa_r+0x5fc>
 800c826:	9904      	ldr	r1, [sp, #16]
 800c828:	4291      	cmp	r1, r2
 800c82a:	d107      	bne.n	800c83c <_dtoa_r+0x604>
 800c82c:	2230      	movs	r2, #48	; 0x30
 800c82e:	700a      	strb	r2, [r1, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	460a      	mov	r2, r1
 800c834:	7811      	ldrb	r1, [r2, #0]
 800c836:	3101      	adds	r1, #1
 800c838:	7011      	strb	r1, [r2, #0]
 800c83a:	e7b0      	b.n	800c79e <_dtoa_r+0x566>
 800c83c:	4616      	mov	r6, r2
 800c83e:	e7ec      	b.n	800c81a <_dtoa_r+0x5e2>
 800c840:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c844:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84c:	d1b3      	bne.n	800c7b6 <_dtoa_r+0x57e>
 800c84e:	e7d3      	b.n	800c7f8 <_dtoa_r+0x5c0>
 800c850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c852:	2a00      	cmp	r2, #0
 800c854:	f000 808d 	beq.w	800c972 <_dtoa_r+0x73a>
 800c858:	9a08      	ldr	r2, [sp, #32]
 800c85a:	2a01      	cmp	r2, #1
 800c85c:	dc72      	bgt.n	800c944 <_dtoa_r+0x70c>
 800c85e:	2f00      	cmp	r7, #0
 800c860:	d06c      	beq.n	800c93c <_dtoa_r+0x704>
 800c862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c866:	4645      	mov	r5, r8
 800c868:	4656      	mov	r6, sl
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	2101      	movs	r1, #1
 800c86e:	441a      	add	r2, r3
 800c870:	4620      	mov	r0, r4
 800c872:	449a      	add	sl, r3
 800c874:	9207      	str	r2, [sp, #28]
 800c876:	f000 fcf3 	bl	800d260 <__i2b>
 800c87a:	4607      	mov	r7, r0
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	dd0b      	ble.n	800c898 <_dtoa_r+0x660>
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	2b00      	cmp	r3, #0
 800c884:	dd08      	ble.n	800c898 <_dtoa_r+0x660>
 800c886:	42b3      	cmp	r3, r6
 800c888:	9a07      	ldr	r2, [sp, #28]
 800c88a:	bfa8      	it	ge
 800c88c:	4633      	movge	r3, r6
 800c88e:	ebaa 0a03 	sub.w	sl, sl, r3
 800c892:	1af6      	subs	r6, r6, r3
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	f1b8 0f00 	cmp.w	r8, #0
 800c89c:	d01d      	beq.n	800c8da <_dtoa_r+0x6a2>
 800c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d06a      	beq.n	800c97a <_dtoa_r+0x742>
 800c8a4:	b18d      	cbz	r5, 800c8ca <_dtoa_r+0x692>
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fd78 	bl	800d3a0 <__pow5mult>
 800c8b0:	9a01      	ldr	r2, [sp, #4]
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	4607      	mov	r7, r0
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fcdb 	bl	800d272 <__multiply>
 800c8bc:	9901      	ldr	r1, [sp, #4]
 800c8be:	900c      	str	r0, [sp, #48]	; 0x30
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 fc2d 	bl	800d120 <_Bfree>
 800c8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	ebb8 0205 	subs.w	r2, r8, r5
 800c8ce:	d004      	beq.n	800c8da <_dtoa_r+0x6a2>
 800c8d0:	9901      	ldr	r1, [sp, #4]
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f000 fd64 	bl	800d3a0 <__pow5mult>
 800c8d8:	9001      	str	r0, [sp, #4]
 800c8da:	2101      	movs	r1, #1
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 fcbf 	bl	800d260 <__i2b>
 800c8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 81ca 	beq.w	800cc80 <_dtoa_r+0xa48>
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f000 fd55 	bl	800d3a0 <__pow5mult>
 800c8f6:	9b08      	ldr	r3, [sp, #32]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	dc44      	bgt.n	800c988 <_dtoa_r+0x750>
 800c8fe:	9b02      	ldr	r3, [sp, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d13c      	bne.n	800c97e <_dtoa_r+0x746>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d137      	bne.n	800c97e <_dtoa_r+0x746>
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c914:	0d1b      	lsrs	r3, r3, #20
 800c916:	051b      	lsls	r3, r3, #20
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d033      	beq.n	800c984 <_dtoa_r+0x74c>
 800c91c:	9b07      	ldr	r3, [sp, #28]
 800c91e:	3301      	adds	r3, #1
 800c920:	f10a 0a01 	add.w	sl, sl, #1
 800c924:	9307      	str	r3, [sp, #28]
 800c926:	f04f 0801 	mov.w	r8, #1
 800c92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c92c:	bb73      	cbnz	r3, 800c98c <_dtoa_r+0x754>
 800c92e:	2001      	movs	r0, #1
 800c930:	e034      	b.n	800c99c <_dtoa_r+0x764>
 800c932:	bf00      	nop
 800c934:	0800e030 	.word	0x0800e030
 800c938:	0800e008 	.word	0x0800e008
 800c93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c93e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c942:	e790      	b.n	800c866 <_dtoa_r+0x62e>
 800c944:	f109 35ff 	add.w	r5, r9, #4294967295
 800c948:	45a8      	cmp	r8, r5
 800c94a:	bfbf      	itttt	lt
 800c94c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c94e:	eba5 0808 	sublt.w	r8, r5, r8
 800c952:	4443      	addlt	r3, r8
 800c954:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c956:	bfb6      	itet	lt
 800c958:	46a8      	movlt	r8, r5
 800c95a:	eba8 0505 	subge.w	r5, r8, r5
 800c95e:	2500      	movlt	r5, #0
 800c960:	f1b9 0f00 	cmp.w	r9, #0
 800c964:	bfb9      	ittee	lt
 800c966:	ebaa 0609 	sublt.w	r6, sl, r9
 800c96a:	2300      	movlt	r3, #0
 800c96c:	4656      	movge	r6, sl
 800c96e:	464b      	movge	r3, r9
 800c970:	e77b      	b.n	800c86a <_dtoa_r+0x632>
 800c972:	4645      	mov	r5, r8
 800c974:	4656      	mov	r6, sl
 800c976:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c978:	e780      	b.n	800c87c <_dtoa_r+0x644>
 800c97a:	4642      	mov	r2, r8
 800c97c:	e7a8      	b.n	800c8d0 <_dtoa_r+0x698>
 800c97e:	f04f 0800 	mov.w	r8, #0
 800c982:	e7d2      	b.n	800c92a <_dtoa_r+0x6f2>
 800c984:	4698      	mov	r8, r3
 800c986:	e7d0      	b.n	800c92a <_dtoa_r+0x6f2>
 800c988:	f04f 0800 	mov.w	r8, #0
 800c98c:	692b      	ldr	r3, [r5, #16]
 800c98e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c992:	6918      	ldr	r0, [r3, #16]
 800c994:	f000 fc16 	bl	800d1c4 <__hi0bits>
 800c998:	f1c0 0020 	rsb	r0, r0, #32
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	4418      	add	r0, r3
 800c9a0:	f010 001f 	ands.w	r0, r0, #31
 800c9a4:	d047      	beq.n	800ca36 <_dtoa_r+0x7fe>
 800c9a6:	f1c0 0320 	rsb	r3, r0, #32
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	dd3b      	ble.n	800ca26 <_dtoa_r+0x7ee>
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	f1c0 001c 	rsb	r0, r0, #28
 800c9b4:	4482      	add	sl, r0
 800c9b6:	4406      	add	r6, r0
 800c9b8:	4403      	add	r3, r0
 800c9ba:	9307      	str	r3, [sp, #28]
 800c9bc:	f1ba 0f00 	cmp.w	sl, #0
 800c9c0:	dd05      	ble.n	800c9ce <_dtoa_r+0x796>
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	9901      	ldr	r1, [sp, #4]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fd38 	bl	800d43c <__lshift>
 800c9cc:	9001      	str	r0, [sp, #4]
 800c9ce:	9b07      	ldr	r3, [sp, #28]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	dd05      	ble.n	800c9e0 <_dtoa_r+0x7a8>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fd2f 	bl	800d43c <__lshift>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9e2:	b353      	cbz	r3, 800ca3a <_dtoa_r+0x802>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	9801      	ldr	r0, [sp, #4]
 800c9e8:	f000 fd7c 	bl	800d4e4 <__mcmp>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	da24      	bge.n	800ca3a <_dtoa_r+0x802>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	220a      	movs	r2, #10
 800c9f4:	9901      	ldr	r1, [sp, #4]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 fba9 	bl	800d14e <__multadd>
 800c9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fe:	9001      	str	r0, [sp, #4]
 800ca00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 8142 	beq.w	800cc8e <_dtoa_r+0xa56>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	220a      	movs	r2, #10
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 fb9c 	bl	800d14e <__multadd>
 800ca16:	9b06      	ldr	r3, [sp, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	dc4b      	bgt.n	800cab6 <_dtoa_r+0x87e>
 800ca1e:	9b08      	ldr	r3, [sp, #32]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	dd48      	ble.n	800cab6 <_dtoa_r+0x87e>
 800ca24:	e011      	b.n	800ca4a <_dtoa_r+0x812>
 800ca26:	d0c9      	beq.n	800c9bc <_dtoa_r+0x784>
 800ca28:	9a07      	ldr	r2, [sp, #28]
 800ca2a:	331c      	adds	r3, #28
 800ca2c:	441a      	add	r2, r3
 800ca2e:	449a      	add	sl, r3
 800ca30:	441e      	add	r6, r3
 800ca32:	4613      	mov	r3, r2
 800ca34:	e7c1      	b.n	800c9ba <_dtoa_r+0x782>
 800ca36:	4603      	mov	r3, r0
 800ca38:	e7f6      	b.n	800ca28 <_dtoa_r+0x7f0>
 800ca3a:	f1b9 0f00 	cmp.w	r9, #0
 800ca3e:	dc34      	bgt.n	800caaa <_dtoa_r+0x872>
 800ca40:	9b08      	ldr	r3, [sp, #32]
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	dd31      	ble.n	800caaa <_dtoa_r+0x872>
 800ca46:	f8cd 9018 	str.w	r9, [sp, #24]
 800ca4a:	9b06      	ldr	r3, [sp, #24]
 800ca4c:	b963      	cbnz	r3, 800ca68 <_dtoa_r+0x830>
 800ca4e:	4629      	mov	r1, r5
 800ca50:	2205      	movs	r2, #5
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 fb7b 	bl	800d14e <__multadd>
 800ca58:	4601      	mov	r1, r0
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	9801      	ldr	r0, [sp, #4]
 800ca5e:	f000 fd41 	bl	800d4e4 <__mcmp>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f73f adfc 	bgt.w	800c660 <_dtoa_r+0x428>
 800ca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca6a:	9e04      	ldr	r6, [sp, #16]
 800ca6c:	ea6f 0b03 	mvn.w	fp, r3
 800ca70:	f04f 0900 	mov.w	r9, #0
 800ca74:	4629      	mov	r1, r5
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fb52 	bl	800d120 <_Bfree>
 800ca7c:	2f00      	cmp	r7, #0
 800ca7e:	f43f aebb 	beq.w	800c7f8 <_dtoa_r+0x5c0>
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	d005      	beq.n	800ca94 <_dtoa_r+0x85c>
 800ca88:	45b9      	cmp	r9, r7
 800ca8a:	d003      	beq.n	800ca94 <_dtoa_r+0x85c>
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fb46 	bl	800d120 <_Bfree>
 800ca94:	4639      	mov	r1, r7
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fb42 	bl	800d120 <_Bfree>
 800ca9c:	e6ac      	b.n	800c7f8 <_dtoa_r+0x5c0>
 800ca9e:	2500      	movs	r5, #0
 800caa0:	462f      	mov	r7, r5
 800caa2:	e7e1      	b.n	800ca68 <_dtoa_r+0x830>
 800caa4:	469b      	mov	fp, r3
 800caa6:	462f      	mov	r7, r5
 800caa8:	e5da      	b.n	800c660 <_dtoa_r+0x428>
 800caaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caac:	f8cd 9018 	str.w	r9, [sp, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 80f3 	beq.w	800cc9c <_dtoa_r+0xa64>
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	dd05      	ble.n	800cac6 <_dtoa_r+0x88e>
 800caba:	4639      	mov	r1, r7
 800cabc:	4632      	mov	r2, r6
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 fcbc 	bl	800d43c <__lshift>
 800cac4:	4607      	mov	r7, r0
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	d04c      	beq.n	800cb66 <_dtoa_r+0x92e>
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 faf2 	bl	800d0b8 <_Balloc>
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	3202      	adds	r2, #2
 800cad8:	4606      	mov	r6, r0
 800cada:	0092      	lsls	r2, r2, #2
 800cadc:	f107 010c 	add.w	r1, r7, #12
 800cae0:	300c      	adds	r0, #12
 800cae2:	f7fe fbf5 	bl	800b2d0 <memcpy>
 800cae6:	2201      	movs	r2, #1
 800cae8:	4631      	mov	r1, r6
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fca6 	bl	800d43c <__lshift>
 800caf0:	9b02      	ldr	r3, [sp, #8]
 800caf2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	46b9      	mov	r9, r7
 800cafc:	9307      	str	r3, [sp, #28]
 800cafe:	4607      	mov	r7, r0
 800cb00:	4629      	mov	r1, r5
 800cb02:	9801      	ldr	r0, [sp, #4]
 800cb04:	f7ff fb0a 	bl	800c11c <quorem>
 800cb08:	4649      	mov	r1, r9
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cb10:	9801      	ldr	r0, [sp, #4]
 800cb12:	f000 fce7 	bl	800d4e4 <__mcmp>
 800cb16:	463a      	mov	r2, r7
 800cb18:	9002      	str	r0, [sp, #8]
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f000 fcfb 	bl	800d518 <__mdiff>
 800cb22:	68c3      	ldr	r3, [r0, #12]
 800cb24:	4602      	mov	r2, r0
 800cb26:	bb03      	cbnz	r3, 800cb6a <_dtoa_r+0x932>
 800cb28:	4601      	mov	r1, r0
 800cb2a:	9009      	str	r0, [sp, #36]	; 0x24
 800cb2c:	9801      	ldr	r0, [sp, #4]
 800cb2e:	f000 fcd9 	bl	800d4e4 <__mcmp>
 800cb32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb34:	4603      	mov	r3, r0
 800cb36:	4611      	mov	r1, r2
 800cb38:	4620      	mov	r0, r4
 800cb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3c:	f000 faf0 	bl	800d120 <_Bfree>
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	b9a3      	cbnz	r3, 800cb6e <_dtoa_r+0x936>
 800cb44:	9a08      	ldr	r2, [sp, #32]
 800cb46:	b992      	cbnz	r2, 800cb6e <_dtoa_r+0x936>
 800cb48:	9a07      	ldr	r2, [sp, #28]
 800cb4a:	b982      	cbnz	r2, 800cb6e <_dtoa_r+0x936>
 800cb4c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cb50:	d029      	beq.n	800cba6 <_dtoa_r+0x96e>
 800cb52:	9b02      	ldr	r3, [sp, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd01      	ble.n	800cb5c <_dtoa_r+0x924>
 800cb58:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800cb5c:	f10a 0601 	add.w	r6, sl, #1
 800cb60:	f88a 8000 	strb.w	r8, [sl]
 800cb64:	e786      	b.n	800ca74 <_dtoa_r+0x83c>
 800cb66:	4638      	mov	r0, r7
 800cb68:	e7c2      	b.n	800caf0 <_dtoa_r+0x8b8>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7e3      	b.n	800cb36 <_dtoa_r+0x8fe>
 800cb6e:	9a02      	ldr	r2, [sp, #8]
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	db04      	blt.n	800cb7e <_dtoa_r+0x946>
 800cb74:	d124      	bne.n	800cbc0 <_dtoa_r+0x988>
 800cb76:	9a08      	ldr	r2, [sp, #32]
 800cb78:	bb12      	cbnz	r2, 800cbc0 <_dtoa_r+0x988>
 800cb7a:	9a07      	ldr	r2, [sp, #28]
 800cb7c:	bb02      	cbnz	r2, 800cbc0 <_dtoa_r+0x988>
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	ddec      	ble.n	800cb5c <_dtoa_r+0x924>
 800cb82:	2201      	movs	r2, #1
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 fc58 	bl	800d43c <__lshift>
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	9001      	str	r0, [sp, #4]
 800cb90:	f000 fca8 	bl	800d4e4 <__mcmp>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	dc03      	bgt.n	800cba0 <_dtoa_r+0x968>
 800cb98:	d1e0      	bne.n	800cb5c <_dtoa_r+0x924>
 800cb9a:	f018 0f01 	tst.w	r8, #1
 800cb9e:	d0dd      	beq.n	800cb5c <_dtoa_r+0x924>
 800cba0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cba4:	d1d8      	bne.n	800cb58 <_dtoa_r+0x920>
 800cba6:	2339      	movs	r3, #57	; 0x39
 800cba8:	f10a 0601 	add.w	r6, sl, #1
 800cbac:	f88a 3000 	strb.w	r3, [sl]
 800cbb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbb4:	2b39      	cmp	r3, #57	; 0x39
 800cbb6:	f106 32ff 	add.w	r2, r6, #4294967295
 800cbba:	d04c      	beq.n	800cc56 <_dtoa_r+0xa1e>
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	e051      	b.n	800cc64 <_dtoa_r+0xa2c>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f10a 0601 	add.w	r6, sl, #1
 800cbc6:	dd05      	ble.n	800cbd4 <_dtoa_r+0x99c>
 800cbc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cbcc:	d0eb      	beq.n	800cba6 <_dtoa_r+0x96e>
 800cbce:	f108 0801 	add.w	r8, r8, #1
 800cbd2:	e7c5      	b.n	800cb60 <_dtoa_r+0x928>
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	9a06      	ldr	r2, [sp, #24]
 800cbd8:	f806 8c01 	strb.w	r8, [r6, #-1]
 800cbdc:	1af3      	subs	r3, r6, r3
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d021      	beq.n	800cc26 <_dtoa_r+0x9ee>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	9901      	ldr	r1, [sp, #4]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fab0 	bl	800d14e <__multadd>
 800cbee:	45b9      	cmp	r9, r7
 800cbf0:	9001      	str	r0, [sp, #4]
 800cbf2:	f04f 0300 	mov.w	r3, #0
 800cbf6:	f04f 020a 	mov.w	r2, #10
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	d105      	bne.n	800cc0c <_dtoa_r+0x9d4>
 800cc00:	f000 faa5 	bl	800d14e <__multadd>
 800cc04:	4681      	mov	r9, r0
 800cc06:	4607      	mov	r7, r0
 800cc08:	46b2      	mov	sl, r6
 800cc0a:	e779      	b.n	800cb00 <_dtoa_r+0x8c8>
 800cc0c:	f000 fa9f 	bl	800d14e <__multadd>
 800cc10:	4639      	mov	r1, r7
 800cc12:	4681      	mov	r9, r0
 800cc14:	2300      	movs	r3, #0
 800cc16:	220a      	movs	r2, #10
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fa98 	bl	800d14e <__multadd>
 800cc1e:	4607      	mov	r7, r0
 800cc20:	e7f2      	b.n	800cc08 <_dtoa_r+0x9d0>
 800cc22:	f04f 0900 	mov.w	r9, #0
 800cc26:	2201      	movs	r2, #1
 800cc28:	9901      	ldr	r1, [sp, #4]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fc06 	bl	800d43c <__lshift>
 800cc30:	4629      	mov	r1, r5
 800cc32:	9001      	str	r0, [sp, #4]
 800cc34:	f000 fc56 	bl	800d4e4 <__mcmp>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	dcb9      	bgt.n	800cbb0 <_dtoa_r+0x978>
 800cc3c:	d102      	bne.n	800cc44 <_dtoa_r+0xa0c>
 800cc3e:	f018 0f01 	tst.w	r8, #1
 800cc42:	d1b5      	bne.n	800cbb0 <_dtoa_r+0x978>
 800cc44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc48:	2b30      	cmp	r3, #48	; 0x30
 800cc4a:	f106 32ff 	add.w	r2, r6, #4294967295
 800cc4e:	f47f af11 	bne.w	800ca74 <_dtoa_r+0x83c>
 800cc52:	4616      	mov	r6, r2
 800cc54:	e7f6      	b.n	800cc44 <_dtoa_r+0xa0c>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d105      	bne.n	800cc68 <_dtoa_r+0xa30>
 800cc5c:	9a04      	ldr	r2, [sp, #16]
 800cc5e:	f10b 0b01 	add.w	fp, fp, #1
 800cc62:	2331      	movs	r3, #49	; 0x31
 800cc64:	7013      	strb	r3, [r2, #0]
 800cc66:	e705      	b.n	800ca74 <_dtoa_r+0x83c>
 800cc68:	4616      	mov	r6, r2
 800cc6a:	e7a1      	b.n	800cbb0 <_dtoa_r+0x978>
 800cc6c:	4b16      	ldr	r3, [pc, #88]	; (800ccc8 <_dtoa_r+0xa90>)
 800cc6e:	f7ff bb48 	b.w	800c302 <_dtoa_r+0xca>
 800cc72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f47f ab23 	bne.w	800c2c0 <_dtoa_r+0x88>
 800cc7a:	4b14      	ldr	r3, [pc, #80]	; (800cccc <_dtoa_r+0xa94>)
 800cc7c:	f7ff bb41 	b.w	800c302 <_dtoa_r+0xca>
 800cc80:	9b08      	ldr	r3, [sp, #32]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	f77f ae3b 	ble.w	800c8fe <_dtoa_r+0x6c6>
 800cc88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cc8c:	e64f      	b.n	800c92e <_dtoa_r+0x6f6>
 800cc8e:	9b06      	ldr	r3, [sp, #24]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	dc03      	bgt.n	800cc9c <_dtoa_r+0xa64>
 800cc94:	9b08      	ldr	r3, [sp, #32]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	f73f aed7 	bgt.w	800ca4a <_dtoa_r+0x812>
 800cc9c:	9e04      	ldr	r6, [sp, #16]
 800cc9e:	9801      	ldr	r0, [sp, #4]
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7ff fa3b 	bl	800c11c <quorem>
 800cca6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ccaa:	f806 8b01 	strb.w	r8, [r6], #1
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	9a06      	ldr	r2, [sp, #24]
 800ccb2:	1af3      	subs	r3, r6, r3
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	ddb4      	ble.n	800cc22 <_dtoa_r+0x9ea>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	220a      	movs	r2, #10
 800ccbc:	9901      	ldr	r1, [sp, #4]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 fa45 	bl	800d14e <__multadd>
 800ccc4:	9001      	str	r0, [sp, #4]
 800ccc6:	e7ea      	b.n	800cc9e <_dtoa_r+0xa66>
 800ccc8:	0800de6f 	.word	0x0800de6f
 800cccc:	0800df94 	.word	0x0800df94

0800ccd0 <__sflush_r>:
 800ccd0:	898a      	ldrh	r2, [r1, #12]
 800ccd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd6:	4605      	mov	r5, r0
 800ccd8:	0710      	lsls	r0, r2, #28
 800ccda:	460c      	mov	r4, r1
 800ccdc:	d458      	bmi.n	800cd90 <__sflush_r+0xc0>
 800ccde:	684b      	ldr	r3, [r1, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	dc05      	bgt.n	800ccf0 <__sflush_r+0x20>
 800cce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dc02      	bgt.n	800ccf0 <__sflush_r+0x20>
 800ccea:	2000      	movs	r0, #0
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf2:	2e00      	cmp	r6, #0
 800ccf4:	d0f9      	beq.n	800ccea <__sflush_r+0x1a>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccfc:	682f      	ldr	r7, [r5, #0]
 800ccfe:	6a21      	ldr	r1, [r4, #32]
 800cd00:	602b      	str	r3, [r5, #0]
 800cd02:	d032      	beq.n	800cd6a <__sflush_r+0x9a>
 800cd04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	075a      	lsls	r2, r3, #29
 800cd0a:	d505      	bpl.n	800cd18 <__sflush_r+0x48>
 800cd0c:	6863      	ldr	r3, [r4, #4]
 800cd0e:	1ac0      	subs	r0, r0, r3
 800cd10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd12:	b10b      	cbz	r3, 800cd18 <__sflush_r+0x48>
 800cd14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd16:	1ac0      	subs	r0, r0, r3
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd1e:	6a21      	ldr	r1, [r4, #32]
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	d106      	bne.n	800cd38 <__sflush_r+0x68>
 800cd2a:	6829      	ldr	r1, [r5, #0]
 800cd2c:	291d      	cmp	r1, #29
 800cd2e:	d848      	bhi.n	800cdc2 <__sflush_r+0xf2>
 800cd30:	4a29      	ldr	r2, [pc, #164]	; (800cdd8 <__sflush_r+0x108>)
 800cd32:	40ca      	lsrs	r2, r1
 800cd34:	07d6      	lsls	r6, r2, #31
 800cd36:	d544      	bpl.n	800cdc2 <__sflush_r+0xf2>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	6062      	str	r2, [r4, #4]
 800cd3c:	04d9      	lsls	r1, r3, #19
 800cd3e:	6922      	ldr	r2, [r4, #16]
 800cd40:	6022      	str	r2, [r4, #0]
 800cd42:	d504      	bpl.n	800cd4e <__sflush_r+0x7e>
 800cd44:	1c42      	adds	r2, r0, #1
 800cd46:	d101      	bne.n	800cd4c <__sflush_r+0x7c>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	b903      	cbnz	r3, 800cd4e <__sflush_r+0x7e>
 800cd4c:	6560      	str	r0, [r4, #84]	; 0x54
 800cd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd50:	602f      	str	r7, [r5, #0]
 800cd52:	2900      	cmp	r1, #0
 800cd54:	d0c9      	beq.n	800ccea <__sflush_r+0x1a>
 800cd56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d002      	beq.n	800cd64 <__sflush_r+0x94>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 fc94 	bl	800d68c <_free_r>
 800cd64:	2000      	movs	r0, #0
 800cd66:	6360      	str	r0, [r4, #52]	; 0x34
 800cd68:	e7c0      	b.n	800ccec <__sflush_r+0x1c>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	47b0      	blx	r6
 800cd70:	1c41      	adds	r1, r0, #1
 800cd72:	d1c8      	bne.n	800cd06 <__sflush_r+0x36>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0c5      	beq.n	800cd06 <__sflush_r+0x36>
 800cd7a:	2b1d      	cmp	r3, #29
 800cd7c:	d001      	beq.n	800cd82 <__sflush_r+0xb2>
 800cd7e:	2b16      	cmp	r3, #22
 800cd80:	d101      	bne.n	800cd86 <__sflush_r+0xb6>
 800cd82:	602f      	str	r7, [r5, #0]
 800cd84:	e7b1      	b.n	800ccea <__sflush_r+0x1a>
 800cd86:	89a3      	ldrh	r3, [r4, #12]
 800cd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd8c:	81a3      	strh	r3, [r4, #12]
 800cd8e:	e7ad      	b.n	800ccec <__sflush_r+0x1c>
 800cd90:	690f      	ldr	r7, [r1, #16]
 800cd92:	2f00      	cmp	r7, #0
 800cd94:	d0a9      	beq.n	800ccea <__sflush_r+0x1a>
 800cd96:	0793      	lsls	r3, r2, #30
 800cd98:	680e      	ldr	r6, [r1, #0]
 800cd9a:	bf08      	it	eq
 800cd9c:	694b      	ldreq	r3, [r1, #20]
 800cd9e:	600f      	str	r7, [r1, #0]
 800cda0:	bf18      	it	ne
 800cda2:	2300      	movne	r3, #0
 800cda4:	eba6 0807 	sub.w	r8, r6, r7
 800cda8:	608b      	str	r3, [r1, #8]
 800cdaa:	f1b8 0f00 	cmp.w	r8, #0
 800cdae:	dd9c      	ble.n	800ccea <__sflush_r+0x1a>
 800cdb0:	4643      	mov	r3, r8
 800cdb2:	463a      	mov	r2, r7
 800cdb4:	6a21      	ldr	r1, [r4, #32]
 800cdb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdb8:	4628      	mov	r0, r5
 800cdba:	47b0      	blx	r6
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	dc06      	bgt.n	800cdce <__sflush_r+0xfe>
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	e78e      	b.n	800ccec <__sflush_r+0x1c>
 800cdce:	4407      	add	r7, r0
 800cdd0:	eba8 0800 	sub.w	r8, r8, r0
 800cdd4:	e7e9      	b.n	800cdaa <__sflush_r+0xda>
 800cdd6:	bf00      	nop
 800cdd8:	20400001 	.word	0x20400001

0800cddc <_fflush_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	690b      	ldr	r3, [r1, #16]
 800cde0:	4605      	mov	r5, r0
 800cde2:	460c      	mov	r4, r1
 800cde4:	b1db      	cbz	r3, 800ce1e <_fflush_r+0x42>
 800cde6:	b118      	cbz	r0, 800cdf0 <_fflush_r+0x14>
 800cde8:	6983      	ldr	r3, [r0, #24]
 800cdea:	b90b      	cbnz	r3, 800cdf0 <_fflush_r+0x14>
 800cdec:	f000 f860 	bl	800ceb0 <__sinit>
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <_fflush_r+0x48>)
 800cdf2:	429c      	cmp	r4, r3
 800cdf4:	d109      	bne.n	800ce0a <_fflush_r+0x2e>
 800cdf6:	686c      	ldr	r4, [r5, #4]
 800cdf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfc:	b17b      	cbz	r3, 800ce1e <_fflush_r+0x42>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce06:	f7ff bf63 	b.w	800ccd0 <__sflush_r>
 800ce0a:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <_fflush_r+0x4c>)
 800ce0c:	429c      	cmp	r4, r3
 800ce0e:	d101      	bne.n	800ce14 <_fflush_r+0x38>
 800ce10:	68ac      	ldr	r4, [r5, #8]
 800ce12:	e7f1      	b.n	800cdf8 <_fflush_r+0x1c>
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <_fflush_r+0x50>)
 800ce16:	429c      	cmp	r4, r3
 800ce18:	bf08      	it	eq
 800ce1a:	68ec      	ldreq	r4, [r5, #12]
 800ce1c:	e7ec      	b.n	800cdf8 <_fflush_r+0x1c>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	bf00      	nop
 800ce24:	0800dfc4 	.word	0x0800dfc4
 800ce28:	0800dfe4 	.word	0x0800dfe4
 800ce2c:	0800dfa4 	.word	0x0800dfa4

0800ce30 <std>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	b510      	push	{r4, lr}
 800ce34:	4604      	mov	r4, r0
 800ce36:	e9c0 3300 	strd	r3, r3, [r0]
 800ce3a:	6083      	str	r3, [r0, #8]
 800ce3c:	8181      	strh	r1, [r0, #12]
 800ce3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce40:	81c2      	strh	r2, [r0, #14]
 800ce42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce46:	6183      	str	r3, [r0, #24]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	305c      	adds	r0, #92	; 0x5c
 800ce4e:	f7fe fa63 	bl	800b318 <memset>
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <std+0x38>)
 800ce54:	6263      	str	r3, [r4, #36]	; 0x24
 800ce56:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <std+0x3c>)
 800ce58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <std+0x40>)
 800ce5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce5e:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <std+0x44>)
 800ce60:	6224      	str	r4, [r4, #32]
 800ce62:	6323      	str	r3, [r4, #48]	; 0x30
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	bf00      	nop
 800ce68:	0800db59 	.word	0x0800db59
 800ce6c:	0800db7b 	.word	0x0800db7b
 800ce70:	0800dbb3 	.word	0x0800dbb3
 800ce74:	0800dbd7 	.word	0x0800dbd7

0800ce78 <_cleanup_r>:
 800ce78:	4901      	ldr	r1, [pc, #4]	; (800ce80 <_cleanup_r+0x8>)
 800ce7a:	f000 b885 	b.w	800cf88 <_fwalk_reent>
 800ce7e:	bf00      	nop
 800ce80:	0800cddd 	.word	0x0800cddd

0800ce84 <__sfmoreglue>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	1e4a      	subs	r2, r1, #1
 800ce88:	2568      	movs	r5, #104	; 0x68
 800ce8a:	4355      	muls	r5, r2
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce92:	f000 fc49 	bl	800d728 <_malloc_r>
 800ce96:	4604      	mov	r4, r0
 800ce98:	b140      	cbz	r0, 800ceac <__sfmoreglue+0x28>
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	e9c0 1600 	strd	r1, r6, [r0]
 800cea0:	300c      	adds	r0, #12
 800cea2:	60a0      	str	r0, [r4, #8]
 800cea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cea8:	f7fe fa36 	bl	800b318 <memset>
 800ceac:	4620      	mov	r0, r4
 800ceae:	bd70      	pop	{r4, r5, r6, pc}

0800ceb0 <__sinit>:
 800ceb0:	6983      	ldr	r3, [r0, #24]
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	bb33      	cbnz	r3, 800cf06 <__sinit+0x56>
 800ceb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cebc:	6503      	str	r3, [r0, #80]	; 0x50
 800cebe:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <__sinit+0x58>)
 800cec0:	4a12      	ldr	r2, [pc, #72]	; (800cf0c <__sinit+0x5c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6282      	str	r2, [r0, #40]	; 0x28
 800cec6:	4298      	cmp	r0, r3
 800cec8:	bf04      	itt	eq
 800ceca:	2301      	moveq	r3, #1
 800cecc:	6183      	streq	r3, [r0, #24]
 800cece:	f000 f81f 	bl	800cf10 <__sfp>
 800ced2:	6060      	str	r0, [r4, #4]
 800ced4:	4620      	mov	r0, r4
 800ced6:	f000 f81b 	bl	800cf10 <__sfp>
 800ceda:	60a0      	str	r0, [r4, #8]
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 f817 	bl	800cf10 <__sfp>
 800cee2:	2200      	movs	r2, #0
 800cee4:	60e0      	str	r0, [r4, #12]
 800cee6:	2104      	movs	r1, #4
 800cee8:	6860      	ldr	r0, [r4, #4]
 800ceea:	f7ff ffa1 	bl	800ce30 <std>
 800ceee:	2201      	movs	r2, #1
 800cef0:	2109      	movs	r1, #9
 800cef2:	68a0      	ldr	r0, [r4, #8]
 800cef4:	f7ff ff9c 	bl	800ce30 <std>
 800cef8:	2202      	movs	r2, #2
 800cefa:	2112      	movs	r1, #18
 800cefc:	68e0      	ldr	r0, [r4, #12]
 800cefe:	f7ff ff97 	bl	800ce30 <std>
 800cf02:	2301      	movs	r3, #1
 800cf04:	61a3      	str	r3, [r4, #24]
 800cf06:	bd10      	pop	{r4, pc}
 800cf08:	0800de40 	.word	0x0800de40
 800cf0c:	0800ce79 	.word	0x0800ce79

0800cf10 <__sfp>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	4b1b      	ldr	r3, [pc, #108]	; (800cf80 <__sfp+0x70>)
 800cf14:	681e      	ldr	r6, [r3, #0]
 800cf16:	69b3      	ldr	r3, [r6, #24]
 800cf18:	4607      	mov	r7, r0
 800cf1a:	b913      	cbnz	r3, 800cf22 <__sfp+0x12>
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7ff ffc7 	bl	800ceb0 <__sinit>
 800cf22:	3648      	adds	r6, #72	; 0x48
 800cf24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	d503      	bpl.n	800cf34 <__sfp+0x24>
 800cf2c:	6833      	ldr	r3, [r6, #0]
 800cf2e:	b133      	cbz	r3, 800cf3e <__sfp+0x2e>
 800cf30:	6836      	ldr	r6, [r6, #0]
 800cf32:	e7f7      	b.n	800cf24 <__sfp+0x14>
 800cf34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf38:	b16d      	cbz	r5, 800cf56 <__sfp+0x46>
 800cf3a:	3468      	adds	r4, #104	; 0x68
 800cf3c:	e7f4      	b.n	800cf28 <__sfp+0x18>
 800cf3e:	2104      	movs	r1, #4
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff ff9f 	bl	800ce84 <__sfmoreglue>
 800cf46:	6030      	str	r0, [r6, #0]
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d1f1      	bne.n	800cf30 <__sfp+0x20>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	4604      	mov	r4, r0
 800cf52:	4620      	mov	r0, r4
 800cf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf56:	4b0b      	ldr	r3, [pc, #44]	; (800cf84 <__sfp+0x74>)
 800cf58:	6665      	str	r5, [r4, #100]	; 0x64
 800cf5a:	e9c4 5500 	strd	r5, r5, [r4]
 800cf5e:	60a5      	str	r5, [r4, #8]
 800cf60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cf64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cf68:	2208      	movs	r2, #8
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf70:	f7fe f9d2 	bl	800b318 <memset>
 800cf74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf7c:	e7e9      	b.n	800cf52 <__sfp+0x42>
 800cf7e:	bf00      	nop
 800cf80:	0800de40 	.word	0x0800de40
 800cf84:	ffff0001 	.word	0xffff0001

0800cf88 <_fwalk_reent>:
 800cf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	4689      	mov	r9, r1
 800cf90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf94:	2600      	movs	r6, #0
 800cf96:	b914      	cbnz	r4, 800cf9e <_fwalk_reent+0x16>
 800cf98:	4630      	mov	r0, r6
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cfa2:	3f01      	subs	r7, #1
 800cfa4:	d501      	bpl.n	800cfaa <_fwalk_reent+0x22>
 800cfa6:	6824      	ldr	r4, [r4, #0]
 800cfa8:	e7f5      	b.n	800cf96 <_fwalk_reent+0xe>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d907      	bls.n	800cfc0 <_fwalk_reent+0x38>
 800cfb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	d003      	beq.n	800cfc0 <_fwalk_reent+0x38>
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4640      	mov	r0, r8
 800cfbc:	47c8      	blx	r9
 800cfbe:	4306      	orrs	r6, r0
 800cfc0:	3568      	adds	r5, #104	; 0x68
 800cfc2:	e7ee      	b.n	800cfa2 <_fwalk_reent+0x1a>

0800cfc4 <_localeconv_r>:
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <_localeconv_r+0x14>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6a18      	ldr	r0, [r3, #32]
 800cfca:	4b04      	ldr	r3, [pc, #16]	; (800cfdc <_localeconv_r+0x18>)
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	bf08      	it	eq
 800cfd0:	4618      	moveq	r0, r3
 800cfd2:	30f0      	adds	r0, #240	; 0xf0
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	24000014 	.word	0x24000014
 800cfdc:	24000078 	.word	0x24000078

0800cfe0 <__swhatbuf_r>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	460e      	mov	r6, r1
 800cfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe8:	2900      	cmp	r1, #0
 800cfea:	b096      	sub	sp, #88	; 0x58
 800cfec:	4614      	mov	r4, r2
 800cfee:	461d      	mov	r5, r3
 800cff0:	da07      	bge.n	800d002 <__swhatbuf_r+0x22>
 800cff2:	2300      	movs	r3, #0
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	89b3      	ldrh	r3, [r6, #12]
 800cff8:	061a      	lsls	r2, r3, #24
 800cffa:	d410      	bmi.n	800d01e <__swhatbuf_r+0x3e>
 800cffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d000:	e00e      	b.n	800d020 <__swhatbuf_r+0x40>
 800d002:	466a      	mov	r2, sp
 800d004:	f000 fe0e 	bl	800dc24 <_fstat_r>
 800d008:	2800      	cmp	r0, #0
 800d00a:	dbf2      	blt.n	800cff2 <__swhatbuf_r+0x12>
 800d00c:	9a01      	ldr	r2, [sp, #4]
 800d00e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d016:	425a      	negs	r2, r3
 800d018:	415a      	adcs	r2, r3
 800d01a:	602a      	str	r2, [r5, #0]
 800d01c:	e7ee      	b.n	800cffc <__swhatbuf_r+0x1c>
 800d01e:	2340      	movs	r3, #64	; 0x40
 800d020:	2000      	movs	r0, #0
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	b016      	add	sp, #88	; 0x58
 800d026:	bd70      	pop	{r4, r5, r6, pc}

0800d028 <__smakebuf_r>:
 800d028:	898b      	ldrh	r3, [r1, #12]
 800d02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d02c:	079d      	lsls	r5, r3, #30
 800d02e:	4606      	mov	r6, r0
 800d030:	460c      	mov	r4, r1
 800d032:	d507      	bpl.n	800d044 <__smakebuf_r+0x1c>
 800d034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	6123      	str	r3, [r4, #16]
 800d03c:	2301      	movs	r3, #1
 800d03e:	6163      	str	r3, [r4, #20]
 800d040:	b002      	add	sp, #8
 800d042:	bd70      	pop	{r4, r5, r6, pc}
 800d044:	ab01      	add	r3, sp, #4
 800d046:	466a      	mov	r2, sp
 800d048:	f7ff ffca 	bl	800cfe0 <__swhatbuf_r>
 800d04c:	9900      	ldr	r1, [sp, #0]
 800d04e:	4605      	mov	r5, r0
 800d050:	4630      	mov	r0, r6
 800d052:	f000 fb69 	bl	800d728 <_malloc_r>
 800d056:	b948      	cbnz	r0, 800d06c <__smakebuf_r+0x44>
 800d058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d05c:	059a      	lsls	r2, r3, #22
 800d05e:	d4ef      	bmi.n	800d040 <__smakebuf_r+0x18>
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	f043 0302 	orr.w	r3, r3, #2
 800d068:	81a3      	strh	r3, [r4, #12]
 800d06a:	e7e3      	b.n	800d034 <__smakebuf_r+0xc>
 800d06c:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <__smakebuf_r+0x7c>)
 800d06e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	6020      	str	r0, [r4, #0]
 800d074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	9b00      	ldr	r3, [sp, #0]
 800d07c:	6163      	str	r3, [r4, #20]
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	6120      	str	r0, [r4, #16]
 800d082:	b15b      	cbz	r3, 800d09c <__smakebuf_r+0x74>
 800d084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d088:	4630      	mov	r0, r6
 800d08a:	f000 fddd 	bl	800dc48 <_isatty_r>
 800d08e:	b128      	cbz	r0, 800d09c <__smakebuf_r+0x74>
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	f023 0303 	bic.w	r3, r3, #3
 800d096:	f043 0301 	orr.w	r3, r3, #1
 800d09a:	81a3      	strh	r3, [r4, #12]
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	431d      	orrs	r5, r3
 800d0a0:	81a5      	strh	r5, [r4, #12]
 800d0a2:	e7cd      	b.n	800d040 <__smakebuf_r+0x18>
 800d0a4:	0800ce79 	.word	0x0800ce79

0800d0a8 <malloc>:
 800d0a8:	4b02      	ldr	r3, [pc, #8]	; (800d0b4 <malloc+0xc>)
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	6818      	ldr	r0, [r3, #0]
 800d0ae:	f000 bb3b 	b.w	800d728 <_malloc_r>
 800d0b2:	bf00      	nop
 800d0b4:	24000014 	.word	0x24000014

0800d0b8 <_Balloc>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d0bc:	4604      	mov	r4, r0
 800d0be:	460e      	mov	r6, r1
 800d0c0:	b93d      	cbnz	r5, 800d0d2 <_Balloc+0x1a>
 800d0c2:	2010      	movs	r0, #16
 800d0c4:	f7ff fff0 	bl	800d0a8 <malloc>
 800d0c8:	6260      	str	r0, [r4, #36]	; 0x24
 800d0ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0ce:	6005      	str	r5, [r0, #0]
 800d0d0:	60c5      	str	r5, [r0, #12]
 800d0d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d0d4:	68eb      	ldr	r3, [r5, #12]
 800d0d6:	b183      	cbz	r3, 800d0fa <_Balloc+0x42>
 800d0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d0e0:	b9b8      	cbnz	r0, 800d112 <_Balloc+0x5a>
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	fa01 f506 	lsl.w	r5, r1, r6
 800d0e8:	1d6a      	adds	r2, r5, #5
 800d0ea:	0092      	lsls	r2, r2, #2
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f000 fabf 	bl	800d670 <_calloc_r>
 800d0f2:	b160      	cbz	r0, 800d10e <_Balloc+0x56>
 800d0f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d0f8:	e00e      	b.n	800d118 <_Balloc+0x60>
 800d0fa:	2221      	movs	r2, #33	; 0x21
 800d0fc:	2104      	movs	r1, #4
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 fab6 	bl	800d670 <_calloc_r>
 800d104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d106:	60e8      	str	r0, [r5, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1e4      	bne.n	800d0d8 <_Balloc+0x20>
 800d10e:	2000      	movs	r0, #0
 800d110:	bd70      	pop	{r4, r5, r6, pc}
 800d112:	6802      	ldr	r2, [r0, #0]
 800d114:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d118:	2300      	movs	r3, #0
 800d11a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d11e:	e7f7      	b.n	800d110 <_Balloc+0x58>

0800d120 <_Bfree>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d124:	4606      	mov	r6, r0
 800d126:	460d      	mov	r5, r1
 800d128:	b93c      	cbnz	r4, 800d13a <_Bfree+0x1a>
 800d12a:	2010      	movs	r0, #16
 800d12c:	f7ff ffbc 	bl	800d0a8 <malloc>
 800d130:	6270      	str	r0, [r6, #36]	; 0x24
 800d132:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d136:	6004      	str	r4, [r0, #0]
 800d138:	60c4      	str	r4, [r0, #12]
 800d13a:	b13d      	cbz	r5, 800d14c <_Bfree+0x2c>
 800d13c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d13e:	686a      	ldr	r2, [r5, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d146:	6029      	str	r1, [r5, #0]
 800d148:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d14c:	bd70      	pop	{r4, r5, r6, pc}

0800d14e <__multadd>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	690d      	ldr	r5, [r1, #16]
 800d154:	461f      	mov	r7, r3
 800d156:	4606      	mov	r6, r0
 800d158:	460c      	mov	r4, r1
 800d15a:	f101 0c14 	add.w	ip, r1, #20
 800d15e:	2300      	movs	r3, #0
 800d160:	f8dc 0000 	ldr.w	r0, [ip]
 800d164:	b281      	uxth	r1, r0
 800d166:	fb02 7101 	mla	r1, r2, r1, r7
 800d16a:	0c0f      	lsrs	r7, r1, #16
 800d16c:	0c00      	lsrs	r0, r0, #16
 800d16e:	fb02 7000 	mla	r0, r2, r0, r7
 800d172:	b289      	uxth	r1, r1
 800d174:	3301      	adds	r3, #1
 800d176:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d17a:	429d      	cmp	r5, r3
 800d17c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d180:	f84c 1b04 	str.w	r1, [ip], #4
 800d184:	dcec      	bgt.n	800d160 <__multadd+0x12>
 800d186:	b1d7      	cbz	r7, 800d1be <__multadd+0x70>
 800d188:	68a3      	ldr	r3, [r4, #8]
 800d18a:	42ab      	cmp	r3, r5
 800d18c:	dc12      	bgt.n	800d1b4 <__multadd+0x66>
 800d18e:	6861      	ldr	r1, [r4, #4]
 800d190:	4630      	mov	r0, r6
 800d192:	3101      	adds	r1, #1
 800d194:	f7ff ff90 	bl	800d0b8 <_Balloc>
 800d198:	6922      	ldr	r2, [r4, #16]
 800d19a:	3202      	adds	r2, #2
 800d19c:	f104 010c 	add.w	r1, r4, #12
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	300c      	adds	r0, #12
 800d1a6:	f7fe f893 	bl	800b2d0 <memcpy>
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff ffb7 	bl	800d120 <_Bfree>
 800d1b2:	4644      	mov	r4, r8
 800d1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	615f      	str	r7, [r3, #20]
 800d1bc:	6125      	str	r5, [r4, #16]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1c4 <__hi0bits>:
 800d1c4:	0c02      	lsrs	r2, r0, #16
 800d1c6:	0412      	lsls	r2, r2, #16
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	b9b2      	cbnz	r2, 800d1fa <__hi0bits+0x36>
 800d1cc:	0403      	lsls	r3, r0, #16
 800d1ce:	2010      	movs	r0, #16
 800d1d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d1d4:	bf04      	itt	eq
 800d1d6:	021b      	lsleq	r3, r3, #8
 800d1d8:	3008      	addeq	r0, #8
 800d1da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d1de:	bf04      	itt	eq
 800d1e0:	011b      	lsleq	r3, r3, #4
 800d1e2:	3004      	addeq	r0, #4
 800d1e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d1e8:	bf04      	itt	eq
 800d1ea:	009b      	lsleq	r3, r3, #2
 800d1ec:	3002      	addeq	r0, #2
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	db06      	blt.n	800d200 <__hi0bits+0x3c>
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	d503      	bpl.n	800d1fe <__hi0bits+0x3a>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	4770      	bx	lr
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e7e8      	b.n	800d1d0 <__hi0bits+0xc>
 800d1fe:	2020      	movs	r0, #32
 800d200:	4770      	bx	lr

0800d202 <__lo0bits>:
 800d202:	6803      	ldr	r3, [r0, #0]
 800d204:	f013 0207 	ands.w	r2, r3, #7
 800d208:	4601      	mov	r1, r0
 800d20a:	d00b      	beq.n	800d224 <__lo0bits+0x22>
 800d20c:	07da      	lsls	r2, r3, #31
 800d20e:	d423      	bmi.n	800d258 <__lo0bits+0x56>
 800d210:	0798      	lsls	r0, r3, #30
 800d212:	bf49      	itett	mi
 800d214:	085b      	lsrmi	r3, r3, #1
 800d216:	089b      	lsrpl	r3, r3, #2
 800d218:	2001      	movmi	r0, #1
 800d21a:	600b      	strmi	r3, [r1, #0]
 800d21c:	bf5c      	itt	pl
 800d21e:	600b      	strpl	r3, [r1, #0]
 800d220:	2002      	movpl	r0, #2
 800d222:	4770      	bx	lr
 800d224:	b298      	uxth	r0, r3
 800d226:	b9a8      	cbnz	r0, 800d254 <__lo0bits+0x52>
 800d228:	0c1b      	lsrs	r3, r3, #16
 800d22a:	2010      	movs	r0, #16
 800d22c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d230:	bf04      	itt	eq
 800d232:	0a1b      	lsreq	r3, r3, #8
 800d234:	3008      	addeq	r0, #8
 800d236:	071a      	lsls	r2, r3, #28
 800d238:	bf04      	itt	eq
 800d23a:	091b      	lsreq	r3, r3, #4
 800d23c:	3004      	addeq	r0, #4
 800d23e:	079a      	lsls	r2, r3, #30
 800d240:	bf04      	itt	eq
 800d242:	089b      	lsreq	r3, r3, #2
 800d244:	3002      	addeq	r0, #2
 800d246:	07da      	lsls	r2, r3, #31
 800d248:	d402      	bmi.n	800d250 <__lo0bits+0x4e>
 800d24a:	085b      	lsrs	r3, r3, #1
 800d24c:	d006      	beq.n	800d25c <__lo0bits+0x5a>
 800d24e:	3001      	adds	r0, #1
 800d250:	600b      	str	r3, [r1, #0]
 800d252:	4770      	bx	lr
 800d254:	4610      	mov	r0, r2
 800d256:	e7e9      	b.n	800d22c <__lo0bits+0x2a>
 800d258:	2000      	movs	r0, #0
 800d25a:	4770      	bx	lr
 800d25c:	2020      	movs	r0, #32
 800d25e:	4770      	bx	lr

0800d260 <__i2b>:
 800d260:	b510      	push	{r4, lr}
 800d262:	460c      	mov	r4, r1
 800d264:	2101      	movs	r1, #1
 800d266:	f7ff ff27 	bl	800d0b8 <_Balloc>
 800d26a:	2201      	movs	r2, #1
 800d26c:	6144      	str	r4, [r0, #20]
 800d26e:	6102      	str	r2, [r0, #16]
 800d270:	bd10      	pop	{r4, pc}

0800d272 <__multiply>:
 800d272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d276:	4614      	mov	r4, r2
 800d278:	690a      	ldr	r2, [r1, #16]
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	bfb8      	it	lt
 800d280:	460b      	movlt	r3, r1
 800d282:	4688      	mov	r8, r1
 800d284:	bfbc      	itt	lt
 800d286:	46a0      	movlt	r8, r4
 800d288:	461c      	movlt	r4, r3
 800d28a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d28e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d296:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d29a:	eb07 0609 	add.w	r6, r7, r9
 800d29e:	42b3      	cmp	r3, r6
 800d2a0:	bfb8      	it	lt
 800d2a2:	3101      	addlt	r1, #1
 800d2a4:	f7ff ff08 	bl	800d0b8 <_Balloc>
 800d2a8:	f100 0514 	add.w	r5, r0, #20
 800d2ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d2b0:	462b      	mov	r3, r5
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	4573      	cmp	r3, lr
 800d2b6:	d316      	bcc.n	800d2e6 <__multiply+0x74>
 800d2b8:	f104 0214 	add.w	r2, r4, #20
 800d2bc:	f108 0114 	add.w	r1, r8, #20
 800d2c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d2c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	9b00      	ldr	r3, [sp, #0]
 800d2cc:	9201      	str	r2, [sp, #4]
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d80c      	bhi.n	800d2ec <__multiply+0x7a>
 800d2d2:	2e00      	cmp	r6, #0
 800d2d4:	dd03      	ble.n	800d2de <__multiply+0x6c>
 800d2d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d05d      	beq.n	800d39a <__multiply+0x128>
 800d2de:	6106      	str	r6, [r0, #16]
 800d2e0:	b003      	add	sp, #12
 800d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e6:	f843 2b04 	str.w	r2, [r3], #4
 800d2ea:	e7e3      	b.n	800d2b4 <__multiply+0x42>
 800d2ec:	f8b2 b000 	ldrh.w	fp, [r2]
 800d2f0:	f1bb 0f00 	cmp.w	fp, #0
 800d2f4:	d023      	beq.n	800d33e <__multiply+0xcc>
 800d2f6:	4689      	mov	r9, r1
 800d2f8:	46ac      	mov	ip, r5
 800d2fa:	f04f 0800 	mov.w	r8, #0
 800d2fe:	f859 4b04 	ldr.w	r4, [r9], #4
 800d302:	f8dc a000 	ldr.w	sl, [ip]
 800d306:	b2a3      	uxth	r3, r4
 800d308:	fa1f fa8a 	uxth.w	sl, sl
 800d30c:	fb0b a303 	mla	r3, fp, r3, sl
 800d310:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d314:	f8dc 4000 	ldr.w	r4, [ip]
 800d318:	4443      	add	r3, r8
 800d31a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d31e:	fb0b 840a 	mla	r4, fp, sl, r8
 800d322:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d326:	46e2      	mov	sl, ip
 800d328:	b29b      	uxth	r3, r3
 800d32a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d32e:	454f      	cmp	r7, r9
 800d330:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d334:	f84a 3b04 	str.w	r3, [sl], #4
 800d338:	d82b      	bhi.n	800d392 <__multiply+0x120>
 800d33a:	f8cc 8004 	str.w	r8, [ip, #4]
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d344:	3204      	adds	r2, #4
 800d346:	f1ba 0f00 	cmp.w	sl, #0
 800d34a:	d020      	beq.n	800d38e <__multiply+0x11c>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	4689      	mov	r9, r1
 800d350:	46a8      	mov	r8, r5
 800d352:	f04f 0b00 	mov.w	fp, #0
 800d356:	f8b9 c000 	ldrh.w	ip, [r9]
 800d35a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d35e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d362:	445c      	add	r4, fp
 800d364:	46c4      	mov	ip, r8
 800d366:	b29b      	uxth	r3, r3
 800d368:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d36c:	f84c 3b04 	str.w	r3, [ip], #4
 800d370:	f859 3b04 	ldr.w	r3, [r9], #4
 800d374:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d378:	0c1b      	lsrs	r3, r3, #16
 800d37a:	fb0a b303 	mla	r3, sl, r3, fp
 800d37e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d382:	454f      	cmp	r7, r9
 800d384:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d388:	d805      	bhi.n	800d396 <__multiply+0x124>
 800d38a:	f8c8 3004 	str.w	r3, [r8, #4]
 800d38e:	3504      	adds	r5, #4
 800d390:	e79b      	b.n	800d2ca <__multiply+0x58>
 800d392:	46d4      	mov	ip, sl
 800d394:	e7b3      	b.n	800d2fe <__multiply+0x8c>
 800d396:	46e0      	mov	r8, ip
 800d398:	e7dd      	b.n	800d356 <__multiply+0xe4>
 800d39a:	3e01      	subs	r6, #1
 800d39c:	e799      	b.n	800d2d2 <__multiply+0x60>
	...

0800d3a0 <__pow5mult>:
 800d3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a4:	4615      	mov	r5, r2
 800d3a6:	f012 0203 	ands.w	r2, r2, #3
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	d007      	beq.n	800d3c0 <__pow5mult+0x20>
 800d3b0:	3a01      	subs	r2, #1
 800d3b2:	4c21      	ldr	r4, [pc, #132]	; (800d438 <__pow5mult+0x98>)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ba:	f7ff fec8 	bl	800d14e <__multadd>
 800d3be:	4607      	mov	r7, r0
 800d3c0:	10ad      	asrs	r5, r5, #2
 800d3c2:	d035      	beq.n	800d430 <__pow5mult+0x90>
 800d3c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3c6:	b93c      	cbnz	r4, 800d3d8 <__pow5mult+0x38>
 800d3c8:	2010      	movs	r0, #16
 800d3ca:	f7ff fe6d 	bl	800d0a8 <malloc>
 800d3ce:	6270      	str	r0, [r6, #36]	; 0x24
 800d3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d4:	6004      	str	r4, [r0, #0]
 800d3d6:	60c4      	str	r4, [r0, #12]
 800d3d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3e0:	b94c      	cbnz	r4, 800d3f6 <__pow5mult+0x56>
 800d3e2:	f240 2171 	movw	r1, #625	; 0x271
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ff3a 	bl	800d260 <__i2b>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	6003      	str	r3, [r0, #0]
 800d3f6:	f04f 0800 	mov.w	r8, #0
 800d3fa:	07eb      	lsls	r3, r5, #31
 800d3fc:	d50a      	bpl.n	800d414 <__pow5mult+0x74>
 800d3fe:	4639      	mov	r1, r7
 800d400:	4622      	mov	r2, r4
 800d402:	4630      	mov	r0, r6
 800d404:	f7ff ff35 	bl	800d272 <__multiply>
 800d408:	4639      	mov	r1, r7
 800d40a:	4681      	mov	r9, r0
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7ff fe87 	bl	800d120 <_Bfree>
 800d412:	464f      	mov	r7, r9
 800d414:	106d      	asrs	r5, r5, #1
 800d416:	d00b      	beq.n	800d430 <__pow5mult+0x90>
 800d418:	6820      	ldr	r0, [r4, #0]
 800d41a:	b938      	cbnz	r0, 800d42c <__pow5mult+0x8c>
 800d41c:	4622      	mov	r2, r4
 800d41e:	4621      	mov	r1, r4
 800d420:	4630      	mov	r0, r6
 800d422:	f7ff ff26 	bl	800d272 <__multiply>
 800d426:	6020      	str	r0, [r4, #0]
 800d428:	f8c0 8000 	str.w	r8, [r0]
 800d42c:	4604      	mov	r4, r0
 800d42e:	e7e4      	b.n	800d3fa <__pow5mult+0x5a>
 800d430:	4638      	mov	r0, r7
 800d432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d436:	bf00      	nop
 800d438:	0800e0f8 	.word	0x0800e0f8

0800d43c <__lshift>:
 800d43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d440:	460c      	mov	r4, r1
 800d442:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	6849      	ldr	r1, [r1, #4]
 800d44a:	eb0a 0903 	add.w	r9, sl, r3
 800d44e:	68a3      	ldr	r3, [r4, #8]
 800d450:	4607      	mov	r7, r0
 800d452:	4616      	mov	r6, r2
 800d454:	f109 0501 	add.w	r5, r9, #1
 800d458:	42ab      	cmp	r3, r5
 800d45a:	db32      	blt.n	800d4c2 <__lshift+0x86>
 800d45c:	4638      	mov	r0, r7
 800d45e:	f7ff fe2b 	bl	800d0b8 <_Balloc>
 800d462:	2300      	movs	r3, #0
 800d464:	4680      	mov	r8, r0
 800d466:	f100 0114 	add.w	r1, r0, #20
 800d46a:	461a      	mov	r2, r3
 800d46c:	4553      	cmp	r3, sl
 800d46e:	db2b      	blt.n	800d4c8 <__lshift+0x8c>
 800d470:	6920      	ldr	r0, [r4, #16]
 800d472:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d476:	f104 0314 	add.w	r3, r4, #20
 800d47a:	f016 021f 	ands.w	r2, r6, #31
 800d47e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d482:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d486:	d025      	beq.n	800d4d4 <__lshift+0x98>
 800d488:	f1c2 0e20 	rsb	lr, r2, #32
 800d48c:	2000      	movs	r0, #0
 800d48e:	681e      	ldr	r6, [r3, #0]
 800d490:	468a      	mov	sl, r1
 800d492:	4096      	lsls	r6, r2
 800d494:	4330      	orrs	r0, r6
 800d496:	f84a 0b04 	str.w	r0, [sl], #4
 800d49a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d49e:	459c      	cmp	ip, r3
 800d4a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800d4a4:	d814      	bhi.n	800d4d0 <__lshift+0x94>
 800d4a6:	6048      	str	r0, [r1, #4]
 800d4a8:	b108      	cbz	r0, 800d4ae <__lshift+0x72>
 800d4aa:	f109 0502 	add.w	r5, r9, #2
 800d4ae:	3d01      	subs	r5, #1
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	f7ff fe32 	bl	800d120 <_Bfree>
 800d4bc:	4640      	mov	r0, r8
 800d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c2:	3101      	adds	r1, #1
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	e7c7      	b.n	800d458 <__lshift+0x1c>
 800d4c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	e7cd      	b.n	800d46c <__lshift+0x30>
 800d4d0:	4651      	mov	r1, sl
 800d4d2:	e7dc      	b.n	800d48e <__lshift+0x52>
 800d4d4:	3904      	subs	r1, #4
 800d4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4da:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4de:	459c      	cmp	ip, r3
 800d4e0:	d8f9      	bhi.n	800d4d6 <__lshift+0x9a>
 800d4e2:	e7e4      	b.n	800d4ae <__lshift+0x72>

0800d4e4 <__mcmp>:
 800d4e4:	6903      	ldr	r3, [r0, #16]
 800d4e6:	690a      	ldr	r2, [r1, #16]
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	b530      	push	{r4, r5, lr}
 800d4ec:	d10c      	bne.n	800d508 <__mcmp+0x24>
 800d4ee:	0092      	lsls	r2, r2, #2
 800d4f0:	3014      	adds	r0, #20
 800d4f2:	3114      	adds	r1, #20
 800d4f4:	1884      	adds	r4, r0, r2
 800d4f6:	4411      	add	r1, r2
 800d4f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d500:	4295      	cmp	r5, r2
 800d502:	d003      	beq.n	800d50c <__mcmp+0x28>
 800d504:	d305      	bcc.n	800d512 <__mcmp+0x2e>
 800d506:	2301      	movs	r3, #1
 800d508:	4618      	mov	r0, r3
 800d50a:	bd30      	pop	{r4, r5, pc}
 800d50c:	42a0      	cmp	r0, r4
 800d50e:	d3f3      	bcc.n	800d4f8 <__mcmp+0x14>
 800d510:	e7fa      	b.n	800d508 <__mcmp+0x24>
 800d512:	f04f 33ff 	mov.w	r3, #4294967295
 800d516:	e7f7      	b.n	800d508 <__mcmp+0x24>

0800d518 <__mdiff>:
 800d518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d51c:	460d      	mov	r5, r1
 800d51e:	4607      	mov	r7, r0
 800d520:	4611      	mov	r1, r2
 800d522:	4628      	mov	r0, r5
 800d524:	4614      	mov	r4, r2
 800d526:	f7ff ffdd 	bl	800d4e4 <__mcmp>
 800d52a:	1e06      	subs	r6, r0, #0
 800d52c:	d108      	bne.n	800d540 <__mdiff+0x28>
 800d52e:	4631      	mov	r1, r6
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff fdc1 	bl	800d0b8 <_Balloc>
 800d536:	2301      	movs	r3, #1
 800d538:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	bfa4      	itt	ge
 800d542:	4623      	movge	r3, r4
 800d544:	462c      	movge	r4, r5
 800d546:	4638      	mov	r0, r7
 800d548:	6861      	ldr	r1, [r4, #4]
 800d54a:	bfa6      	itte	ge
 800d54c:	461d      	movge	r5, r3
 800d54e:	2600      	movge	r6, #0
 800d550:	2601      	movlt	r6, #1
 800d552:	f7ff fdb1 	bl	800d0b8 <_Balloc>
 800d556:	692b      	ldr	r3, [r5, #16]
 800d558:	60c6      	str	r6, [r0, #12]
 800d55a:	6926      	ldr	r6, [r4, #16]
 800d55c:	f105 0914 	add.w	r9, r5, #20
 800d560:	f104 0214 	add.w	r2, r4, #20
 800d564:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d568:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d56c:	f100 0514 	add.w	r5, r0, #20
 800d570:	f04f 0e00 	mov.w	lr, #0
 800d574:	f852 ab04 	ldr.w	sl, [r2], #4
 800d578:	f859 4b04 	ldr.w	r4, [r9], #4
 800d57c:	fa1e f18a 	uxtah	r1, lr, sl
 800d580:	b2a3      	uxth	r3, r4
 800d582:	1ac9      	subs	r1, r1, r3
 800d584:	0c23      	lsrs	r3, r4, #16
 800d586:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d58a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d58e:	b289      	uxth	r1, r1
 800d590:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d594:	45c8      	cmp	r8, r9
 800d596:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d59a:	4694      	mov	ip, r2
 800d59c:	f845 3b04 	str.w	r3, [r5], #4
 800d5a0:	d8e8      	bhi.n	800d574 <__mdiff+0x5c>
 800d5a2:	45bc      	cmp	ip, r7
 800d5a4:	d304      	bcc.n	800d5b0 <__mdiff+0x98>
 800d5a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d5aa:	b183      	cbz	r3, 800d5ce <__mdiff+0xb6>
 800d5ac:	6106      	str	r6, [r0, #16]
 800d5ae:	e7c5      	b.n	800d53c <__mdiff+0x24>
 800d5b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d5b4:	fa1e f381 	uxtah	r3, lr, r1
 800d5b8:	141a      	asrs	r2, r3, #16
 800d5ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d5c8:	f845 3b04 	str.w	r3, [r5], #4
 800d5cc:	e7e9      	b.n	800d5a2 <__mdiff+0x8a>
 800d5ce:	3e01      	subs	r6, #1
 800d5d0:	e7e9      	b.n	800d5a6 <__mdiff+0x8e>

0800d5d2 <__d2b>:
 800d5d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5d6:	460e      	mov	r6, r1
 800d5d8:	2101      	movs	r1, #1
 800d5da:	ec59 8b10 	vmov	r8, r9, d0
 800d5de:	4615      	mov	r5, r2
 800d5e0:	f7ff fd6a 	bl	800d0b8 <_Balloc>
 800d5e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5ee:	bb34      	cbnz	r4, 800d63e <__d2b+0x6c>
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	f1b8 0300 	subs.w	r3, r8, #0
 800d5f6:	d027      	beq.n	800d648 <__d2b+0x76>
 800d5f8:	a802      	add	r0, sp, #8
 800d5fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d5fe:	f7ff fe00 	bl	800d202 <__lo0bits>
 800d602:	9900      	ldr	r1, [sp, #0]
 800d604:	b1f0      	cbz	r0, 800d644 <__d2b+0x72>
 800d606:	9a01      	ldr	r2, [sp, #4]
 800d608:	f1c0 0320 	rsb	r3, r0, #32
 800d60c:	fa02 f303 	lsl.w	r3, r2, r3
 800d610:	430b      	orrs	r3, r1
 800d612:	40c2      	lsrs	r2, r0
 800d614:	617b      	str	r3, [r7, #20]
 800d616:	9201      	str	r2, [sp, #4]
 800d618:	9b01      	ldr	r3, [sp, #4]
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bf14      	ite	ne
 800d620:	2102      	movne	r1, #2
 800d622:	2101      	moveq	r1, #1
 800d624:	6139      	str	r1, [r7, #16]
 800d626:	b1c4      	cbz	r4, 800d65a <__d2b+0x88>
 800d628:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d62c:	4404      	add	r4, r0
 800d62e:	6034      	str	r4, [r6, #0]
 800d630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d634:	6028      	str	r0, [r5, #0]
 800d636:	4638      	mov	r0, r7
 800d638:	b003      	add	sp, #12
 800d63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d63e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d642:	e7d5      	b.n	800d5f0 <__d2b+0x1e>
 800d644:	6179      	str	r1, [r7, #20]
 800d646:	e7e7      	b.n	800d618 <__d2b+0x46>
 800d648:	a801      	add	r0, sp, #4
 800d64a:	f7ff fdda 	bl	800d202 <__lo0bits>
 800d64e:	9b01      	ldr	r3, [sp, #4]
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	2101      	movs	r1, #1
 800d654:	6139      	str	r1, [r7, #16]
 800d656:	3020      	adds	r0, #32
 800d658:	e7e5      	b.n	800d626 <__d2b+0x54>
 800d65a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d65e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d662:	6030      	str	r0, [r6, #0]
 800d664:	6918      	ldr	r0, [r3, #16]
 800d666:	f7ff fdad 	bl	800d1c4 <__hi0bits>
 800d66a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d66e:	e7e1      	b.n	800d634 <__d2b+0x62>

0800d670 <_calloc_r>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	fb02 f401 	mul.w	r4, r2, r1
 800d676:	4621      	mov	r1, r4
 800d678:	f000 f856 	bl	800d728 <_malloc_r>
 800d67c:	4605      	mov	r5, r0
 800d67e:	b118      	cbz	r0, 800d688 <_calloc_r+0x18>
 800d680:	4622      	mov	r2, r4
 800d682:	2100      	movs	r1, #0
 800d684:	f7fd fe48 	bl	800b318 <memset>
 800d688:	4628      	mov	r0, r5
 800d68a:	bd38      	pop	{r3, r4, r5, pc}

0800d68c <_free_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4605      	mov	r5, r0
 800d690:	2900      	cmp	r1, #0
 800d692:	d045      	beq.n	800d720 <_free_r+0x94>
 800d694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d698:	1f0c      	subs	r4, r1, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bfb8      	it	lt
 800d69e:	18e4      	addlt	r4, r4, r3
 800d6a0:	f000 faf4 	bl	800dc8c <__malloc_lock>
 800d6a4:	4a1f      	ldr	r2, [pc, #124]	; (800d724 <_free_r+0x98>)
 800d6a6:	6813      	ldr	r3, [r2, #0]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	b933      	cbnz	r3, 800d6ba <_free_r+0x2e>
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	6014      	str	r4, [r2, #0]
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b6:	f000 baea 	b.w	800dc8e <__malloc_unlock>
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d90c      	bls.n	800d6d8 <_free_r+0x4c>
 800d6be:	6821      	ldr	r1, [r4, #0]
 800d6c0:	1862      	adds	r2, r4, r1
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bf04      	itt	eq
 800d6c6:	681a      	ldreq	r2, [r3, #0]
 800d6c8:	685b      	ldreq	r3, [r3, #4]
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	bf04      	itt	eq
 800d6ce:	1852      	addeq	r2, r2, r1
 800d6d0:	6022      	streq	r2, [r4, #0]
 800d6d2:	6004      	str	r4, [r0, #0]
 800d6d4:	e7ec      	b.n	800d6b0 <_free_r+0x24>
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	b10a      	cbz	r2, 800d6e0 <_free_r+0x54>
 800d6dc:	42a2      	cmp	r2, r4
 800d6de:	d9fa      	bls.n	800d6d6 <_free_r+0x4a>
 800d6e0:	6819      	ldr	r1, [r3, #0]
 800d6e2:	1858      	adds	r0, r3, r1
 800d6e4:	42a0      	cmp	r0, r4
 800d6e6:	d10b      	bne.n	800d700 <_free_r+0x74>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	1858      	adds	r0, r3, r1
 800d6ee:	4282      	cmp	r2, r0
 800d6f0:	6019      	str	r1, [r3, #0]
 800d6f2:	d1dd      	bne.n	800d6b0 <_free_r+0x24>
 800d6f4:	6810      	ldr	r0, [r2, #0]
 800d6f6:	6852      	ldr	r2, [r2, #4]
 800d6f8:	605a      	str	r2, [r3, #4]
 800d6fa:	4401      	add	r1, r0
 800d6fc:	6019      	str	r1, [r3, #0]
 800d6fe:	e7d7      	b.n	800d6b0 <_free_r+0x24>
 800d700:	d902      	bls.n	800d708 <_free_r+0x7c>
 800d702:	230c      	movs	r3, #12
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	e7d3      	b.n	800d6b0 <_free_r+0x24>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	1821      	adds	r1, r4, r0
 800d70c:	428a      	cmp	r2, r1
 800d70e:	bf04      	itt	eq
 800d710:	6811      	ldreq	r1, [r2, #0]
 800d712:	6852      	ldreq	r2, [r2, #4]
 800d714:	6062      	str	r2, [r4, #4]
 800d716:	bf04      	itt	eq
 800d718:	1809      	addeq	r1, r1, r0
 800d71a:	6021      	streq	r1, [r4, #0]
 800d71c:	605c      	str	r4, [r3, #4]
 800d71e:	e7c7      	b.n	800d6b0 <_free_r+0x24>
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	24004c4c 	.word	0x24004c4c

0800d728 <_malloc_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	1ccd      	adds	r5, r1, #3
 800d72c:	f025 0503 	bic.w	r5, r5, #3
 800d730:	3508      	adds	r5, #8
 800d732:	2d0c      	cmp	r5, #12
 800d734:	bf38      	it	cc
 800d736:	250c      	movcc	r5, #12
 800d738:	2d00      	cmp	r5, #0
 800d73a:	4606      	mov	r6, r0
 800d73c:	db01      	blt.n	800d742 <_malloc_r+0x1a>
 800d73e:	42a9      	cmp	r1, r5
 800d740:	d903      	bls.n	800d74a <_malloc_r+0x22>
 800d742:	230c      	movs	r3, #12
 800d744:	6033      	str	r3, [r6, #0]
 800d746:	2000      	movs	r0, #0
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	f000 fa9f 	bl	800dc8c <__malloc_lock>
 800d74e:	4a21      	ldr	r2, [pc, #132]	; (800d7d4 <_malloc_r+0xac>)
 800d750:	6814      	ldr	r4, [r2, #0]
 800d752:	4621      	mov	r1, r4
 800d754:	b991      	cbnz	r1, 800d77c <_malloc_r+0x54>
 800d756:	4c20      	ldr	r4, [pc, #128]	; (800d7d8 <_malloc_r+0xb0>)
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	b91b      	cbnz	r3, 800d764 <_malloc_r+0x3c>
 800d75c:	4630      	mov	r0, r6
 800d75e:	f000 f9eb 	bl	800db38 <_sbrk_r>
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	4629      	mov	r1, r5
 800d766:	4630      	mov	r0, r6
 800d768:	f000 f9e6 	bl	800db38 <_sbrk_r>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d124      	bne.n	800d7ba <_malloc_r+0x92>
 800d770:	230c      	movs	r3, #12
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	4630      	mov	r0, r6
 800d776:	f000 fa8a 	bl	800dc8e <__malloc_unlock>
 800d77a:	e7e4      	b.n	800d746 <_malloc_r+0x1e>
 800d77c:	680b      	ldr	r3, [r1, #0]
 800d77e:	1b5b      	subs	r3, r3, r5
 800d780:	d418      	bmi.n	800d7b4 <_malloc_r+0x8c>
 800d782:	2b0b      	cmp	r3, #11
 800d784:	d90f      	bls.n	800d7a6 <_malloc_r+0x7e>
 800d786:	600b      	str	r3, [r1, #0]
 800d788:	50cd      	str	r5, [r1, r3]
 800d78a:	18cc      	adds	r4, r1, r3
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 fa7e 	bl	800dc8e <__malloc_unlock>
 800d792:	f104 000b 	add.w	r0, r4, #11
 800d796:	1d23      	adds	r3, r4, #4
 800d798:	f020 0007 	bic.w	r0, r0, #7
 800d79c:	1ac3      	subs	r3, r0, r3
 800d79e:	d0d3      	beq.n	800d748 <_malloc_r+0x20>
 800d7a0:	425a      	negs	r2, r3
 800d7a2:	50e2      	str	r2, [r4, r3]
 800d7a4:	e7d0      	b.n	800d748 <_malloc_r+0x20>
 800d7a6:	428c      	cmp	r4, r1
 800d7a8:	684b      	ldr	r3, [r1, #4]
 800d7aa:	bf16      	itet	ne
 800d7ac:	6063      	strne	r3, [r4, #4]
 800d7ae:	6013      	streq	r3, [r2, #0]
 800d7b0:	460c      	movne	r4, r1
 800d7b2:	e7eb      	b.n	800d78c <_malloc_r+0x64>
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	6849      	ldr	r1, [r1, #4]
 800d7b8:	e7cc      	b.n	800d754 <_malloc_r+0x2c>
 800d7ba:	1cc4      	adds	r4, r0, #3
 800d7bc:	f024 0403 	bic.w	r4, r4, #3
 800d7c0:	42a0      	cmp	r0, r4
 800d7c2:	d005      	beq.n	800d7d0 <_malloc_r+0xa8>
 800d7c4:	1a21      	subs	r1, r4, r0
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f000 f9b6 	bl	800db38 <_sbrk_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d0cf      	beq.n	800d770 <_malloc_r+0x48>
 800d7d0:	6025      	str	r5, [r4, #0]
 800d7d2:	e7db      	b.n	800d78c <_malloc_r+0x64>
 800d7d4:	24004c4c 	.word	0x24004c4c
 800d7d8:	24004c50 	.word	0x24004c50

0800d7dc <_realloc_r>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	4607      	mov	r7, r0
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	460e      	mov	r6, r1
 800d7e4:	b921      	cbnz	r1, 800d7f0 <_realloc_r+0x14>
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7ec:	f7ff bf9c 	b.w	800d728 <_malloc_r>
 800d7f0:	b922      	cbnz	r2, 800d7fc <_realloc_r+0x20>
 800d7f2:	f7ff ff4b 	bl	800d68c <_free_r>
 800d7f6:	4625      	mov	r5, r4
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fc:	f000 fa48 	bl	800dc90 <_malloc_usable_size_r>
 800d800:	42a0      	cmp	r0, r4
 800d802:	d20f      	bcs.n	800d824 <_realloc_r+0x48>
 800d804:	4621      	mov	r1, r4
 800d806:	4638      	mov	r0, r7
 800d808:	f7ff ff8e 	bl	800d728 <_malloc_r>
 800d80c:	4605      	mov	r5, r0
 800d80e:	2800      	cmp	r0, #0
 800d810:	d0f2      	beq.n	800d7f8 <_realloc_r+0x1c>
 800d812:	4631      	mov	r1, r6
 800d814:	4622      	mov	r2, r4
 800d816:	f7fd fd5b 	bl	800b2d0 <memcpy>
 800d81a:	4631      	mov	r1, r6
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ff35 	bl	800d68c <_free_r>
 800d822:	e7e9      	b.n	800d7f8 <_realloc_r+0x1c>
 800d824:	4635      	mov	r5, r6
 800d826:	e7e7      	b.n	800d7f8 <_realloc_r+0x1c>

0800d828 <__ssputs_r>:
 800d828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d82c:	688e      	ldr	r6, [r1, #8]
 800d82e:	429e      	cmp	r6, r3
 800d830:	4682      	mov	sl, r0
 800d832:	460c      	mov	r4, r1
 800d834:	4690      	mov	r8, r2
 800d836:	4699      	mov	r9, r3
 800d838:	d837      	bhi.n	800d8aa <__ssputs_r+0x82>
 800d83a:	898a      	ldrh	r2, [r1, #12]
 800d83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d840:	d031      	beq.n	800d8a6 <__ssputs_r+0x7e>
 800d842:	6825      	ldr	r5, [r4, #0]
 800d844:	6909      	ldr	r1, [r1, #16]
 800d846:	1a6f      	subs	r7, r5, r1
 800d848:	6965      	ldr	r5, [r4, #20]
 800d84a:	2302      	movs	r3, #2
 800d84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d850:	fb95 f5f3 	sdiv	r5, r5, r3
 800d854:	f109 0301 	add.w	r3, r9, #1
 800d858:	443b      	add	r3, r7
 800d85a:	429d      	cmp	r5, r3
 800d85c:	bf38      	it	cc
 800d85e:	461d      	movcc	r5, r3
 800d860:	0553      	lsls	r3, r2, #21
 800d862:	d530      	bpl.n	800d8c6 <__ssputs_r+0x9e>
 800d864:	4629      	mov	r1, r5
 800d866:	f7ff ff5f 	bl	800d728 <_malloc_r>
 800d86a:	4606      	mov	r6, r0
 800d86c:	b950      	cbnz	r0, 800d884 <__ssputs_r+0x5c>
 800d86e:	230c      	movs	r3, #12
 800d870:	f8ca 3000 	str.w	r3, [sl]
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295
 800d880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d884:	463a      	mov	r2, r7
 800d886:	6921      	ldr	r1, [r4, #16]
 800d888:	f7fd fd22 	bl	800b2d0 <memcpy>
 800d88c:	89a3      	ldrh	r3, [r4, #12]
 800d88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d896:	81a3      	strh	r3, [r4, #12]
 800d898:	6126      	str	r6, [r4, #16]
 800d89a:	6165      	str	r5, [r4, #20]
 800d89c:	443e      	add	r6, r7
 800d89e:	1bed      	subs	r5, r5, r7
 800d8a0:	6026      	str	r6, [r4, #0]
 800d8a2:	60a5      	str	r5, [r4, #8]
 800d8a4:	464e      	mov	r6, r9
 800d8a6:	454e      	cmp	r6, r9
 800d8a8:	d900      	bls.n	800d8ac <__ssputs_r+0x84>
 800d8aa:	464e      	mov	r6, r9
 800d8ac:	4632      	mov	r2, r6
 800d8ae:	4641      	mov	r1, r8
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	f7fd fd18 	bl	800b2e6 <memmove>
 800d8b6:	68a3      	ldr	r3, [r4, #8]
 800d8b8:	1b9b      	subs	r3, r3, r6
 800d8ba:	60a3      	str	r3, [r4, #8]
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	441e      	add	r6, r3
 800d8c0:	6026      	str	r6, [r4, #0]
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e7dc      	b.n	800d880 <__ssputs_r+0x58>
 800d8c6:	462a      	mov	r2, r5
 800d8c8:	f7ff ff88 	bl	800d7dc <_realloc_r>
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d1e2      	bne.n	800d898 <__ssputs_r+0x70>
 800d8d2:	6921      	ldr	r1, [r4, #16]
 800d8d4:	4650      	mov	r0, sl
 800d8d6:	f7ff fed9 	bl	800d68c <_free_r>
 800d8da:	e7c8      	b.n	800d86e <__ssputs_r+0x46>

0800d8dc <_svfiprintf_r>:
 800d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	898b      	ldrh	r3, [r1, #12]
 800d8e4:	061f      	lsls	r7, r3, #24
 800d8e6:	b09d      	sub	sp, #116	; 0x74
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	4616      	mov	r6, r2
 800d8ee:	d50f      	bpl.n	800d910 <_svfiprintf_r+0x34>
 800d8f0:	690b      	ldr	r3, [r1, #16]
 800d8f2:	b96b      	cbnz	r3, 800d910 <_svfiprintf_r+0x34>
 800d8f4:	2140      	movs	r1, #64	; 0x40
 800d8f6:	f7ff ff17 	bl	800d728 <_malloc_r>
 800d8fa:	6020      	str	r0, [r4, #0]
 800d8fc:	6120      	str	r0, [r4, #16]
 800d8fe:	b928      	cbnz	r0, 800d90c <_svfiprintf_r+0x30>
 800d900:	230c      	movs	r3, #12
 800d902:	f8c8 3000 	str.w	r3, [r8]
 800d906:	f04f 30ff 	mov.w	r0, #4294967295
 800d90a:	e0c8      	b.n	800da9e <_svfiprintf_r+0x1c2>
 800d90c:	2340      	movs	r3, #64	; 0x40
 800d90e:	6163      	str	r3, [r4, #20]
 800d910:	2300      	movs	r3, #0
 800d912:	9309      	str	r3, [sp, #36]	; 0x24
 800d914:	2320      	movs	r3, #32
 800d916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d91a:	2330      	movs	r3, #48	; 0x30
 800d91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d920:	9503      	str	r5, [sp, #12]
 800d922:	f04f 0b01 	mov.w	fp, #1
 800d926:	4637      	mov	r7, r6
 800d928:	463d      	mov	r5, r7
 800d92a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d92e:	b10b      	cbz	r3, 800d934 <_svfiprintf_r+0x58>
 800d930:	2b25      	cmp	r3, #37	; 0x25
 800d932:	d13e      	bne.n	800d9b2 <_svfiprintf_r+0xd6>
 800d934:	ebb7 0a06 	subs.w	sl, r7, r6
 800d938:	d00b      	beq.n	800d952 <_svfiprintf_r+0x76>
 800d93a:	4653      	mov	r3, sl
 800d93c:	4632      	mov	r2, r6
 800d93e:	4621      	mov	r1, r4
 800d940:	4640      	mov	r0, r8
 800d942:	f7ff ff71 	bl	800d828 <__ssputs_r>
 800d946:	3001      	adds	r0, #1
 800d948:	f000 80a4 	beq.w	800da94 <_svfiprintf_r+0x1b8>
 800d94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94e:	4453      	add	r3, sl
 800d950:	9309      	str	r3, [sp, #36]	; 0x24
 800d952:	783b      	ldrb	r3, [r7, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 809d 	beq.w	800da94 <_svfiprintf_r+0x1b8>
 800d95a:	2300      	movs	r3, #0
 800d95c:	f04f 32ff 	mov.w	r2, #4294967295
 800d960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d964:	9304      	str	r3, [sp, #16]
 800d966:	9307      	str	r3, [sp, #28]
 800d968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d96c:	931a      	str	r3, [sp, #104]	; 0x68
 800d96e:	462f      	mov	r7, r5
 800d970:	2205      	movs	r2, #5
 800d972:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d976:	4850      	ldr	r0, [pc, #320]	; (800dab8 <_svfiprintf_r+0x1dc>)
 800d978:	f7f2 fcba 	bl	80002f0 <memchr>
 800d97c:	9b04      	ldr	r3, [sp, #16]
 800d97e:	b9d0      	cbnz	r0, 800d9b6 <_svfiprintf_r+0xda>
 800d980:	06d9      	lsls	r1, r3, #27
 800d982:	bf44      	itt	mi
 800d984:	2220      	movmi	r2, #32
 800d986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d98a:	071a      	lsls	r2, r3, #28
 800d98c:	bf44      	itt	mi
 800d98e:	222b      	movmi	r2, #43	; 0x2b
 800d990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d994:	782a      	ldrb	r2, [r5, #0]
 800d996:	2a2a      	cmp	r2, #42	; 0x2a
 800d998:	d015      	beq.n	800d9c6 <_svfiprintf_r+0xea>
 800d99a:	9a07      	ldr	r2, [sp, #28]
 800d99c:	462f      	mov	r7, r5
 800d99e:	2000      	movs	r0, #0
 800d9a0:	250a      	movs	r5, #10
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a8:	3b30      	subs	r3, #48	; 0x30
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	d94d      	bls.n	800da4a <_svfiprintf_r+0x16e>
 800d9ae:	b1b8      	cbz	r0, 800d9e0 <_svfiprintf_r+0x104>
 800d9b0:	e00f      	b.n	800d9d2 <_svfiprintf_r+0xf6>
 800d9b2:	462f      	mov	r7, r5
 800d9b4:	e7b8      	b.n	800d928 <_svfiprintf_r+0x4c>
 800d9b6:	4a40      	ldr	r2, [pc, #256]	; (800dab8 <_svfiprintf_r+0x1dc>)
 800d9b8:	1a80      	subs	r0, r0, r2
 800d9ba:	fa0b f000 	lsl.w	r0, fp, r0
 800d9be:	4318      	orrs	r0, r3
 800d9c0:	9004      	str	r0, [sp, #16]
 800d9c2:	463d      	mov	r5, r7
 800d9c4:	e7d3      	b.n	800d96e <_svfiprintf_r+0x92>
 800d9c6:	9a03      	ldr	r2, [sp, #12]
 800d9c8:	1d11      	adds	r1, r2, #4
 800d9ca:	6812      	ldr	r2, [r2, #0]
 800d9cc:	9103      	str	r1, [sp, #12]
 800d9ce:	2a00      	cmp	r2, #0
 800d9d0:	db01      	blt.n	800d9d6 <_svfiprintf_r+0xfa>
 800d9d2:	9207      	str	r2, [sp, #28]
 800d9d4:	e004      	b.n	800d9e0 <_svfiprintf_r+0x104>
 800d9d6:	4252      	negs	r2, r2
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	9304      	str	r3, [sp, #16]
 800d9e0:	783b      	ldrb	r3, [r7, #0]
 800d9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d9e4:	d10c      	bne.n	800da00 <_svfiprintf_r+0x124>
 800d9e6:	787b      	ldrb	r3, [r7, #1]
 800d9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ea:	d133      	bne.n	800da54 <_svfiprintf_r+0x178>
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	1d1a      	adds	r2, r3, #4
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	9203      	str	r2, [sp, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	bfb8      	it	lt
 800d9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9fc:	3702      	adds	r7, #2
 800d9fe:	9305      	str	r3, [sp, #20]
 800da00:	4d2e      	ldr	r5, [pc, #184]	; (800dabc <_svfiprintf_r+0x1e0>)
 800da02:	7839      	ldrb	r1, [r7, #0]
 800da04:	2203      	movs	r2, #3
 800da06:	4628      	mov	r0, r5
 800da08:	f7f2 fc72 	bl	80002f0 <memchr>
 800da0c:	b138      	cbz	r0, 800da1e <_svfiprintf_r+0x142>
 800da0e:	2340      	movs	r3, #64	; 0x40
 800da10:	1b40      	subs	r0, r0, r5
 800da12:	fa03 f000 	lsl.w	r0, r3, r0
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	4303      	orrs	r3, r0
 800da1a:	3701      	adds	r7, #1
 800da1c:	9304      	str	r3, [sp, #16]
 800da1e:	7839      	ldrb	r1, [r7, #0]
 800da20:	4827      	ldr	r0, [pc, #156]	; (800dac0 <_svfiprintf_r+0x1e4>)
 800da22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da26:	2206      	movs	r2, #6
 800da28:	1c7e      	adds	r6, r7, #1
 800da2a:	f7f2 fc61 	bl	80002f0 <memchr>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d038      	beq.n	800daa4 <_svfiprintf_r+0x1c8>
 800da32:	4b24      	ldr	r3, [pc, #144]	; (800dac4 <_svfiprintf_r+0x1e8>)
 800da34:	bb13      	cbnz	r3, 800da7c <_svfiprintf_r+0x1a0>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	3307      	adds	r3, #7
 800da3a:	f023 0307 	bic.w	r3, r3, #7
 800da3e:	3308      	adds	r3, #8
 800da40:	9303      	str	r3, [sp, #12]
 800da42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da44:	444b      	add	r3, r9
 800da46:	9309      	str	r3, [sp, #36]	; 0x24
 800da48:	e76d      	b.n	800d926 <_svfiprintf_r+0x4a>
 800da4a:	fb05 3202 	mla	r2, r5, r2, r3
 800da4e:	2001      	movs	r0, #1
 800da50:	460f      	mov	r7, r1
 800da52:	e7a6      	b.n	800d9a2 <_svfiprintf_r+0xc6>
 800da54:	2300      	movs	r3, #0
 800da56:	3701      	adds	r7, #1
 800da58:	9305      	str	r3, [sp, #20]
 800da5a:	4619      	mov	r1, r3
 800da5c:	250a      	movs	r5, #10
 800da5e:	4638      	mov	r0, r7
 800da60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da64:	3a30      	subs	r2, #48	; 0x30
 800da66:	2a09      	cmp	r2, #9
 800da68:	d903      	bls.n	800da72 <_svfiprintf_r+0x196>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0c8      	beq.n	800da00 <_svfiprintf_r+0x124>
 800da6e:	9105      	str	r1, [sp, #20]
 800da70:	e7c6      	b.n	800da00 <_svfiprintf_r+0x124>
 800da72:	fb05 2101 	mla	r1, r5, r1, r2
 800da76:	2301      	movs	r3, #1
 800da78:	4607      	mov	r7, r0
 800da7a:	e7f0      	b.n	800da5e <_svfiprintf_r+0x182>
 800da7c:	ab03      	add	r3, sp, #12
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	4622      	mov	r2, r4
 800da82:	4b11      	ldr	r3, [pc, #68]	; (800dac8 <_svfiprintf_r+0x1ec>)
 800da84:	a904      	add	r1, sp, #16
 800da86:	4640      	mov	r0, r8
 800da88:	f7fd fe16 	bl	800b6b8 <_printf_float>
 800da8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da90:	4681      	mov	r9, r0
 800da92:	d1d6      	bne.n	800da42 <_svfiprintf_r+0x166>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	065b      	lsls	r3, r3, #25
 800da98:	f53f af35 	bmi.w	800d906 <_svfiprintf_r+0x2a>
 800da9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da9e:	b01d      	add	sp, #116	; 0x74
 800daa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa4:	ab03      	add	r3, sp, #12
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	4622      	mov	r2, r4
 800daaa:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <_svfiprintf_r+0x1ec>)
 800daac:	a904      	add	r1, sp, #16
 800daae:	4640      	mov	r0, r8
 800dab0:	f7fe f8a4 	bl	800bbfc <_printf_i>
 800dab4:	e7ea      	b.n	800da8c <_svfiprintf_r+0x1b0>
 800dab6:	bf00      	nop
 800dab8:	0800de4e 	.word	0x0800de4e
 800dabc:	0800de54 	.word	0x0800de54
 800dac0:	0800de58 	.word	0x0800de58
 800dac4:	0800b6b9 	.word	0x0800b6b9
 800dac8:	0800d829 	.word	0x0800d829

0800dacc <_putc_r>:
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	460d      	mov	r5, r1
 800dad0:	4614      	mov	r4, r2
 800dad2:	4606      	mov	r6, r0
 800dad4:	b118      	cbz	r0, 800dade <_putc_r+0x12>
 800dad6:	6983      	ldr	r3, [r0, #24]
 800dad8:	b90b      	cbnz	r3, 800dade <_putc_r+0x12>
 800dada:	f7ff f9e9 	bl	800ceb0 <__sinit>
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <_putc_r+0x60>)
 800dae0:	429c      	cmp	r4, r3
 800dae2:	d112      	bne.n	800db0a <_putc_r+0x3e>
 800dae4:	6874      	ldr	r4, [r6, #4]
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	3b01      	subs	r3, #1
 800daea:	2b00      	cmp	r3, #0
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	da16      	bge.n	800db1e <_putc_r+0x52>
 800daf0:	69a2      	ldr	r2, [r4, #24]
 800daf2:	4293      	cmp	r3, r2
 800daf4:	db02      	blt.n	800dafc <_putc_r+0x30>
 800daf6:	b2eb      	uxtb	r3, r5
 800daf8:	2b0a      	cmp	r3, #10
 800dafa:	d110      	bne.n	800db1e <_putc_r+0x52>
 800dafc:	4622      	mov	r2, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	4630      	mov	r0, r6
 800db02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db06:	f7fe ba3b 	b.w	800bf80 <__swbuf_r>
 800db0a:	4b09      	ldr	r3, [pc, #36]	; (800db30 <_putc_r+0x64>)
 800db0c:	429c      	cmp	r4, r3
 800db0e:	d101      	bne.n	800db14 <_putc_r+0x48>
 800db10:	68b4      	ldr	r4, [r6, #8]
 800db12:	e7e8      	b.n	800dae6 <_putc_r+0x1a>
 800db14:	4b07      	ldr	r3, [pc, #28]	; (800db34 <_putc_r+0x68>)
 800db16:	429c      	cmp	r4, r3
 800db18:	bf08      	it	eq
 800db1a:	68f4      	ldreq	r4, [r6, #12]
 800db1c:	e7e3      	b.n	800dae6 <_putc_r+0x1a>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	1c5a      	adds	r2, r3, #1
 800db22:	6022      	str	r2, [r4, #0]
 800db24:	701d      	strb	r5, [r3, #0]
 800db26:	b2e8      	uxtb	r0, r5
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	bf00      	nop
 800db2c:	0800dfc4 	.word	0x0800dfc4
 800db30:	0800dfe4 	.word	0x0800dfe4
 800db34:	0800dfa4 	.word	0x0800dfa4

0800db38 <_sbrk_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4c06      	ldr	r4, [pc, #24]	; (800db54 <_sbrk_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4605      	mov	r5, r0
 800db40:	4608      	mov	r0, r1
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	f7f3 f918 	bl	8000d78 <_sbrk>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_sbrk_r+0x1a>
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_sbrk_r+0x1a>
 800db50:	602b      	str	r3, [r5, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	24004f1c 	.word	0x24004f1c

0800db58 <__sread>:
 800db58:	b510      	push	{r4, lr}
 800db5a:	460c      	mov	r4, r1
 800db5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db60:	f000 f89e 	bl	800dca0 <_read_r>
 800db64:	2800      	cmp	r0, #0
 800db66:	bfab      	itete	ge
 800db68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db6a:	89a3      	ldrhlt	r3, [r4, #12]
 800db6c:	181b      	addge	r3, r3, r0
 800db6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db72:	bfac      	ite	ge
 800db74:	6563      	strge	r3, [r4, #84]	; 0x54
 800db76:	81a3      	strhlt	r3, [r4, #12]
 800db78:	bd10      	pop	{r4, pc}

0800db7a <__swrite>:
 800db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	461f      	mov	r7, r3
 800db80:	898b      	ldrh	r3, [r1, #12]
 800db82:	05db      	lsls	r3, r3, #23
 800db84:	4605      	mov	r5, r0
 800db86:	460c      	mov	r4, r1
 800db88:	4616      	mov	r6, r2
 800db8a:	d505      	bpl.n	800db98 <__swrite+0x1e>
 800db8c:	2302      	movs	r3, #2
 800db8e:	2200      	movs	r2, #0
 800db90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db94:	f000 f868 	bl	800dc68 <_lseek_r>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dba2:	81a3      	strh	r3, [r4, #12]
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	4628      	mov	r0, r5
 800dbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	f000 b817 	b.w	800dbe0 <_write_r>

0800dbb2 <__sseek>:
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbba:	f000 f855 	bl	800dc68 <_lseek_r>
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	bf15      	itete	ne
 800dbc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbce:	81a3      	strheq	r3, [r4, #12]
 800dbd0:	bf18      	it	ne
 800dbd2:	81a3      	strhne	r3, [r4, #12]
 800dbd4:	bd10      	pop	{r4, pc}

0800dbd6 <__sclose>:
 800dbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbda:	f000 b813 	b.w	800dc04 <_close_r>
	...

0800dbe0 <_write_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4c07      	ldr	r4, [pc, #28]	; (800dc00 <_write_r+0x20>)
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	4608      	mov	r0, r1
 800dbe8:	4611      	mov	r1, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	6022      	str	r2, [r4, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f7f3 f871 	bl	8000cd6 <_write>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_write_r+0x1e>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_write_r+0x1e>
 800dbfc:	602b      	str	r3, [r5, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	24004f1c 	.word	0x24004f1c

0800dc04 <_close_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4c06      	ldr	r4, [pc, #24]	; (800dc20 <_close_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	f7f3 f87d 	bl	8000d0e <_close>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_close_r+0x1a>
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_close_r+0x1a>
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	24004f1c 	.word	0x24004f1c

0800dc24 <_fstat_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4c07      	ldr	r4, [pc, #28]	; (800dc44 <_fstat_r+0x20>)
 800dc28:	2300      	movs	r3, #0
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	4608      	mov	r0, r1
 800dc2e:	4611      	mov	r1, r2
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	f7f3 f878 	bl	8000d26 <_fstat>
 800dc36:	1c43      	adds	r3, r0, #1
 800dc38:	d102      	bne.n	800dc40 <_fstat_r+0x1c>
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	b103      	cbz	r3, 800dc40 <_fstat_r+0x1c>
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	bd38      	pop	{r3, r4, r5, pc}
 800dc42:	bf00      	nop
 800dc44:	24004f1c 	.word	0x24004f1c

0800dc48 <_isatty_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4c06      	ldr	r4, [pc, #24]	; (800dc64 <_isatty_r+0x1c>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4605      	mov	r5, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	f7f3 f877 	bl	8000d46 <_isatty>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d102      	bne.n	800dc62 <_isatty_r+0x1a>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	b103      	cbz	r3, 800dc62 <_isatty_r+0x1a>
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	24004f1c 	.word	0x24004f1c

0800dc68 <_lseek_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4c07      	ldr	r4, [pc, #28]	; (800dc88 <_lseek_r+0x20>)
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	4608      	mov	r0, r1
 800dc70:	4611      	mov	r1, r2
 800dc72:	2200      	movs	r2, #0
 800dc74:	6022      	str	r2, [r4, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	f7f3 f870 	bl	8000d5c <_lseek>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_lseek_r+0x1e>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_lseek_r+0x1e>
 800dc84:	602b      	str	r3, [r5, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	24004f1c 	.word	0x24004f1c

0800dc8c <__malloc_lock>:
 800dc8c:	4770      	bx	lr

0800dc8e <__malloc_unlock>:
 800dc8e:	4770      	bx	lr

0800dc90 <_malloc_usable_size_r>:
 800dc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc94:	1f18      	subs	r0, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbc      	itt	lt
 800dc9a:	580b      	ldrlt	r3, [r1, r0]
 800dc9c:	18c0      	addlt	r0, r0, r3
 800dc9e:	4770      	bx	lr

0800dca0 <_read_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4c07      	ldr	r4, [pc, #28]	; (800dcc0 <_read_r+0x20>)
 800dca4:	4605      	mov	r5, r0
 800dca6:	4608      	mov	r0, r1
 800dca8:	4611      	mov	r1, r2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	6022      	str	r2, [r4, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f7f2 fff4 	bl	8000c9c <_read>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_read_r+0x1e>
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_read_r+0x1e>
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	24004f1c 	.word	0x24004f1c

0800dcc4 <_init>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr

0800dcd0 <_fini>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	bf00      	nop
 800dcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd6:	bc08      	pop	{r3}
 800dcd8:	469e      	mov	lr, r3
 800dcda:	4770      	bx	lr
